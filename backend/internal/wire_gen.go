// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"crm.saas/backend/internal/http/handlers"
	"crm.saas/backend/internal/repositories"
	"crm.saas/backend/internal/services"
)

// Injectors from wire.go:

func InitializeChatHandler() *handlers.ChatHandler {
	chatRepository := repositories.NewChatRepository()
	chatService := services.NewChatService(chatRepository)
	chatHandler := handlers.NewChatHandler(chatService)
	return chatHandler
}

func InitializeCostumerHandler() *handlers.CostumerHandler {
	costumerRepository := repositories.NewCostumerRepository()
	costumerService := services.NewCostumerService(costumerRepository)
	costumerHandler := handlers.NewCostumerHandler(costumerService)
	return costumerHandler
}

func InitializeDealHandler() *handlers.DealHandler {
	dealRepository := repositories.NewDealRepository()
	dealService := services.NewDealService(dealRepository)
	dealHandler := handlers.NewDealHandler(dealService)
	return dealHandler
}

func InitializeDepartmentHandler() *handlers.DepartmentHandler {
	departmentRepository := repositories.NewDepartmentRepository()
	departmentService := services.NewDepartmentService(departmentRepository)
	departmentHandler := handlers.NewDepartmentHandler(departmentService)
	return departmentHandler
}

func InitializeEmployeeHandler() *handlers.EmployeeHandler {
	employeeRepository := repositories.NewEmployeeRepository()
	employeeService := services.NewEmployeeService(employeeRepository)
	employeeHandler := handlers.NewEmployeeHandler(employeeService)
	return employeeHandler
}

func InitializeEmployeeAuthHandler() *handlers.EmployeeAuthHandler {
	employeeAuthRepository := repositories.NewEmployeeAuthRepository()
	employeeAuthService := services.NewEmployeeAuthService(employeeAuthRepository)
	employeeAuthHandler := handlers.NewEmployeeAuthHandler(employeeAuthService)
	return employeeAuthHandler
}

func InitializeFieldHandler() *handlers.FieldHandler {
	fieldRepository := repositories.NewFieldRepository()
	fieldService := services.NewFieldService(fieldRepository)
	fieldHandler := handlers.NewFieldHandler(fieldService)
	return fieldHandler
}

func InitializeFormHandler() *handlers.FormHandler {
	formRepository := repositories.NewFormRepository()
	formService := services.NewFormService(formRepository)
	formHandler := handlers.NewFormHandler(formService)
	return formHandler
}

func InitializeMessageHandler() *handlers.MessageHandler {
	messageRepository := repositories.NewMessageRepository()
	messageService := services.NewMessageService(messageRepository)
	messageHandler := handlers.NewMessageHandler(messageService)
	return messageHandler
}

func InitializePipelineHandler() *handlers.PipelineHandler {
	pipelineRepository := repositories.NewPipelineRepository()
	pipelineService := services.NewPipelineService(pipelineRepository)
	pipelineHandler := handlers.NewPipelineHandler(pipelineService)
	return pipelineHandler
}

func InitializeQueueHandler() *handlers.QueueHandler {
	queueRepository := repositories.NewQueueRepository()
	queueService := services.NewQueueService(queueRepository)
	queueHandler := handlers.NewQueueHandler(queueService)
	return queueHandler
}

func InitializeStageHandler() *handlers.StageHandler {
	stageRepository := repositories.NewStageRepository()
	stageService := services.NewStageService(stageRepository)
	stageHandler := handlers.NewStageHandler(stageService)
	return stageHandler
}
