// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/chat"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/costumer"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/crmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/deal"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dealcrmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/department"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dropdownlist"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employee"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employeeauth"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/file"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/message"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/pipeline"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/queue"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/rbac"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/stage"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/text"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[uuid.UUID]
	PageInfo       = entgql.PageInfo[uuid.UUID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ChatEdge is the edge representation of Chat.
type ChatEdge struct {
	Node   *Chat  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ChatConnection is the connection containing edges to Chat.
type ChatConnection struct {
	Edges      []*ChatEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *ChatConnection) build(nodes []*Chat, pager *chatPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Chat
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Chat {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Chat {
			return nodes[i]
		}
	}
	c.Edges = make([]*ChatEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ChatEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ChatPaginateOption enables pagination customization.
type ChatPaginateOption func(*chatPager) error

// WithChatOrder configures pagination ordering.
func WithChatOrder(order []*ChatOrder) ChatPaginateOption {
	return func(pager *chatPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithChatFilter configures pagination filter.
func WithChatFilter(filter func(*ChatQuery) (*ChatQuery, error)) ChatPaginateOption {
	return func(pager *chatPager) error {
		if filter == nil {
			return errors.New("ChatQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type chatPager struct {
	reverse bool
	order   []*ChatOrder
	filter  func(*ChatQuery) (*ChatQuery, error)
}

func newChatPager(opts []ChatPaginateOption, reverse bool) (*chatPager, error) {
	pager := &chatPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *chatPager) applyFilter(query *ChatQuery) (*ChatQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *chatPager) toCursor(_m *Chat) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *chatPager) applyCursors(query *ChatQuery, after, before *Cursor) (*ChatQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultChatOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *chatPager) applyOrder(query *ChatQuery) *ChatQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultChatOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultChatOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *chatPager) orderExpr(query *ChatQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultChatOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Chat.
func (_m *ChatQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ChatPaginateOption,
) (*ChatConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newChatPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &ChatConnection{Edges: []*ChatEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ChatOrderFieldTitle orders Chat by title.
	ChatOrderFieldTitle = &ChatOrderField{
		Value: func(_m *Chat) (ent.Value, error) {
			return _m.Title, nil
		},
		column: chat.FieldTitle,
		toTerm: chat.ByTitle,
		toCursor: func(_m *Chat) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Title,
			}
		},
	}
	// ChatOrderFieldAccepted orders Chat by accepted.
	ChatOrderFieldAccepted = &ChatOrderField{
		Value: func(_m *Chat) (ent.Value, error) {
			return _m.Accepted, nil
		},
		column: chat.FieldAccepted,
		toTerm: chat.ByAccepted,
		toCursor: func(_m *Chat) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Accepted,
			}
		},
	}
	// ChatOrderFieldLocked orders Chat by locked.
	ChatOrderFieldLocked = &ChatOrderField{
		Value: func(_m *Chat) (ent.Value, error) {
			return _m.Locked, nil
		},
		column: chat.FieldLocked,
		toTerm: chat.ByLocked,
		toCursor: func(_m *Chat) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Locked,
			}
		},
	}
	// ChatOrderFieldCreatedAt orders Chat by createdAt.
	ChatOrderFieldCreatedAt = &ChatOrderField{
		Value: func(_m *Chat) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: chat.FieldCreatedAt,
		toTerm: chat.ByCreatedAt,
		toCursor: func(_m *Chat) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// ChatOrderFieldUpdatedAt orders Chat by updatedAt.
	ChatOrderFieldUpdatedAt = &ChatOrderField{
		Value: func(_m *Chat) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: chat.FieldUpdatedAt,
		toTerm: chat.ByUpdatedAt,
		toCursor: func(_m *Chat) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ChatOrderField) String() string {
	var str string
	switch f.column {
	case ChatOrderFieldTitle.column:
		str = "TITLE"
	case ChatOrderFieldAccepted.column:
		str = "ACCEPTED"
	case ChatOrderFieldLocked.column:
		str = "LOCKED"
	case ChatOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ChatOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ChatOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ChatOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ChatOrderField %T must be a string", v)
	}
	switch str {
	case "TITLE":
		*f = *ChatOrderFieldTitle
	case "ACCEPTED":
		*f = *ChatOrderFieldAccepted
	case "LOCKED":
		*f = *ChatOrderFieldLocked
	case "CREATED_AT":
		*f = *ChatOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ChatOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid ChatOrderField", str)
	}
	return nil
}

// ChatOrderField defines the ordering field of Chat.
type ChatOrderField struct {
	// Value extracts the ordering value from the given Chat.
	Value    func(*Chat) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) chat.OrderOption
	toCursor func(*Chat) Cursor
}

// ChatOrder defines the ordering of Chat.
type ChatOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *ChatOrderField `json:"field"`
}

// DefaultChatOrder is the default ordering of Chat.
var DefaultChatOrder = &ChatOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ChatOrderField{
		Value: func(_m *Chat) (ent.Value, error) {
			return _m.ID, nil
		},
		column: chat.FieldID,
		toTerm: chat.ByID,
		toCursor: func(_m *Chat) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Chat into ChatEdge.
func (_m *Chat) ToEdge(order *ChatOrder) *ChatEdge {
	if order == nil {
		order = DefaultChatOrder
	}
	return &ChatEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// CompanyEdge is the edge representation of Company.
type CompanyEdge struct {
	Node   *Company `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CompanyConnection is the connection containing edges to Company.
type CompanyConnection struct {
	Edges      []*CompanyEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *CompanyConnection) build(nodes []*Company, pager *companyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Company
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Company {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Company {
			return nodes[i]
		}
	}
	c.Edges = make([]*CompanyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CompanyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CompanyPaginateOption enables pagination customization.
type CompanyPaginateOption func(*companyPager) error

// WithCompanyOrder configures pagination ordering.
func WithCompanyOrder(order []*CompanyOrder) CompanyPaginateOption {
	return func(pager *companyPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithCompanyFilter configures pagination filter.
func WithCompanyFilter(filter func(*CompanyQuery) (*CompanyQuery, error)) CompanyPaginateOption {
	return func(pager *companyPager) error {
		if filter == nil {
			return errors.New("CompanyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type companyPager struct {
	reverse bool
	order   []*CompanyOrder
	filter  func(*CompanyQuery) (*CompanyQuery, error)
}

func newCompanyPager(opts []CompanyPaginateOption, reverse bool) (*companyPager, error) {
	pager := &companyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *companyPager) applyFilter(query *CompanyQuery) (*CompanyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *companyPager) toCursor(_m *Company) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *companyPager) applyCursors(query *CompanyQuery, after, before *Cursor) (*CompanyQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultCompanyOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *companyPager) applyOrder(query *CompanyQuery) *CompanyQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultCompanyOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultCompanyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *companyPager) orderExpr(query *CompanyQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultCompanyOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Company.
func (_m *CompanyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CompanyPaginateOption,
) (*CompanyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCompanyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &CompanyConnection{Edges: []*CompanyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CompanyOrderFieldName orders Company by name.
	CompanyOrderFieldName = &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.Name, nil
		},
		column: company.FieldName,
		toTerm: company.ByName,
		toCursor: func(_m *Company) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// CompanyOrderFieldCreatedAt orders Company by createdAt.
	CompanyOrderFieldCreatedAt = &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: company.FieldCreatedAt,
		toTerm: company.ByCreatedAt,
		toCursor: func(_m *Company) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// CompanyOrderFieldUpdatedAt orders Company by updatedAt.
	CompanyOrderFieldUpdatedAt = &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: company.FieldUpdatedAt,
		toTerm: company.ByUpdatedAt,
		toCursor: func(_m *Company) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CompanyOrderField) String() string {
	var str string
	switch f.column {
	case CompanyOrderFieldName.column:
		str = "NAME"
	case CompanyOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case CompanyOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CompanyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CompanyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CompanyOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *CompanyOrderFieldName
	case "CREATED_AT":
		*f = *CompanyOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *CompanyOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid CompanyOrderField", str)
	}
	return nil
}

// CompanyOrderField defines the ordering field of Company.
type CompanyOrderField struct {
	// Value extracts the ordering value from the given Company.
	Value    func(*Company) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) company.OrderOption
	toCursor func(*Company) Cursor
}

// CompanyOrder defines the ordering of Company.
type CompanyOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CompanyOrderField `json:"field"`
}

// DefaultCompanyOrder is the default ordering of Company.
var DefaultCompanyOrder = &CompanyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.ID, nil
		},
		column: company.FieldID,
		toTerm: company.ByID,
		toCursor: func(_m *Company) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Company into CompanyEdge.
func (_m *Company) ToEdge(order *CompanyOrder) *CompanyEdge {
	if order == nil {
		order = DefaultCompanyOrder
	}
	return &CompanyEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// CostumerEdge is the edge representation of Costumer.
type CostumerEdge struct {
	Node   *Costumer `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CostumerConnection is the connection containing edges to Costumer.
type CostumerConnection struct {
	Edges      []*CostumerEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CostumerConnection) build(nodes []*Costumer, pager *costumerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Costumer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Costumer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Costumer {
			return nodes[i]
		}
	}
	c.Edges = make([]*CostumerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CostumerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CostumerPaginateOption enables pagination customization.
type CostumerPaginateOption func(*costumerPager) error

// WithCostumerOrder configures pagination ordering.
func WithCostumerOrder(order []*CostumerOrder) CostumerPaginateOption {
	return func(pager *costumerPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithCostumerFilter configures pagination filter.
func WithCostumerFilter(filter func(*CostumerQuery) (*CostumerQuery, error)) CostumerPaginateOption {
	return func(pager *costumerPager) error {
		if filter == nil {
			return errors.New("CostumerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type costumerPager struct {
	reverse bool
	order   []*CostumerOrder
	filter  func(*CostumerQuery) (*CostumerQuery, error)
}

func newCostumerPager(opts []CostumerPaginateOption, reverse bool) (*costumerPager, error) {
	pager := &costumerPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *costumerPager) applyFilter(query *CostumerQuery) (*CostumerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *costumerPager) toCursor(_m *Costumer) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *costumerPager) applyCursors(query *CostumerQuery, after, before *Cursor) (*CostumerQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultCostumerOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *costumerPager) applyOrder(query *CostumerQuery) *CostumerQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultCostumerOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultCostumerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *costumerPager) orderExpr(query *CostumerQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultCostumerOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Costumer.
func (_m *CostumerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CostumerPaginateOption,
) (*CostumerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCostumerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &CostumerConnection{Edges: []*CostumerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CostumerOrderFieldName orders Costumer by name.
	CostumerOrderFieldName = &CostumerOrderField{
		Value: func(_m *Costumer) (ent.Value, error) {
			return _m.Name, nil
		},
		column: costumer.FieldName,
		toTerm: costumer.ByName,
		toCursor: func(_m *Costumer) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// CostumerOrderFieldPhone orders Costumer by phone.
	CostumerOrderFieldPhone = &CostumerOrderField{
		Value: func(_m *Costumer) (ent.Value, error) {
			return _m.Phone, nil
		},
		column: costumer.FieldPhone,
		toTerm: costumer.ByPhone,
		toCursor: func(_m *Costumer) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Phone,
			}
		},
	}
	// CostumerOrderFieldEmail orders Costumer by email.
	CostumerOrderFieldEmail = &CostumerOrderField{
		Value: func(_m *Costumer) (ent.Value, error) {
			return _m.Email, nil
		},
		column: costumer.FieldEmail,
		toTerm: costumer.ByEmail,
		toCursor: func(_m *Costumer) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Email,
			}
		},
	}
	// CostumerOrderFieldCreatedAt orders Costumer by createdAt.
	CostumerOrderFieldCreatedAt = &CostumerOrderField{
		Value: func(_m *Costumer) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: costumer.FieldCreatedAt,
		toTerm: costumer.ByCreatedAt,
		toCursor: func(_m *Costumer) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// CostumerOrderFieldUpdatedAt orders Costumer by updatedAt.
	CostumerOrderFieldUpdatedAt = &CostumerOrderField{
		Value: func(_m *Costumer) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: costumer.FieldUpdatedAt,
		toTerm: costumer.ByUpdatedAt,
		toCursor: func(_m *Costumer) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CostumerOrderField) String() string {
	var str string
	switch f.column {
	case CostumerOrderFieldName.column:
		str = "NAME"
	case CostumerOrderFieldPhone.column:
		str = "PHONE"
	case CostumerOrderFieldEmail.column:
		str = "EMAIL"
	case CostumerOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case CostumerOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CostumerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CostumerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CostumerOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *CostumerOrderFieldName
	case "PHONE":
		*f = *CostumerOrderFieldPhone
	case "EMAIL":
		*f = *CostumerOrderFieldEmail
	case "CREATED_AT":
		*f = *CostumerOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *CostumerOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid CostumerOrderField", str)
	}
	return nil
}

// CostumerOrderField defines the ordering field of Costumer.
type CostumerOrderField struct {
	// Value extracts the ordering value from the given Costumer.
	Value    func(*Costumer) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) costumer.OrderOption
	toCursor func(*Costumer) Cursor
}

// CostumerOrder defines the ordering of Costumer.
type CostumerOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CostumerOrderField `json:"field"`
}

// DefaultCostumerOrder is the default ordering of Costumer.
var DefaultCostumerOrder = &CostumerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CostumerOrderField{
		Value: func(_m *Costumer) (ent.Value, error) {
			return _m.ID, nil
		},
		column: costumer.FieldID,
		toTerm: costumer.ByID,
		toCursor: func(_m *Costumer) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Costumer into CostumerEdge.
func (_m *Costumer) ToEdge(order *CostumerOrder) *CostumerEdge {
	if order == nil {
		order = DefaultCostumerOrder
	}
	return &CostumerEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// CrmFieldEdge is the edge representation of CrmField.
type CrmFieldEdge struct {
	Node   *CrmField `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CrmFieldConnection is the connection containing edges to CrmField.
type CrmFieldConnection struct {
	Edges      []*CrmFieldEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CrmFieldConnection) build(nodes []*CrmField, pager *crmfieldPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CrmField
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CrmField {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CrmField {
			return nodes[i]
		}
	}
	c.Edges = make([]*CrmFieldEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CrmFieldEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CrmFieldPaginateOption enables pagination customization.
type CrmFieldPaginateOption func(*crmfieldPager) error

// WithCrmFieldOrder configures pagination ordering.
func WithCrmFieldOrder(order []*CrmFieldOrder) CrmFieldPaginateOption {
	return func(pager *crmfieldPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithCrmFieldFilter configures pagination filter.
func WithCrmFieldFilter(filter func(*CrmFieldQuery) (*CrmFieldQuery, error)) CrmFieldPaginateOption {
	return func(pager *crmfieldPager) error {
		if filter == nil {
			return errors.New("CrmFieldQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type crmfieldPager struct {
	reverse bool
	order   []*CrmFieldOrder
	filter  func(*CrmFieldQuery) (*CrmFieldQuery, error)
}

func newCrmFieldPager(opts []CrmFieldPaginateOption, reverse bool) (*crmfieldPager, error) {
	pager := &crmfieldPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *crmfieldPager) applyFilter(query *CrmFieldQuery) (*CrmFieldQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *crmfieldPager) toCursor(_m *CrmField) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *crmfieldPager) applyCursors(query *CrmFieldQuery, after, before *Cursor) (*CrmFieldQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultCrmFieldOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *crmfieldPager) applyOrder(query *CrmFieldQuery) *CrmFieldQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultCrmFieldOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultCrmFieldOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *crmfieldPager) orderExpr(query *CrmFieldQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultCrmFieldOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to CrmField.
func (_m *CrmFieldQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CrmFieldPaginateOption,
) (*CrmFieldConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCrmFieldPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &CrmFieldConnection{Edges: []*CrmFieldEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CrmFieldOrderFieldName orders CrmField by name.
	CrmFieldOrderFieldName = &CrmFieldOrderField{
		Value: func(_m *CrmField) (ent.Value, error) {
			return _m.Name, nil
		},
		column: crmfield.FieldName,
		toTerm: crmfield.ByName,
		toCursor: func(_m *CrmField) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// CrmFieldOrderFieldSection orders CrmField by section.
	CrmFieldOrderFieldSection = &CrmFieldOrderField{
		Value: func(_m *CrmField) (ent.Value, error) {
			return _m.Section, nil
		},
		column: crmfield.FieldSection,
		toTerm: crmfield.BySection,
		toCursor: func(_m *CrmField) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Section,
			}
		},
	}
	// CrmFieldOrderFieldType orders CrmField by type.
	CrmFieldOrderFieldType = &CrmFieldOrderField{
		Value: func(_m *CrmField) (ent.Value, error) {
			return _m.Type, nil
		},
		column: crmfield.FieldType,
		toTerm: crmfield.ByType,
		toCursor: func(_m *CrmField) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Type,
			}
		},
	}
	// CrmFieldOrderFieldCreatedAt orders CrmField by createdAt.
	CrmFieldOrderFieldCreatedAt = &CrmFieldOrderField{
		Value: func(_m *CrmField) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: crmfield.FieldCreatedAt,
		toTerm: crmfield.ByCreatedAt,
		toCursor: func(_m *CrmField) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// CrmFieldOrderFieldUpdatedAt orders CrmField by updatedAt.
	CrmFieldOrderFieldUpdatedAt = &CrmFieldOrderField{
		Value: func(_m *CrmField) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: crmfield.FieldUpdatedAt,
		toTerm: crmfield.ByUpdatedAt,
		toCursor: func(_m *CrmField) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CrmFieldOrderField) String() string {
	var str string
	switch f.column {
	case CrmFieldOrderFieldName.column:
		str = "NAME"
	case CrmFieldOrderFieldSection.column:
		str = "SECTION"
	case CrmFieldOrderFieldType.column:
		str = "TYPE"
	case CrmFieldOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case CrmFieldOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CrmFieldOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CrmFieldOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CrmFieldOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *CrmFieldOrderFieldName
	case "SECTION":
		*f = *CrmFieldOrderFieldSection
	case "TYPE":
		*f = *CrmFieldOrderFieldType
	case "CREATED_AT":
		*f = *CrmFieldOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *CrmFieldOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid CrmFieldOrderField", str)
	}
	return nil
}

// CrmFieldOrderField defines the ordering field of CrmField.
type CrmFieldOrderField struct {
	// Value extracts the ordering value from the given CrmField.
	Value    func(*CrmField) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) crmfield.OrderOption
	toCursor func(*CrmField) Cursor
}

// CrmFieldOrder defines the ordering of CrmField.
type CrmFieldOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CrmFieldOrderField `json:"field"`
}

// DefaultCrmFieldOrder is the default ordering of CrmField.
var DefaultCrmFieldOrder = &CrmFieldOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CrmFieldOrderField{
		Value: func(_m *CrmField) (ent.Value, error) {
			return _m.ID, nil
		},
		column: crmfield.FieldID,
		toTerm: crmfield.ByID,
		toCursor: func(_m *CrmField) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts CrmField into CrmFieldEdge.
func (_m *CrmField) ToEdge(order *CrmFieldOrder) *CrmFieldEdge {
	if order == nil {
		order = DefaultCrmFieldOrder
	}
	return &CrmFieldEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// DealEdge is the edge representation of Deal.
type DealEdge struct {
	Node   *Deal  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// DealConnection is the connection containing edges to Deal.
type DealConnection struct {
	Edges      []*DealEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *DealConnection) build(nodes []*Deal, pager *dealPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Deal
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Deal {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Deal {
			return nodes[i]
		}
	}
	c.Edges = make([]*DealEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DealEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DealPaginateOption enables pagination customization.
type DealPaginateOption func(*dealPager) error

// WithDealOrder configures pagination ordering.
func WithDealOrder(order []*DealOrder) DealPaginateOption {
	return func(pager *dealPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithDealFilter configures pagination filter.
func WithDealFilter(filter func(*DealQuery) (*DealQuery, error)) DealPaginateOption {
	return func(pager *dealPager) error {
		if filter == nil {
			return errors.New("DealQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dealPager struct {
	reverse bool
	order   []*DealOrder
	filter  func(*DealQuery) (*DealQuery, error)
}

func newDealPager(opts []DealPaginateOption, reverse bool) (*dealPager, error) {
	pager := &dealPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *dealPager) applyFilter(query *DealQuery) (*DealQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dealPager) toCursor(_m *Deal) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *dealPager) applyCursors(query *DealQuery, after, before *Cursor) (*DealQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultDealOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *dealPager) applyOrder(query *DealQuery) *DealQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultDealOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultDealOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *dealPager) orderExpr(query *DealQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultDealOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Deal.
func (_m *DealQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DealPaginateOption,
) (*DealConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDealPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &DealConnection{Edges: []*DealEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DealOrderFieldTitle orders Deal by title.
	DealOrderFieldTitle = &DealOrderField{
		Value: func(_m *Deal) (ent.Value, error) {
			return _m.Title, nil
		},
		column: deal.FieldTitle,
		toTerm: deal.ByTitle,
		toCursor: func(_m *Deal) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Title,
			}
		},
	}
	// DealOrderFieldSource orders Deal by source.
	DealOrderFieldSource = &DealOrderField{
		Value: func(_m *Deal) (ent.Value, error) {
			return _m.Source, nil
		},
		column: deal.FieldSource,
		toTerm: deal.BySource,
		toCursor: func(_m *Deal) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Source,
			}
		},
	}
	// DealOrderFieldCreatedAt orders Deal by createdAt.
	DealOrderFieldCreatedAt = &DealOrderField{
		Value: func(_m *Deal) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: deal.FieldCreatedAt,
		toTerm: deal.ByCreatedAt,
		toCursor: func(_m *Deal) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// DealOrderFieldUpdatedAt orders Deal by updatedAt.
	DealOrderFieldUpdatedAt = &DealOrderField{
		Value: func(_m *Deal) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: deal.FieldUpdatedAt,
		toTerm: deal.ByUpdatedAt,
		toCursor: func(_m *Deal) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DealOrderField) String() string {
	var str string
	switch f.column {
	case DealOrderFieldTitle.column:
		str = "TITLE"
	case DealOrderFieldSource.column:
		str = "SOURCE"
	case DealOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case DealOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DealOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DealOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DealOrderField %T must be a string", v)
	}
	switch str {
	case "TITLE":
		*f = *DealOrderFieldTitle
	case "SOURCE":
		*f = *DealOrderFieldSource
	case "CREATED_AT":
		*f = *DealOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *DealOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid DealOrderField", str)
	}
	return nil
}

// DealOrderField defines the ordering field of Deal.
type DealOrderField struct {
	// Value extracts the ordering value from the given Deal.
	Value    func(*Deal) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) deal.OrderOption
	toCursor func(*Deal) Cursor
}

// DealOrder defines the ordering of Deal.
type DealOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *DealOrderField `json:"field"`
}

// DefaultDealOrder is the default ordering of Deal.
var DefaultDealOrder = &DealOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DealOrderField{
		Value: func(_m *Deal) (ent.Value, error) {
			return _m.ID, nil
		},
		column: deal.FieldID,
		toTerm: deal.ByID,
		toCursor: func(_m *Deal) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Deal into DealEdge.
func (_m *Deal) ToEdge(order *DealOrder) *DealEdge {
	if order == nil {
		order = DefaultDealOrder
	}
	return &DealEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// DealCrmFieldEdge is the edge representation of DealCrmField.
type DealCrmFieldEdge struct {
	Node   *DealCrmField `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// DealCrmFieldConnection is the connection containing edges to DealCrmField.
type DealCrmFieldConnection struct {
	Edges      []*DealCrmFieldEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *DealCrmFieldConnection) build(nodes []*DealCrmField, pager *dealcrmfieldPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DealCrmField
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DealCrmField {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DealCrmField {
			return nodes[i]
		}
	}
	c.Edges = make([]*DealCrmFieldEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DealCrmFieldEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DealCrmFieldPaginateOption enables pagination customization.
type DealCrmFieldPaginateOption func(*dealcrmfieldPager) error

// WithDealCrmFieldOrder configures pagination ordering.
func WithDealCrmFieldOrder(order []*DealCrmFieldOrder) DealCrmFieldPaginateOption {
	return func(pager *dealcrmfieldPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithDealCrmFieldFilter configures pagination filter.
func WithDealCrmFieldFilter(filter func(*DealCrmFieldQuery) (*DealCrmFieldQuery, error)) DealCrmFieldPaginateOption {
	return func(pager *dealcrmfieldPager) error {
		if filter == nil {
			return errors.New("DealCrmFieldQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dealcrmfieldPager struct {
	reverse bool
	order   []*DealCrmFieldOrder
	filter  func(*DealCrmFieldQuery) (*DealCrmFieldQuery, error)
}

func newDealCrmFieldPager(opts []DealCrmFieldPaginateOption, reverse bool) (*dealcrmfieldPager, error) {
	pager := &dealcrmfieldPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *dealcrmfieldPager) applyFilter(query *DealCrmFieldQuery) (*DealCrmFieldQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dealcrmfieldPager) toCursor(_m *DealCrmField) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *dealcrmfieldPager) applyCursors(query *DealCrmFieldQuery, after, before *Cursor) (*DealCrmFieldQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultDealCrmFieldOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *dealcrmfieldPager) applyOrder(query *DealCrmFieldQuery) *DealCrmFieldQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultDealCrmFieldOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultDealCrmFieldOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *dealcrmfieldPager) orderExpr(query *DealCrmFieldQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultDealCrmFieldOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to DealCrmField.
func (_m *DealCrmFieldQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DealCrmFieldPaginateOption,
) (*DealCrmFieldConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDealCrmFieldPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &DealCrmFieldConnection{Edges: []*DealCrmFieldEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DealCrmFieldOrderFieldValue orders DealCrmField by value.
	DealCrmFieldOrderFieldValue = &DealCrmFieldOrderField{
		Value: func(_m *DealCrmField) (ent.Value, error) {
			return _m.Value, nil
		},
		column: dealcrmfield.FieldValue,
		toTerm: dealcrmfield.ByValue,
		toCursor: func(_m *DealCrmField) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Value,
			}
		},
	}
	// DealCrmFieldOrderFieldCreatedAt orders DealCrmField by createdAt.
	DealCrmFieldOrderFieldCreatedAt = &DealCrmFieldOrderField{
		Value: func(_m *DealCrmField) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: dealcrmfield.FieldCreatedAt,
		toTerm: dealcrmfield.ByCreatedAt,
		toCursor: func(_m *DealCrmField) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// DealCrmFieldOrderFieldUpdatedAt orders DealCrmField by updatedAt.
	DealCrmFieldOrderFieldUpdatedAt = &DealCrmFieldOrderField{
		Value: func(_m *DealCrmField) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: dealcrmfield.FieldUpdatedAt,
		toTerm: dealcrmfield.ByUpdatedAt,
		toCursor: func(_m *DealCrmField) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DealCrmFieldOrderField) String() string {
	var str string
	switch f.column {
	case DealCrmFieldOrderFieldValue.column:
		str = "VALUE"
	case DealCrmFieldOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case DealCrmFieldOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DealCrmFieldOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DealCrmFieldOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DealCrmFieldOrderField %T must be a string", v)
	}
	switch str {
	case "VALUE":
		*f = *DealCrmFieldOrderFieldValue
	case "CREATED_AT":
		*f = *DealCrmFieldOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *DealCrmFieldOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid DealCrmFieldOrderField", str)
	}
	return nil
}

// DealCrmFieldOrderField defines the ordering field of DealCrmField.
type DealCrmFieldOrderField struct {
	// Value extracts the ordering value from the given DealCrmField.
	Value    func(*DealCrmField) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) dealcrmfield.OrderOption
	toCursor func(*DealCrmField) Cursor
}

// DealCrmFieldOrder defines the ordering of DealCrmField.
type DealCrmFieldOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *DealCrmFieldOrderField `json:"field"`
}

// DefaultDealCrmFieldOrder is the default ordering of DealCrmField.
var DefaultDealCrmFieldOrder = &DealCrmFieldOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DealCrmFieldOrderField{
		Value: func(_m *DealCrmField) (ent.Value, error) {
			return _m.ID, nil
		},
		column: dealcrmfield.FieldID,
		toTerm: dealcrmfield.ByID,
		toCursor: func(_m *DealCrmField) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts DealCrmField into DealCrmFieldEdge.
func (_m *DealCrmField) ToEdge(order *DealCrmFieldOrder) *DealCrmFieldEdge {
	if order == nil {
		order = DefaultDealCrmFieldOrder
	}
	return &DealCrmFieldEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// DepartmentEdge is the edge representation of Department.
type DepartmentEdge struct {
	Node   *Department `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// DepartmentConnection is the connection containing edges to Department.
type DepartmentConnection struct {
	Edges      []*DepartmentEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *DepartmentConnection) build(nodes []*Department, pager *departmentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Department
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Department {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Department {
			return nodes[i]
		}
	}
	c.Edges = make([]*DepartmentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DepartmentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DepartmentPaginateOption enables pagination customization.
type DepartmentPaginateOption func(*departmentPager) error

// WithDepartmentOrder configures pagination ordering.
func WithDepartmentOrder(order []*DepartmentOrder) DepartmentPaginateOption {
	return func(pager *departmentPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithDepartmentFilter configures pagination filter.
func WithDepartmentFilter(filter func(*DepartmentQuery) (*DepartmentQuery, error)) DepartmentPaginateOption {
	return func(pager *departmentPager) error {
		if filter == nil {
			return errors.New("DepartmentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type departmentPager struct {
	reverse bool
	order   []*DepartmentOrder
	filter  func(*DepartmentQuery) (*DepartmentQuery, error)
}

func newDepartmentPager(opts []DepartmentPaginateOption, reverse bool) (*departmentPager, error) {
	pager := &departmentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *departmentPager) applyFilter(query *DepartmentQuery) (*DepartmentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *departmentPager) toCursor(_m *Department) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *departmentPager) applyCursors(query *DepartmentQuery, after, before *Cursor) (*DepartmentQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultDepartmentOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *departmentPager) applyOrder(query *DepartmentQuery) *DepartmentQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultDepartmentOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultDepartmentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *departmentPager) orderExpr(query *DepartmentQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultDepartmentOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Department.
func (_m *DepartmentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DepartmentPaginateOption,
) (*DepartmentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDepartmentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &DepartmentConnection{Edges: []*DepartmentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DepartmentOrderFieldName orders Department by name.
	DepartmentOrderFieldName = &DepartmentOrderField{
		Value: func(_m *Department) (ent.Value, error) {
			return _m.Name, nil
		},
		column: department.FieldName,
		toTerm: department.ByName,
		toCursor: func(_m *Department) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// DepartmentOrderFieldCreatedAt orders Department by createdAt.
	DepartmentOrderFieldCreatedAt = &DepartmentOrderField{
		Value: func(_m *Department) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: department.FieldCreatedAt,
		toTerm: department.ByCreatedAt,
		toCursor: func(_m *Department) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// DepartmentOrderFieldUpdatedAt orders Department by updatedAt.
	DepartmentOrderFieldUpdatedAt = &DepartmentOrderField{
		Value: func(_m *Department) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: department.FieldUpdatedAt,
		toTerm: department.ByUpdatedAt,
		toCursor: func(_m *Department) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DepartmentOrderField) String() string {
	var str string
	switch f.column {
	case DepartmentOrderFieldName.column:
		str = "NAME"
	case DepartmentOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case DepartmentOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DepartmentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DepartmentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DepartmentOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *DepartmentOrderFieldName
	case "CREATED_AT":
		*f = *DepartmentOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *DepartmentOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid DepartmentOrderField", str)
	}
	return nil
}

// DepartmentOrderField defines the ordering field of Department.
type DepartmentOrderField struct {
	// Value extracts the ordering value from the given Department.
	Value    func(*Department) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) department.OrderOption
	toCursor func(*Department) Cursor
}

// DepartmentOrder defines the ordering of Department.
type DepartmentOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *DepartmentOrderField `json:"field"`
}

// DefaultDepartmentOrder is the default ordering of Department.
var DefaultDepartmentOrder = &DepartmentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DepartmentOrderField{
		Value: func(_m *Department) (ent.Value, error) {
			return _m.ID, nil
		},
		column: department.FieldID,
		toTerm: department.ByID,
		toCursor: func(_m *Department) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Department into DepartmentEdge.
func (_m *Department) ToEdge(order *DepartmentOrder) *DepartmentEdge {
	if order == nil {
		order = DefaultDepartmentOrder
	}
	return &DepartmentEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// DropdownListEdge is the edge representation of DropdownList.
type DropdownListEdge struct {
	Node   *DropdownList `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// DropdownListConnection is the connection containing edges to DropdownList.
type DropdownListConnection struct {
	Edges      []*DropdownListEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *DropdownListConnection) build(nodes []*DropdownList, pager *dropdownlistPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DropdownList
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DropdownList {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DropdownList {
			return nodes[i]
		}
	}
	c.Edges = make([]*DropdownListEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DropdownListEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DropdownListPaginateOption enables pagination customization.
type DropdownListPaginateOption func(*dropdownlistPager) error

// WithDropdownListOrder configures pagination ordering.
func WithDropdownListOrder(order []*DropdownListOrder) DropdownListPaginateOption {
	return func(pager *dropdownlistPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithDropdownListFilter configures pagination filter.
func WithDropdownListFilter(filter func(*DropdownListQuery) (*DropdownListQuery, error)) DropdownListPaginateOption {
	return func(pager *dropdownlistPager) error {
		if filter == nil {
			return errors.New("DropdownListQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dropdownlistPager struct {
	reverse bool
	order   []*DropdownListOrder
	filter  func(*DropdownListQuery) (*DropdownListQuery, error)
}

func newDropdownListPager(opts []DropdownListPaginateOption, reverse bool) (*dropdownlistPager, error) {
	pager := &dropdownlistPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *dropdownlistPager) applyFilter(query *DropdownListQuery) (*DropdownListQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dropdownlistPager) toCursor(_m *DropdownList) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *dropdownlistPager) applyCursors(query *DropdownListQuery, after, before *Cursor) (*DropdownListQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultDropdownListOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *dropdownlistPager) applyOrder(query *DropdownListQuery) *DropdownListQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultDropdownListOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultDropdownListOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *dropdownlistPager) orderExpr(query *DropdownListQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultDropdownListOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to DropdownList.
func (_m *DropdownListQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DropdownListPaginateOption,
) (*DropdownListConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDropdownListPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &DropdownListConnection{Edges: []*DropdownListEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DropdownListOrderFieldValue orders DropdownList by value.
	DropdownListOrderFieldValue = &DropdownListOrderField{
		Value: func(_m *DropdownList) (ent.Value, error) {
			return _m.Value, nil
		},
		column: dropdownlist.FieldValue,
		toTerm: dropdownlist.ByValue,
		toCursor: func(_m *DropdownList) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Value,
			}
		},
	}
	// DropdownListOrderFieldCreatedAt orders DropdownList by createdAt.
	DropdownListOrderFieldCreatedAt = &DropdownListOrderField{
		Value: func(_m *DropdownList) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: dropdownlist.FieldCreatedAt,
		toTerm: dropdownlist.ByCreatedAt,
		toCursor: func(_m *DropdownList) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// DropdownListOrderFieldUpdatedAt orders DropdownList by updatedAt.
	DropdownListOrderFieldUpdatedAt = &DropdownListOrderField{
		Value: func(_m *DropdownList) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: dropdownlist.FieldUpdatedAt,
		toTerm: dropdownlist.ByUpdatedAt,
		toCursor: func(_m *DropdownList) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DropdownListOrderField) String() string {
	var str string
	switch f.column {
	case DropdownListOrderFieldValue.column:
		str = "VALUE"
	case DropdownListOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case DropdownListOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DropdownListOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DropdownListOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DropdownListOrderField %T must be a string", v)
	}
	switch str {
	case "VALUE":
		*f = *DropdownListOrderFieldValue
	case "CREATED_AT":
		*f = *DropdownListOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *DropdownListOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid DropdownListOrderField", str)
	}
	return nil
}

// DropdownListOrderField defines the ordering field of DropdownList.
type DropdownListOrderField struct {
	// Value extracts the ordering value from the given DropdownList.
	Value    func(*DropdownList) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) dropdownlist.OrderOption
	toCursor func(*DropdownList) Cursor
}

// DropdownListOrder defines the ordering of DropdownList.
type DropdownListOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *DropdownListOrderField `json:"field"`
}

// DefaultDropdownListOrder is the default ordering of DropdownList.
var DefaultDropdownListOrder = &DropdownListOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DropdownListOrderField{
		Value: func(_m *DropdownList) (ent.Value, error) {
			return _m.ID, nil
		},
		column: dropdownlist.FieldID,
		toTerm: dropdownlist.ByID,
		toCursor: func(_m *DropdownList) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts DropdownList into DropdownListEdge.
func (_m *DropdownList) ToEdge(order *DropdownListOrder) *DropdownListEdge {
	if order == nil {
		order = DefaultDropdownListOrder
	}
	return &DropdownListEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// EmployeeEdge is the edge representation of Employee.
type EmployeeEdge struct {
	Node   *Employee `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// EmployeeConnection is the connection containing edges to Employee.
type EmployeeConnection struct {
	Edges      []*EmployeeEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *EmployeeConnection) build(nodes []*Employee, pager *employeePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Employee
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Employee {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Employee {
			return nodes[i]
		}
	}
	c.Edges = make([]*EmployeeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EmployeeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EmployeePaginateOption enables pagination customization.
type EmployeePaginateOption func(*employeePager) error

// WithEmployeeOrder configures pagination ordering.
func WithEmployeeOrder(order []*EmployeeOrder) EmployeePaginateOption {
	return func(pager *employeePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithEmployeeFilter configures pagination filter.
func WithEmployeeFilter(filter func(*EmployeeQuery) (*EmployeeQuery, error)) EmployeePaginateOption {
	return func(pager *employeePager) error {
		if filter == nil {
			return errors.New("EmployeeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type employeePager struct {
	reverse bool
	order   []*EmployeeOrder
	filter  func(*EmployeeQuery) (*EmployeeQuery, error)
}

func newEmployeePager(opts []EmployeePaginateOption, reverse bool) (*employeePager, error) {
	pager := &employeePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *employeePager) applyFilter(query *EmployeeQuery) (*EmployeeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *employeePager) toCursor(_m *Employee) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *employeePager) applyCursors(query *EmployeeQuery, after, before *Cursor) (*EmployeeQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultEmployeeOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *employeePager) applyOrder(query *EmployeeQuery) *EmployeeQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultEmployeeOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultEmployeeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *employeePager) orderExpr(query *EmployeeQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultEmployeeOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Employee.
func (_m *EmployeeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EmployeePaginateOption,
) (*EmployeeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEmployeePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &EmployeeConnection{Edges: []*EmployeeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// EmployeeOrderFieldName orders Employee by name.
	EmployeeOrderFieldName = &EmployeeOrderField{
		Value: func(_m *Employee) (ent.Value, error) {
			return _m.Name, nil
		},
		column: employee.FieldName,
		toTerm: employee.ByName,
		toCursor: func(_m *Employee) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// EmployeeOrderFieldActive orders Employee by active.
	EmployeeOrderFieldActive = &EmployeeOrderField{
		Value: func(_m *Employee) (ent.Value, error) {
			return _m.Active, nil
		},
		column: employee.FieldActive,
		toTerm: employee.ByActive,
		toCursor: func(_m *Employee) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Active,
			}
		},
	}
	// EmployeeOrderFieldCreatedAt orders Employee by createdAt.
	EmployeeOrderFieldCreatedAt = &EmployeeOrderField{
		Value: func(_m *Employee) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: employee.FieldCreatedAt,
		toTerm: employee.ByCreatedAt,
		toCursor: func(_m *Employee) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// EmployeeOrderFieldUpdatedAt orders Employee by updatedAt.
	EmployeeOrderFieldUpdatedAt = &EmployeeOrderField{
		Value: func(_m *Employee) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: employee.FieldUpdatedAt,
		toTerm: employee.ByUpdatedAt,
		toCursor: func(_m *Employee) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f EmployeeOrderField) String() string {
	var str string
	switch f.column {
	case EmployeeOrderFieldName.column:
		str = "NAME"
	case EmployeeOrderFieldActive.column:
		str = "ACTIVE"
	case EmployeeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case EmployeeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f EmployeeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *EmployeeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("EmployeeOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *EmployeeOrderFieldName
	case "ACTIVE":
		*f = *EmployeeOrderFieldActive
	case "CREATED_AT":
		*f = *EmployeeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *EmployeeOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid EmployeeOrderField", str)
	}
	return nil
}

// EmployeeOrderField defines the ordering field of Employee.
type EmployeeOrderField struct {
	// Value extracts the ordering value from the given Employee.
	Value    func(*Employee) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) employee.OrderOption
	toCursor func(*Employee) Cursor
}

// EmployeeOrder defines the ordering of Employee.
type EmployeeOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *EmployeeOrderField `json:"field"`
}

// DefaultEmployeeOrder is the default ordering of Employee.
var DefaultEmployeeOrder = &EmployeeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &EmployeeOrderField{
		Value: func(_m *Employee) (ent.Value, error) {
			return _m.ID, nil
		},
		column: employee.FieldID,
		toTerm: employee.ByID,
		toCursor: func(_m *Employee) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Employee into EmployeeEdge.
func (_m *Employee) ToEdge(order *EmployeeOrder) *EmployeeEdge {
	if order == nil {
		order = DefaultEmployeeOrder
	}
	return &EmployeeEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// EmployeeAuthEdge is the edge representation of EmployeeAuth.
type EmployeeAuthEdge struct {
	Node   *EmployeeAuth `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// EmployeeAuthConnection is the connection containing edges to EmployeeAuth.
type EmployeeAuthConnection struct {
	Edges      []*EmployeeAuthEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *EmployeeAuthConnection) build(nodes []*EmployeeAuth, pager *employeeauthPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *EmployeeAuth
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *EmployeeAuth {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *EmployeeAuth {
			return nodes[i]
		}
	}
	c.Edges = make([]*EmployeeAuthEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EmployeeAuthEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EmployeeAuthPaginateOption enables pagination customization.
type EmployeeAuthPaginateOption func(*employeeauthPager) error

// WithEmployeeAuthOrder configures pagination ordering.
func WithEmployeeAuthOrder(order []*EmployeeAuthOrder) EmployeeAuthPaginateOption {
	return func(pager *employeeauthPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithEmployeeAuthFilter configures pagination filter.
func WithEmployeeAuthFilter(filter func(*EmployeeAuthQuery) (*EmployeeAuthQuery, error)) EmployeeAuthPaginateOption {
	return func(pager *employeeauthPager) error {
		if filter == nil {
			return errors.New("EmployeeAuthQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type employeeauthPager struct {
	reverse bool
	order   []*EmployeeAuthOrder
	filter  func(*EmployeeAuthQuery) (*EmployeeAuthQuery, error)
}

func newEmployeeAuthPager(opts []EmployeeAuthPaginateOption, reverse bool) (*employeeauthPager, error) {
	pager := &employeeauthPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *employeeauthPager) applyFilter(query *EmployeeAuthQuery) (*EmployeeAuthQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *employeeauthPager) toCursor(_m *EmployeeAuth) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *employeeauthPager) applyCursors(query *EmployeeAuthQuery, after, before *Cursor) (*EmployeeAuthQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultEmployeeAuthOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *employeeauthPager) applyOrder(query *EmployeeAuthQuery) *EmployeeAuthQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultEmployeeAuthOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultEmployeeAuthOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *employeeauthPager) orderExpr(query *EmployeeAuthQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultEmployeeAuthOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to EmployeeAuth.
func (_m *EmployeeAuthQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EmployeeAuthPaginateOption,
) (*EmployeeAuthConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEmployeeAuthPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &EmployeeAuthConnection{Edges: []*EmployeeAuthEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// EmployeeAuthOrderFieldCreatedAt orders EmployeeAuth by createdAt.
	EmployeeAuthOrderFieldCreatedAt = &EmployeeAuthOrderField{
		Value: func(_m *EmployeeAuth) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: employeeauth.FieldCreatedAt,
		toTerm: employeeauth.ByCreatedAt,
		toCursor: func(_m *EmployeeAuth) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// EmployeeAuthOrderFieldUpdatedAt orders EmployeeAuth by updatedAt.
	EmployeeAuthOrderFieldUpdatedAt = &EmployeeAuthOrderField{
		Value: func(_m *EmployeeAuth) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: employeeauth.FieldUpdatedAt,
		toTerm: employeeauth.ByUpdatedAt,
		toCursor: func(_m *EmployeeAuth) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f EmployeeAuthOrderField) String() string {
	var str string
	switch f.column {
	case EmployeeAuthOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case EmployeeAuthOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f EmployeeAuthOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *EmployeeAuthOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("EmployeeAuthOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *EmployeeAuthOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *EmployeeAuthOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid EmployeeAuthOrderField", str)
	}
	return nil
}

// EmployeeAuthOrderField defines the ordering field of EmployeeAuth.
type EmployeeAuthOrderField struct {
	// Value extracts the ordering value from the given EmployeeAuth.
	Value    func(*EmployeeAuth) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) employeeauth.OrderOption
	toCursor func(*EmployeeAuth) Cursor
}

// EmployeeAuthOrder defines the ordering of EmployeeAuth.
type EmployeeAuthOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *EmployeeAuthOrderField `json:"field"`
}

// DefaultEmployeeAuthOrder is the default ordering of EmployeeAuth.
var DefaultEmployeeAuthOrder = &EmployeeAuthOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &EmployeeAuthOrderField{
		Value: func(_m *EmployeeAuth) (ent.Value, error) {
			return _m.ID, nil
		},
		column: employeeauth.FieldID,
		toTerm: employeeauth.ByID,
		toCursor: func(_m *EmployeeAuth) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts EmployeeAuth into EmployeeAuthEdge.
func (_m *EmployeeAuth) ToEdge(order *EmployeeAuthOrder) *EmployeeAuthEdge {
	if order == nil {
		order = DefaultEmployeeAuthOrder
	}
	return &EmployeeAuthEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// FileEdge is the edge representation of File.
type FileEdge struct {
	Node   *File  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// FileConnection is the connection containing edges to File.
type FileConnection struct {
	Edges      []*FileEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *FileConnection) build(nodes []*File, pager *filePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *File
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *File {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *File {
			return nodes[i]
		}
	}
	c.Edges = make([]*FileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FilePaginateOption enables pagination customization.
type FilePaginateOption func(*filePager) error

// WithFileOrder configures pagination ordering.
func WithFileOrder(order *FileOrder) FilePaginateOption {
	if order == nil {
		order = DefaultFileOrder
	}
	o := *order
	return func(pager *filePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFileFilter configures pagination filter.
func WithFileFilter(filter func(*FileQuery) (*FileQuery, error)) FilePaginateOption {
	return func(pager *filePager) error {
		if filter == nil {
			return errors.New("FileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type filePager struct {
	reverse bool
	order   *FileOrder
	filter  func(*FileQuery) (*FileQuery, error)
}

func newFilePager(opts []FilePaginateOption, reverse bool) (*filePager, error) {
	pager := &filePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFileOrder
	}
	return pager, nil
}

func (p *filePager) applyFilter(query *FileQuery) (*FileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *filePager) toCursor(_m *File) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *filePager) applyCursors(query *FileQuery, after, before *Cursor) (*FileQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFileOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *filePager) applyOrder(query *FileQuery) *FileQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFileOrder.Field {
		query = query.Order(DefaultFileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *filePager) orderExpr(query *FileQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFileOrder.Field {
			b.Comma().Ident(DefaultFileOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to File.
func (_m *FileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FilePaginateOption,
) (*FileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &FileConnection{Edges: []*FileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FileOrderFieldURL orders File by url.
	FileOrderFieldURL = &FileOrderField{
		Value: func(_m *File) (ent.Value, error) {
			return _m.URL, nil
		},
		column: file.FieldURL,
		toTerm: file.ByURL,
		toCursor: func(_m *File) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.URL,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FileOrderField) String() string {
	var str string
	switch f.column {
	case FileOrderFieldURL.column:
		str = "URL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FileOrderField %T must be a string", v)
	}
	switch str {
	case "URL":
		*f = *FileOrderFieldURL
	default:
		return fmt.Errorf("%s is not a valid FileOrderField", str)
	}
	return nil
}

// FileOrderField defines the ordering field of File.
type FileOrderField struct {
	// Value extracts the ordering value from the given File.
	Value    func(*File) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) file.OrderOption
	toCursor func(*File) Cursor
}

// FileOrder defines the ordering of File.
type FileOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *FileOrderField `json:"field"`
}

// DefaultFileOrder is the default ordering of File.
var DefaultFileOrder = &FileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FileOrderField{
		Value: func(_m *File) (ent.Value, error) {
			return _m.ID, nil
		},
		column: file.FieldID,
		toTerm: file.ByID,
		toCursor: func(_m *File) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts File into FileEdge.
func (_m *File) ToEdge(order *FileOrder) *FileEdge {
	if order == nil {
		order = DefaultFileOrder
	}
	return &FileEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// MessageEdge is the edge representation of Message.
type MessageEdge struct {
	Node   *Message `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// MessageConnection is the connection containing edges to Message.
type MessageConnection struct {
	Edges      []*MessageEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *MessageConnection) build(nodes []*Message, pager *messagePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Message
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Message {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Message {
			return nodes[i]
		}
	}
	c.Edges = make([]*MessageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MessageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MessagePaginateOption enables pagination customization.
type MessagePaginateOption func(*messagePager) error

// WithMessageOrder configures pagination ordering.
func WithMessageOrder(order []*MessageOrder) MessagePaginateOption {
	return func(pager *messagePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithMessageFilter configures pagination filter.
func WithMessageFilter(filter func(*MessageQuery) (*MessageQuery, error)) MessagePaginateOption {
	return func(pager *messagePager) error {
		if filter == nil {
			return errors.New("MessageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type messagePager struct {
	reverse bool
	order   []*MessageOrder
	filter  func(*MessageQuery) (*MessageQuery, error)
}

func newMessagePager(opts []MessagePaginateOption, reverse bool) (*messagePager, error) {
	pager := &messagePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *messagePager) applyFilter(query *MessageQuery) (*MessageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *messagePager) toCursor(_m *Message) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *messagePager) applyCursors(query *MessageQuery, after, before *Cursor) (*MessageQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultMessageOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *messagePager) applyOrder(query *MessageQuery) *MessageQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultMessageOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultMessageOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *messagePager) orderExpr(query *MessageQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultMessageOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Message.
func (_m *MessageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MessagePaginateOption,
) (*MessageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMessagePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &MessageConnection{Edges: []*MessageEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MessageOrderFieldSentBy orders Message by sentBy.
	MessageOrderFieldSentBy = &MessageOrderField{
		Value: func(_m *Message) (ent.Value, error) {
			return _m.SentBy, nil
		},
		column: message.FieldSentBy,
		toTerm: message.BySentBy,
		toCursor: func(_m *Message) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.SentBy,
			}
		},
	}
	// MessageOrderFieldPrivate orders Message by private.
	MessageOrderFieldPrivate = &MessageOrderField{
		Value: func(_m *Message) (ent.Value, error) {
			return _m.Private, nil
		},
		column: message.FieldPrivate,
		toTerm: message.ByPrivate,
		toCursor: func(_m *Message) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Private,
			}
		},
	}
	// MessageOrderFieldType orders Message by type.
	MessageOrderFieldType = &MessageOrderField{
		Value: func(_m *Message) (ent.Value, error) {
			return _m.Type, nil
		},
		column: message.FieldType,
		toTerm: message.ByType,
		toCursor: func(_m *Message) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Type,
			}
		},
	}
	// MessageOrderFieldCreatedAt orders Message by createdAt.
	MessageOrderFieldCreatedAt = &MessageOrderField{
		Value: func(_m *Message) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: message.FieldCreatedAt,
		toTerm: message.ByCreatedAt,
		toCursor: func(_m *Message) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// MessageOrderFieldUpdatedAt orders Message by updatedAt.
	MessageOrderFieldUpdatedAt = &MessageOrderField{
		Value: func(_m *Message) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: message.FieldUpdatedAt,
		toTerm: message.ByUpdatedAt,
		toCursor: func(_m *Message) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MessageOrderField) String() string {
	var str string
	switch f.column {
	case MessageOrderFieldSentBy.column:
		str = "SENT_BY"
	case MessageOrderFieldPrivate.column:
		str = "PRIVATE"
	case MessageOrderFieldType.column:
		str = "TYPE"
	case MessageOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case MessageOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MessageOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MessageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MessageOrderField %T must be a string", v)
	}
	switch str {
	case "SENT_BY":
		*f = *MessageOrderFieldSentBy
	case "PRIVATE":
		*f = *MessageOrderFieldPrivate
	case "TYPE":
		*f = *MessageOrderFieldType
	case "CREATED_AT":
		*f = *MessageOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *MessageOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid MessageOrderField", str)
	}
	return nil
}

// MessageOrderField defines the ordering field of Message.
type MessageOrderField struct {
	// Value extracts the ordering value from the given Message.
	Value    func(*Message) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) message.OrderOption
	toCursor func(*Message) Cursor
}

// MessageOrder defines the ordering of Message.
type MessageOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *MessageOrderField `json:"field"`
}

// DefaultMessageOrder is the default ordering of Message.
var DefaultMessageOrder = &MessageOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MessageOrderField{
		Value: func(_m *Message) (ent.Value, error) {
			return _m.ID, nil
		},
		column: message.FieldID,
		toTerm: message.ByID,
		toCursor: func(_m *Message) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Message into MessageEdge.
func (_m *Message) ToEdge(order *MessageOrder) *MessageEdge {
	if order == nil {
		order = DefaultMessageOrder
	}
	return &MessageEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// PipelineEdge is the edge representation of Pipeline.
type PipelineEdge struct {
	Node   *Pipeline `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// PipelineConnection is the connection containing edges to Pipeline.
type PipelineConnection struct {
	Edges      []*PipelineEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *PipelineConnection) build(nodes []*Pipeline, pager *pipelinePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Pipeline
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Pipeline {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Pipeline {
			return nodes[i]
		}
	}
	c.Edges = make([]*PipelineEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PipelineEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PipelinePaginateOption enables pagination customization.
type PipelinePaginateOption func(*pipelinePager) error

// WithPipelineOrder configures pagination ordering.
func WithPipelineOrder(order []*PipelineOrder) PipelinePaginateOption {
	return func(pager *pipelinePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithPipelineFilter configures pagination filter.
func WithPipelineFilter(filter func(*PipelineQuery) (*PipelineQuery, error)) PipelinePaginateOption {
	return func(pager *pipelinePager) error {
		if filter == nil {
			return errors.New("PipelineQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type pipelinePager struct {
	reverse bool
	order   []*PipelineOrder
	filter  func(*PipelineQuery) (*PipelineQuery, error)
}

func newPipelinePager(opts []PipelinePaginateOption, reverse bool) (*pipelinePager, error) {
	pager := &pipelinePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *pipelinePager) applyFilter(query *PipelineQuery) (*PipelineQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *pipelinePager) toCursor(_m *Pipeline) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *pipelinePager) applyCursors(query *PipelineQuery, after, before *Cursor) (*PipelineQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultPipelineOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *pipelinePager) applyOrder(query *PipelineQuery) *PipelineQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultPipelineOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultPipelineOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *pipelinePager) orderExpr(query *PipelineQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultPipelineOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Pipeline.
func (_m *PipelineQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PipelinePaginateOption,
) (*PipelineConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPipelinePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &PipelineConnection{Edges: []*PipelineEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PipelineOrderFieldName orders Pipeline by name.
	PipelineOrderFieldName = &PipelineOrderField{
		Value: func(_m *Pipeline) (ent.Value, error) {
			return _m.Name, nil
		},
		column: pipeline.FieldName,
		toTerm: pipeline.ByName,
		toCursor: func(_m *Pipeline) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// PipelineOrderFieldCreatedAt orders Pipeline by createdAt.
	PipelineOrderFieldCreatedAt = &PipelineOrderField{
		Value: func(_m *Pipeline) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: pipeline.FieldCreatedAt,
		toTerm: pipeline.ByCreatedAt,
		toCursor: func(_m *Pipeline) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// PipelineOrderFieldUpdatedAt orders Pipeline by updatedAt.
	PipelineOrderFieldUpdatedAt = &PipelineOrderField{
		Value: func(_m *Pipeline) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: pipeline.FieldUpdatedAt,
		toTerm: pipeline.ByUpdatedAt,
		toCursor: func(_m *Pipeline) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PipelineOrderField) String() string {
	var str string
	switch f.column {
	case PipelineOrderFieldName.column:
		str = "NAME"
	case PipelineOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case PipelineOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PipelineOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PipelineOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PipelineOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *PipelineOrderFieldName
	case "CREATED_AT":
		*f = *PipelineOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *PipelineOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid PipelineOrderField", str)
	}
	return nil
}

// PipelineOrderField defines the ordering field of Pipeline.
type PipelineOrderField struct {
	// Value extracts the ordering value from the given Pipeline.
	Value    func(*Pipeline) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) pipeline.OrderOption
	toCursor func(*Pipeline) Cursor
}

// PipelineOrder defines the ordering of Pipeline.
type PipelineOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *PipelineOrderField `json:"field"`
}

// DefaultPipelineOrder is the default ordering of Pipeline.
var DefaultPipelineOrder = &PipelineOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PipelineOrderField{
		Value: func(_m *Pipeline) (ent.Value, error) {
			return _m.ID, nil
		},
		column: pipeline.FieldID,
		toTerm: pipeline.ByID,
		toCursor: func(_m *Pipeline) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Pipeline into PipelineEdge.
func (_m *Pipeline) ToEdge(order *PipelineOrder) *PipelineEdge {
	if order == nil {
		order = DefaultPipelineOrder
	}
	return &PipelineEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// QueueEdge is the edge representation of Queue.
type QueueEdge struct {
	Node   *Queue `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// QueueConnection is the connection containing edges to Queue.
type QueueConnection struct {
	Edges      []*QueueEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *QueueConnection) build(nodes []*Queue, pager *queuePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Queue
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Queue {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Queue {
			return nodes[i]
		}
	}
	c.Edges = make([]*QueueEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &QueueEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// QueuePaginateOption enables pagination customization.
type QueuePaginateOption func(*queuePager) error

// WithQueueOrder configures pagination ordering.
func WithQueueOrder(order []*QueueOrder) QueuePaginateOption {
	return func(pager *queuePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithQueueFilter configures pagination filter.
func WithQueueFilter(filter func(*QueueQuery) (*QueueQuery, error)) QueuePaginateOption {
	return func(pager *queuePager) error {
		if filter == nil {
			return errors.New("QueueQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type queuePager struct {
	reverse bool
	order   []*QueueOrder
	filter  func(*QueueQuery) (*QueueQuery, error)
}

func newQueuePager(opts []QueuePaginateOption, reverse bool) (*queuePager, error) {
	pager := &queuePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *queuePager) applyFilter(query *QueueQuery) (*QueueQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *queuePager) toCursor(_m *Queue) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *queuePager) applyCursors(query *QueueQuery, after, before *Cursor) (*QueueQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultQueueOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *queuePager) applyOrder(query *QueueQuery) *QueueQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultQueueOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultQueueOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *queuePager) orderExpr(query *QueueQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultQueueOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Queue.
func (_m *QueueQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...QueuePaginateOption,
) (*QueueConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newQueuePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &QueueConnection{Edges: []*QueueEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// QueueOrderFieldName orders Queue by name.
	QueueOrderFieldName = &QueueOrderField{
		Value: func(_m *Queue) (ent.Value, error) {
			return _m.Name, nil
		},
		column: queue.FieldName,
		toTerm: queue.ByName,
		toCursor: func(_m *Queue) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// QueueOrderFieldType orders Queue by type.
	QueueOrderFieldType = &QueueOrderField{
		Value: func(_m *Queue) (ent.Value, error) {
			return _m.Type, nil
		},
		column: queue.FieldType,
		toTerm: queue.ByType,
		toCursor: func(_m *Queue) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Type,
			}
		},
	}
	// QueueOrderFieldCreatedAt orders Queue by createdAt.
	QueueOrderFieldCreatedAt = &QueueOrderField{
		Value: func(_m *Queue) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: queue.FieldCreatedAt,
		toTerm: queue.ByCreatedAt,
		toCursor: func(_m *Queue) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// QueueOrderFieldUpdatedAt orders Queue by updatedAt.
	QueueOrderFieldUpdatedAt = &QueueOrderField{
		Value: func(_m *Queue) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: queue.FieldUpdatedAt,
		toTerm: queue.ByUpdatedAt,
		toCursor: func(_m *Queue) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f QueueOrderField) String() string {
	var str string
	switch f.column {
	case QueueOrderFieldName.column:
		str = "NAME"
	case QueueOrderFieldType.column:
		str = "TYPE"
	case QueueOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case QueueOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f QueueOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *QueueOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("QueueOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *QueueOrderFieldName
	case "TYPE":
		*f = *QueueOrderFieldType
	case "CREATED_AT":
		*f = *QueueOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *QueueOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid QueueOrderField", str)
	}
	return nil
}

// QueueOrderField defines the ordering field of Queue.
type QueueOrderField struct {
	// Value extracts the ordering value from the given Queue.
	Value    func(*Queue) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) queue.OrderOption
	toCursor func(*Queue) Cursor
}

// QueueOrder defines the ordering of Queue.
type QueueOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *QueueOrderField `json:"field"`
}

// DefaultQueueOrder is the default ordering of Queue.
var DefaultQueueOrder = &QueueOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &QueueOrderField{
		Value: func(_m *Queue) (ent.Value, error) {
			return _m.ID, nil
		},
		column: queue.FieldID,
		toTerm: queue.ByID,
		toCursor: func(_m *Queue) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Queue into QueueEdge.
func (_m *Queue) ToEdge(order *QueueOrder) *QueueEdge {
	if order == nil {
		order = DefaultQueueOrder
	}
	return &QueueEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// RbacEdge is the edge representation of Rbac.
type RbacEdge struct {
	Node   *Rbac  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RbacConnection is the connection containing edges to Rbac.
type RbacConnection struct {
	Edges      []*RbacEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *RbacConnection) build(nodes []*Rbac, pager *rbacPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Rbac
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Rbac {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Rbac {
			return nodes[i]
		}
	}
	c.Edges = make([]*RbacEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RbacEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RbacPaginateOption enables pagination customization.
type RbacPaginateOption func(*rbacPager) error

// WithRbacOrder configures pagination ordering.
func WithRbacOrder(order []*RbacOrder) RbacPaginateOption {
	return func(pager *rbacPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithRbacFilter configures pagination filter.
func WithRbacFilter(filter func(*RbacQuery) (*RbacQuery, error)) RbacPaginateOption {
	return func(pager *rbacPager) error {
		if filter == nil {
			return errors.New("RbacQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type rbacPager struct {
	reverse bool
	order   []*RbacOrder
	filter  func(*RbacQuery) (*RbacQuery, error)
}

func newRbacPager(opts []RbacPaginateOption, reverse bool) (*rbacPager, error) {
	pager := &rbacPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *rbacPager) applyFilter(query *RbacQuery) (*RbacQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *rbacPager) toCursor(_m *Rbac) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *rbacPager) applyCursors(query *RbacQuery, after, before *Cursor) (*RbacQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultRbacOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *rbacPager) applyOrder(query *RbacQuery) *RbacQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultRbacOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultRbacOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *rbacPager) orderExpr(query *RbacQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultRbacOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Rbac.
func (_m *RbacQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RbacPaginateOption,
) (*RbacConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRbacPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &RbacConnection{Edges: []*RbacEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RbacOrderFieldCreatedAt orders Rbac by createdAt.
	RbacOrderFieldCreatedAt = &RbacOrderField{
		Value: func(_m *Rbac) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: rbac.FieldCreatedAt,
		toTerm: rbac.ByCreatedAt,
		toCursor: func(_m *Rbac) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// RbacOrderFieldUpdatedAt orders Rbac by updatedAt.
	RbacOrderFieldUpdatedAt = &RbacOrderField{
		Value: func(_m *Rbac) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: rbac.FieldUpdatedAt,
		toTerm: rbac.ByUpdatedAt,
		toCursor: func(_m *Rbac) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RbacOrderField) String() string {
	var str string
	switch f.column {
	case RbacOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case RbacOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RbacOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RbacOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RbacOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *RbacOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *RbacOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid RbacOrderField", str)
	}
	return nil
}

// RbacOrderField defines the ordering field of Rbac.
type RbacOrderField struct {
	// Value extracts the ordering value from the given Rbac.
	Value    func(*Rbac) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) rbac.OrderOption
	toCursor func(*Rbac) Cursor
}

// RbacOrder defines the ordering of Rbac.
type RbacOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RbacOrderField `json:"field"`
}

// DefaultRbacOrder is the default ordering of Rbac.
var DefaultRbacOrder = &RbacOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RbacOrderField{
		Value: func(_m *Rbac) (ent.Value, error) {
			return _m.ID, nil
		},
		column: rbac.FieldID,
		toTerm: rbac.ByID,
		toCursor: func(_m *Rbac) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Rbac into RbacEdge.
func (_m *Rbac) ToEdge(order *RbacOrder) *RbacEdge {
	if order == nil {
		order = DefaultRbacOrder
	}
	return &RbacEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// StageEdge is the edge representation of Stage.
type StageEdge struct {
	Node   *Stage `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// StageConnection is the connection containing edges to Stage.
type StageConnection struct {
	Edges      []*StageEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *StageConnection) build(nodes []*Stage, pager *stagePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Stage
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Stage {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Stage {
			return nodes[i]
		}
	}
	c.Edges = make([]*StageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &StageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// StagePaginateOption enables pagination customization.
type StagePaginateOption func(*stagePager) error

// WithStageOrder configures pagination ordering.
func WithStageOrder(order []*StageOrder) StagePaginateOption {
	return func(pager *stagePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithStageFilter configures pagination filter.
func WithStageFilter(filter func(*StageQuery) (*StageQuery, error)) StagePaginateOption {
	return func(pager *stagePager) error {
		if filter == nil {
			return errors.New("StageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type stagePager struct {
	reverse bool
	order   []*StageOrder
	filter  func(*StageQuery) (*StageQuery, error)
}

func newStagePager(opts []StagePaginateOption, reverse bool) (*stagePager, error) {
	pager := &stagePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *stagePager) applyFilter(query *StageQuery) (*StageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *stagePager) toCursor(_m *Stage) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(_m).Value)
	}
	return Cursor{ID: _m.ID, Value: cs_}
}

func (p *stagePager) applyCursors(query *StageQuery, after, before *Cursor) (*StageQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultStageOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *stagePager) applyOrder(query *StageQuery) *StageQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultStageOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultStageOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *stagePager) orderExpr(query *StageQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultStageOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Stage.
func (_m *StageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...StagePaginateOption,
) (*StageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newStagePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &StageConnection{Edges: []*StageEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// StageOrderFieldName orders Stage by name.
	StageOrderFieldName = &StageOrderField{
		Value: func(_m *Stage) (ent.Value, error) {
			return _m.Name, nil
		},
		column: stage.FieldName,
		toTerm: stage.ByName,
		toCursor: func(_m *Stage) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// StageOrderFieldLossOrGain orders Stage by lossOrGain.
	StageOrderFieldLossOrGain = &StageOrderField{
		Value: func(_m *Stage) (ent.Value, error) {
			return _m.LossOrGain, nil
		},
		column: stage.FieldLossOrGain,
		toTerm: stage.ByLossOrGain,
		toCursor: func(_m *Stage) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.LossOrGain,
			}
		},
	}
	// StageOrderFieldCreatedAt orders Stage by createdAt.
	StageOrderFieldCreatedAt = &StageOrderField{
		Value: func(_m *Stage) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: stage.FieldCreatedAt,
		toTerm: stage.ByCreatedAt,
		toCursor: func(_m *Stage) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// StageOrderFieldUpdatedAt orders Stage by updatedAt.
	StageOrderFieldUpdatedAt = &StageOrderField{
		Value: func(_m *Stage) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: stage.FieldUpdatedAt,
		toTerm: stage.ByUpdatedAt,
		toCursor: func(_m *Stage) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f StageOrderField) String() string {
	var str string
	switch f.column {
	case StageOrderFieldName.column:
		str = "NAME"
	case StageOrderFieldLossOrGain.column:
		str = "LOSS_OR_GAIN"
	case StageOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case StageOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f StageOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *StageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("StageOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *StageOrderFieldName
	case "LOSS_OR_GAIN":
		*f = *StageOrderFieldLossOrGain
	case "CREATED_AT":
		*f = *StageOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *StageOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid StageOrderField", str)
	}
	return nil
}

// StageOrderField defines the ordering field of Stage.
type StageOrderField struct {
	// Value extracts the ordering value from the given Stage.
	Value    func(*Stage) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) stage.OrderOption
	toCursor func(*Stage) Cursor
}

// StageOrder defines the ordering of Stage.
type StageOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *StageOrderField `json:"field"`
}

// DefaultStageOrder is the default ordering of Stage.
var DefaultStageOrder = &StageOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &StageOrderField{
		Value: func(_m *Stage) (ent.Value, error) {
			return _m.ID, nil
		},
		column: stage.FieldID,
		toTerm: stage.ByID,
		toCursor: func(_m *Stage) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Stage into StageEdge.
func (_m *Stage) ToEdge(order *StageOrder) *StageEdge {
	if order == nil {
		order = DefaultStageOrder
	}
	return &StageEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// TextEdge is the edge representation of Text.
type TextEdge struct {
	Node   *Text  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TextConnection is the connection containing edges to Text.
type TextConnection struct {
	Edges      []*TextEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *TextConnection) build(nodes []*Text, pager *textPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Text
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Text {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Text {
			return nodes[i]
		}
	}
	c.Edges = make([]*TextEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TextEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TextPaginateOption enables pagination customization.
type TextPaginateOption func(*textPager) error

// WithTextOrder configures pagination ordering.
func WithTextOrder(order *TextOrder) TextPaginateOption {
	if order == nil {
		order = DefaultTextOrder
	}
	o := *order
	return func(pager *textPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTextOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTextFilter configures pagination filter.
func WithTextFilter(filter func(*TextQuery) (*TextQuery, error)) TextPaginateOption {
	return func(pager *textPager) error {
		if filter == nil {
			return errors.New("TextQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type textPager struct {
	reverse bool
	order   *TextOrder
	filter  func(*TextQuery) (*TextQuery, error)
}

func newTextPager(opts []TextPaginateOption, reverse bool) (*textPager, error) {
	pager := &textPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTextOrder
	}
	return pager, nil
}

func (p *textPager) applyFilter(query *TextQuery) (*TextQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *textPager) toCursor(_m *Text) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *textPager) applyCursors(query *TextQuery, after, before *Cursor) (*TextQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTextOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *textPager) applyOrder(query *TextQuery) *TextQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTextOrder.Field {
		query = query.Order(DefaultTextOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *textPager) orderExpr(query *TextQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTextOrder.Field {
			b.Comma().Ident(DefaultTextOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Text.
func (_m *TextQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TextPaginateOption,
) (*TextConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTextPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &TextConnection{Edges: []*TextEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TextOrderFieldText orders Text by text.
	TextOrderFieldText = &TextOrderField{
		Value: func(_m *Text) (ent.Value, error) {
			return _m.Text, nil
		},
		column: text.FieldText,
		toTerm: text.ByText,
		toCursor: func(_m *Text) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Text,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TextOrderField) String() string {
	var str string
	switch f.column {
	case TextOrderFieldText.column:
		str = "TEXT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TextOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TextOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TextOrderField %T must be a string", v)
	}
	switch str {
	case "TEXT":
		*f = *TextOrderFieldText
	default:
		return fmt.Errorf("%s is not a valid TextOrderField", str)
	}
	return nil
}

// TextOrderField defines the ordering field of Text.
type TextOrderField struct {
	// Value extracts the ordering value from the given Text.
	Value    func(*Text) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) text.OrderOption
	toCursor func(*Text) Cursor
}

// TextOrder defines the ordering of Text.
type TextOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TextOrderField `json:"field"`
}

// DefaultTextOrder is the default ordering of Text.
var DefaultTextOrder = &TextOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TextOrderField{
		Value: func(_m *Text) (ent.Value, error) {
			return _m.ID, nil
		},
		column: text.FieldID,
		toTerm: text.ByID,
		toCursor: func(_m *Text) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Text into TextEdge.
func (_m *Text) ToEdge(order *TextOrder) *TextEdge {
	if order == nil {
		order = DefaultTextOrder
	}
	return &TextEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}
