// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/chat"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/file"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/message"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/text"
	"github.com/google/uuid"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SentBy holds the value of the "sentBy" field.
	SentBy message.SentBy `json:"sentBy,omitempty"`
	// Private holds the value of the "private" field.
	Private bool `json:"private,omitempty"`
	// Type holds the value of the "type" field.
	Type message.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges        MessageEdges `json:"edges"`
	file_message *uuid.UUID
	message_chat *uuid.UUID
	text_message *uuid.UUID
	selectValues sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Chat holds the value of the chat edge.
	Chat *Chat `json:"chat,omitempty"`
	// Employee holds the value of the employee edge.
	Employee []*Employee `json:"employee,omitempty"`
	// Text holds the value of the text edge.
	Text *Text `json:"text,omitempty"`
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedEmployee map[string][]*Employee
}

// ChatOrErr returns the Chat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ChatOrErr() (*Chat, error) {
	if e.Chat != nil {
		return e.Chat, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chat.Label}
	}
	return nil, &NotLoadedError{edge: "chat"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) EmployeeOrErr() ([]*Employee, error) {
	if e.loadedTypes[1] {
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// TextOrErr returns the Text value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) TextOrErr() (*Text, error) {
	if e.Text != nil {
		return e.Text, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: text.Label}
	}
	return nil, &NotLoadedError{edge: "text"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldPrivate:
			values[i] = new(sql.NullBool)
		case message.FieldSentBy, message.FieldType:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt, message.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case message.FieldID:
			values[i] = new(uuid.UUID)
		case message.ForeignKeys[0]: // file_message
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case message.ForeignKeys[1]: // message_chat
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case message.ForeignKeys[2]: // text_message
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (_m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case message.FieldSentBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sentBy", values[i])
			} else if value.Valid {
				_m.SentBy = message.SentBy(value.String)
			}
		case message.FieldPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field private", values[i])
			} else if value.Valid {
				_m.Private = value.Bool
			}
		case message.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = message.Type(value.String)
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field file_message", values[i])
			} else if value.Valid {
				_m.file_message = new(uuid.UUID)
				*_m.file_message = *value.S.(*uuid.UUID)
			}
		case message.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field message_chat", values[i])
			} else if value.Valid {
				_m.message_chat = new(uuid.UUID)
				*_m.message_chat = *value.S.(*uuid.UUID)
			}
		case message.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field text_message", values[i])
			} else if value.Valid {
				_m.text_message = new(uuid.UUID)
				*_m.text_message = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (_m *Message) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryChat queries the "chat" edge of the Message entity.
func (_m *Message) QueryChat() *ChatQuery {
	return NewMessageClient(_m.config).QueryChat(_m)
}

// QueryEmployee queries the "employee" edge of the Message entity.
func (_m *Message) QueryEmployee() *EmployeeQuery {
	return NewMessageClient(_m.config).QueryEmployee(_m)
}

// QueryText queries the "text" edge of the Message entity.
func (_m *Message) QueryText() *TextQuery {
	return NewMessageClient(_m.config).QueryText(_m)
}

// QueryFile queries the "file" edge of the Message entity.
func (_m *Message) QueryFile() *FileQuery {
	return NewMessageClient(_m.config).QueryFile(_m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Message) Unwrap() *Message {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("sentBy=")
	builder.WriteString(fmt.Sprintf("%v", _m.SentBy))
	builder.WriteString(", ")
	builder.WriteString("private=")
	builder.WriteString(fmt.Sprintf("%v", _m.Private))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEmployee returns the Employee named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Message) NamedEmployee(name string) ([]*Employee, error) {
	if _m.Edges.namedEmployee == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEmployee[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Message) appendNamedEmployee(name string, edges ...*Employee) {
	if _m.Edges.namedEmployee == nil {
		_m.Edges.namedEmployee = make(map[string][]*Employee)
	}
	if len(edges) == 0 {
		_m.Edges.namedEmployee[name] = []*Employee{}
	} else {
		_m.Edges.namedEmployee[name] = append(_m.Edges.namedEmployee[name], edges...)
	}
}

// Messages is a parsable slice of Message.
type Messages []*Message
