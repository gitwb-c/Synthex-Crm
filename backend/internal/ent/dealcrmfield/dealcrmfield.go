// Code generated by ent, DO NOT EDIT.

package dealcrmfield

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dealcrmfield type in the database.
	Label = "deal_crm_field"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeDeal holds the string denoting the deal edge name in mutations.
	EdgeDeal = "deal"
	// EdgeCrmField holds the string denoting the crmfield edge name in mutations.
	EdgeCrmField = "crmField"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// Table holds the table name of the dealcrmfield in the database.
	Table = "deal_crm_fields"
	// DealTable is the table that holds the deal relation/edge.
	DealTable = "deal_crm_fields"
	// DealInverseTable is the table name for the Deal entity.
	// It exists in this package in order to avoid circular dependency with the "deal" package.
	DealInverseTable = "deals"
	// DealColumn is the table column denoting the deal relation/edge.
	DealColumn = "deal_crm_field_deal"
	// CrmFieldTable is the table that holds the crmField relation/edge.
	CrmFieldTable = "deal_crm_fields"
	// CrmFieldInverseTable is the table name for the CrmField entity.
	// It exists in this package in order to avoid circular dependency with the "crmfield" package.
	CrmFieldInverseTable = "crm_fields"
	// CrmFieldColumn is the table column denoting the crmField relation/edge.
	CrmFieldColumn = "deal_crm_field_crm_field"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "deal_crm_fields"
	// TenantInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	TenantInverseTable = "companies"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
)

// Columns holds all SQL columns for dealcrmfield fields.
var Columns = []string{
	FieldID,
	FieldValue,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTenantId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "deal_crm_fields"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deal_crm_field_deal",
	"deal_crm_field_crm_field",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DealCrmField queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantId orders the results by the tenantId field.
func ByTenantId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantId, opts...).ToFunc()
}

// ByDealField orders the results by deal field.
func ByDealField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDealStep(), sql.OrderByField(field, opts...))
	}
}

// ByCrmFieldField orders the results by crmField field.
func ByCrmFieldField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCrmFieldStep(), sql.OrderByField(field, opts...))
	}
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}
func newDealStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DealInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DealTable, DealColumn),
	)
}
func newCrmFieldStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CrmFieldInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CrmFieldTable, CrmFieldColumn),
	)
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
