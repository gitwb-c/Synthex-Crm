// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/crmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/deal"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dealcrmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/google/uuid"
)

// DealCrmFieldUpdate is the builder for updating DealCrmField entities.
type DealCrmFieldUpdate struct {
	config
	hooks    []Hook
	mutation *DealCrmFieldMutation
}

// Where appends a list predicates to the DealCrmFieldUpdate builder.
func (_u *DealCrmFieldUpdate) Where(ps ...predicate.DealCrmField) *DealCrmFieldUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetValue sets the "value" field.
func (_u *DealCrmFieldUpdate) SetValue(v string) *DealCrmFieldUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DealCrmFieldUpdate) SetNillableValue(v *string) *DealCrmFieldUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *DealCrmFieldUpdate) SetUpdatedAt(v time.Time) *DealCrmFieldUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDealID sets the "deal" edge to the Deal entity by ID.
func (_u *DealCrmFieldUpdate) SetDealID(id uuid.UUID) *DealCrmFieldUpdate {
	_u.mutation.SetDealID(id)
	return _u
}

// SetNillableDealID sets the "deal" edge to the Deal entity by ID if the given value is not nil.
func (_u *DealCrmFieldUpdate) SetNillableDealID(id *uuid.UUID) *DealCrmFieldUpdate {
	if id != nil {
		_u = _u.SetDealID(*id)
	}
	return _u
}

// SetDeal sets the "deal" edge to the Deal entity.
func (_u *DealCrmFieldUpdate) SetDeal(v *Deal) *DealCrmFieldUpdate {
	return _u.SetDealID(v.ID)
}

// SetCrmFieldID sets the "crmField" edge to the CrmField entity by ID.
func (_u *DealCrmFieldUpdate) SetCrmFieldID(id uuid.UUID) *DealCrmFieldUpdate {
	_u.mutation.SetCrmFieldID(id)
	return _u
}

// SetNillableCrmFieldID sets the "crmField" edge to the CrmField entity by ID if the given value is not nil.
func (_u *DealCrmFieldUpdate) SetNillableCrmFieldID(id *uuid.UUID) *DealCrmFieldUpdate {
	if id != nil {
		_u = _u.SetCrmFieldID(*id)
	}
	return _u
}

// SetCrmField sets the "crmField" edge to the CrmField entity.
func (_u *DealCrmFieldUpdate) SetCrmField(v *CrmField) *DealCrmFieldUpdate {
	return _u.SetCrmFieldID(v.ID)
}

// Mutation returns the DealCrmFieldMutation object of the builder.
func (_u *DealCrmFieldUpdate) Mutation() *DealCrmFieldMutation {
	return _u.mutation
}

// ClearDeal clears the "deal" edge to the Deal entity.
func (_u *DealCrmFieldUpdate) ClearDeal() *DealCrmFieldUpdate {
	_u.mutation.ClearDeal()
	return _u
}

// ClearCrmField clears the "crmField" edge to the CrmField entity.
func (_u *DealCrmFieldUpdate) ClearCrmField() *DealCrmFieldUpdate {
	_u.mutation.ClearCrmField()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DealCrmFieldUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DealCrmFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DealCrmFieldUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DealCrmFieldUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DealCrmFieldUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dealcrmfield.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DealCrmFieldUpdate) check() error {
	if v, ok := _u.mutation.Value(); ok {
		if err := dealcrmfield.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DealCrmField.value": %w`, err)}
		}
	}
	return nil
}

func (_u *DealCrmFieldUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dealcrmfield.Table, dealcrmfield.Columns, sqlgraph.NewFieldSpec(dealcrmfield.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dealcrmfield.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dealcrmfield.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.DealTable,
			Columns: []string{dealcrmfield.DealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.DealTable,
			Columns: []string{dealcrmfield.DealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.CrmFieldTable,
			Columns: []string{dealcrmfield.CrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CrmFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.CrmFieldTable,
			Columns: []string{dealcrmfield.CrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dealcrmfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DealCrmFieldUpdateOne is the builder for updating a single DealCrmField entity.
type DealCrmFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DealCrmFieldMutation
}

// SetValue sets the "value" field.
func (_u *DealCrmFieldUpdateOne) SetValue(v string) *DealCrmFieldUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DealCrmFieldUpdateOne) SetNillableValue(v *string) *DealCrmFieldUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *DealCrmFieldUpdateOne) SetUpdatedAt(v time.Time) *DealCrmFieldUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDealID sets the "deal" edge to the Deal entity by ID.
func (_u *DealCrmFieldUpdateOne) SetDealID(id uuid.UUID) *DealCrmFieldUpdateOne {
	_u.mutation.SetDealID(id)
	return _u
}

// SetNillableDealID sets the "deal" edge to the Deal entity by ID if the given value is not nil.
func (_u *DealCrmFieldUpdateOne) SetNillableDealID(id *uuid.UUID) *DealCrmFieldUpdateOne {
	if id != nil {
		_u = _u.SetDealID(*id)
	}
	return _u
}

// SetDeal sets the "deal" edge to the Deal entity.
func (_u *DealCrmFieldUpdateOne) SetDeal(v *Deal) *DealCrmFieldUpdateOne {
	return _u.SetDealID(v.ID)
}

// SetCrmFieldID sets the "crmField" edge to the CrmField entity by ID.
func (_u *DealCrmFieldUpdateOne) SetCrmFieldID(id uuid.UUID) *DealCrmFieldUpdateOne {
	_u.mutation.SetCrmFieldID(id)
	return _u
}

// SetNillableCrmFieldID sets the "crmField" edge to the CrmField entity by ID if the given value is not nil.
func (_u *DealCrmFieldUpdateOne) SetNillableCrmFieldID(id *uuid.UUID) *DealCrmFieldUpdateOne {
	if id != nil {
		_u = _u.SetCrmFieldID(*id)
	}
	return _u
}

// SetCrmField sets the "crmField" edge to the CrmField entity.
func (_u *DealCrmFieldUpdateOne) SetCrmField(v *CrmField) *DealCrmFieldUpdateOne {
	return _u.SetCrmFieldID(v.ID)
}

// Mutation returns the DealCrmFieldMutation object of the builder.
func (_u *DealCrmFieldUpdateOne) Mutation() *DealCrmFieldMutation {
	return _u.mutation
}

// ClearDeal clears the "deal" edge to the Deal entity.
func (_u *DealCrmFieldUpdateOne) ClearDeal() *DealCrmFieldUpdateOne {
	_u.mutation.ClearDeal()
	return _u
}

// ClearCrmField clears the "crmField" edge to the CrmField entity.
func (_u *DealCrmFieldUpdateOne) ClearCrmField() *DealCrmFieldUpdateOne {
	_u.mutation.ClearCrmField()
	return _u
}

// Where appends a list predicates to the DealCrmFieldUpdate builder.
func (_u *DealCrmFieldUpdateOne) Where(ps ...predicate.DealCrmField) *DealCrmFieldUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DealCrmFieldUpdateOne) Select(field string, fields ...string) *DealCrmFieldUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DealCrmField entity.
func (_u *DealCrmFieldUpdateOne) Save(ctx context.Context) (*DealCrmField, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DealCrmFieldUpdateOne) SaveX(ctx context.Context) *DealCrmField {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DealCrmFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DealCrmFieldUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DealCrmFieldUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dealcrmfield.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DealCrmFieldUpdateOne) check() error {
	if v, ok := _u.mutation.Value(); ok {
		if err := dealcrmfield.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DealCrmField.value": %w`, err)}
		}
	}
	return nil
}

func (_u *DealCrmFieldUpdateOne) sqlSave(ctx context.Context) (_node *DealCrmField, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dealcrmfield.Table, dealcrmfield.Columns, sqlgraph.NewFieldSpec(dealcrmfield.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DealCrmField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dealcrmfield.FieldID)
		for _, f := range fields {
			if !dealcrmfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dealcrmfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dealcrmfield.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dealcrmfield.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.DealTable,
			Columns: []string{dealcrmfield.DealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.DealTable,
			Columns: []string{dealcrmfield.DealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.CrmFieldTable,
			Columns: []string{dealcrmfield.CrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CrmFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.CrmFieldTable,
			Columns: []string{dealcrmfield.CrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DealCrmField{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dealcrmfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
