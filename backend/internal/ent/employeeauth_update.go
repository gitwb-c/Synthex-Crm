// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employee"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employeeauth"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/google/uuid"
)

// EmployeeAuthUpdate is the builder for updating EmployeeAuth entities.
type EmployeeAuthUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeAuthMutation
}

// Where appends a list predicates to the EmployeeAuthUpdate builder.
func (_u *EmployeeAuthUpdate) Where(ps ...predicate.EmployeeAuth) *EmployeeAuthUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *EmployeeAuthUpdate) SetName(v string) *EmployeeAuthUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EmployeeAuthUpdate) SetNillableName(v *string) *EmployeeAuthUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *EmployeeAuthUpdate) SetEmail(v string) *EmployeeAuthUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *EmployeeAuthUpdate) SetNillableEmail(v *string) *EmployeeAuthUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *EmployeeAuthUpdate) SetPassword(v string) *EmployeeAuthUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *EmployeeAuthUpdate) SetNillablePassword(v *string) *EmployeeAuthUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *EmployeeAuthUpdate) SetUpdatedAt(v time.Time) *EmployeeAuthUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (_u *EmployeeAuthUpdate) SetEmployeeID(id uuid.UUID) *EmployeeAuthUpdate {
	_u.mutation.SetEmployeeID(id)
	return _u
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (_u *EmployeeAuthUpdate) SetNillableEmployeeID(id *uuid.UUID) *EmployeeAuthUpdate {
	if id != nil {
		_u = _u.SetEmployeeID(*id)
	}
	return _u
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (_u *EmployeeAuthUpdate) SetEmployee(v *Employee) *EmployeeAuthUpdate {
	return _u.SetEmployeeID(v.ID)
}

// Mutation returns the EmployeeAuthMutation object of the builder.
func (_u *EmployeeAuthUpdate) Mutation() *EmployeeAuthMutation {
	return _u.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (_u *EmployeeAuthUpdate) ClearEmployee() *EmployeeAuthUpdate {
	_u.mutation.ClearEmployee()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EmployeeAuthUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EmployeeAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EmployeeAuthUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EmployeeAuthUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EmployeeAuthUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := employeeauth.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EmployeeAuthUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := employeeauth.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmployeeAuth.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := employeeauth.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EmployeeAuth.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := employeeauth.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "EmployeeAuth.password": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EmployeeAuth.tenant"`)
	}
	return nil
}

func (_u *EmployeeAuthUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employeeauth.Table, employeeauth.Columns, sqlgraph.NewFieldSpec(employeeauth.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(employeeauth.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(employeeauth.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(employeeauth.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(employeeauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   employeeauth.EmployeeTable,
			Columns: []string{employeeauth.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   employeeauth.EmployeeTable,
			Columns: []string{employeeauth.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeeauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EmployeeAuthUpdateOne is the builder for updating a single EmployeeAuth entity.
type EmployeeAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeAuthMutation
}

// SetName sets the "name" field.
func (_u *EmployeeAuthUpdateOne) SetName(v string) *EmployeeAuthUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EmployeeAuthUpdateOne) SetNillableName(v *string) *EmployeeAuthUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *EmployeeAuthUpdateOne) SetEmail(v string) *EmployeeAuthUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *EmployeeAuthUpdateOne) SetNillableEmail(v *string) *EmployeeAuthUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *EmployeeAuthUpdateOne) SetPassword(v string) *EmployeeAuthUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *EmployeeAuthUpdateOne) SetNillablePassword(v *string) *EmployeeAuthUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *EmployeeAuthUpdateOne) SetUpdatedAt(v time.Time) *EmployeeAuthUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (_u *EmployeeAuthUpdateOne) SetEmployeeID(id uuid.UUID) *EmployeeAuthUpdateOne {
	_u.mutation.SetEmployeeID(id)
	return _u
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (_u *EmployeeAuthUpdateOne) SetNillableEmployeeID(id *uuid.UUID) *EmployeeAuthUpdateOne {
	if id != nil {
		_u = _u.SetEmployeeID(*id)
	}
	return _u
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (_u *EmployeeAuthUpdateOne) SetEmployee(v *Employee) *EmployeeAuthUpdateOne {
	return _u.SetEmployeeID(v.ID)
}

// Mutation returns the EmployeeAuthMutation object of the builder.
func (_u *EmployeeAuthUpdateOne) Mutation() *EmployeeAuthMutation {
	return _u.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (_u *EmployeeAuthUpdateOne) ClearEmployee() *EmployeeAuthUpdateOne {
	_u.mutation.ClearEmployee()
	return _u
}

// Where appends a list predicates to the EmployeeAuthUpdate builder.
func (_u *EmployeeAuthUpdateOne) Where(ps ...predicate.EmployeeAuth) *EmployeeAuthUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EmployeeAuthUpdateOne) Select(field string, fields ...string) *EmployeeAuthUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated EmployeeAuth entity.
func (_u *EmployeeAuthUpdateOne) Save(ctx context.Context) (*EmployeeAuth, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EmployeeAuthUpdateOne) SaveX(ctx context.Context) *EmployeeAuth {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EmployeeAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EmployeeAuthUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EmployeeAuthUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := employeeauth.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EmployeeAuthUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := employeeauth.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmployeeAuth.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := employeeauth.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EmployeeAuth.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := employeeauth.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "EmployeeAuth.password": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EmployeeAuth.tenant"`)
	}
	return nil
}

func (_u *EmployeeAuthUpdateOne) sqlSave(ctx context.Context) (_node *EmployeeAuth, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employeeauth.Table, employeeauth.Columns, sqlgraph.NewFieldSpec(employeeauth.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeeAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeeauth.FieldID)
		for _, f := range fields {
			if !employeeauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeeauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(employeeauth.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(employeeauth.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(employeeauth.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(employeeauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   employeeauth.EmployeeTable,
			Columns: []string{employeeauth.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   employeeauth.EmployeeTable,
			Columns: []string{employeeauth.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmployeeAuth{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeeauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
