// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/crmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/deal"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dealcrmfield"
	"github.com/google/uuid"
)

// DealCrmField is the model entity for the DealCrmField schema.
type DealCrmField struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId uuid.UUID `json:"-" sql:"not null"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DealCrmFieldQuery when eager-loading is set.
	Edges                    DealCrmFieldEdges `json:"edges"`
	deal_crm_field_deal      *uuid.UUID
	deal_crm_field_crm_field *uuid.UUID
	selectValues             sql.SelectValues
}

// DealCrmFieldEdges holds the relations/edges for other nodes in the graph.
type DealCrmFieldEdges struct {
	// Deal holds the value of the deal edge.
	Deal *Deal `json:"deal,omitempty"`
	// CrmField holds the value of the crmField edge.
	CrmField *CrmField `json:"crmField,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Company `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// DealOrErr returns the Deal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DealCrmFieldEdges) DealOrErr() (*Deal, error) {
	if e.Deal != nil {
		return e.Deal, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: deal.Label}
	}
	return nil, &NotLoadedError{edge: "deal"}
}

// CrmFieldOrErr returns the CrmField value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DealCrmFieldEdges) CrmFieldOrErr() (*CrmField, error) {
	if e.CrmField != nil {
		return e.CrmField, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: crmfield.Label}
	}
	return nil, &NotLoadedError{edge: "crmField"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DealCrmFieldEdges) TenantOrErr() (*Company, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DealCrmField) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dealcrmfield.FieldValue:
			values[i] = new(sql.NullString)
		case dealcrmfield.FieldCreatedAt, dealcrmfield.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case dealcrmfield.FieldID, dealcrmfield.FieldTenantId:
			values[i] = new(uuid.UUID)
		case dealcrmfield.ForeignKeys[0]: // deal_crm_field_deal
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case dealcrmfield.ForeignKeys[1]: // deal_crm_field_crm_field
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DealCrmField fields.
func (_m *DealCrmField) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dealcrmfield.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case dealcrmfield.FieldTenantId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value != nil {
				_m.TenantId = *value
			}
		case dealcrmfield.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.String
			}
		case dealcrmfield.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case dealcrmfield.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case dealcrmfield.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deal_crm_field_deal", values[i])
			} else if value.Valid {
				_m.deal_crm_field_deal = new(uuid.UUID)
				*_m.deal_crm_field_deal = *value.S.(*uuid.UUID)
			}
		case dealcrmfield.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deal_crm_field_crm_field", values[i])
			} else if value.Valid {
				_m.deal_crm_field_crm_field = new(uuid.UUID)
				*_m.deal_crm_field_crm_field = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the DealCrmField.
// This includes values selected through modifiers, order, etc.
func (_m *DealCrmField) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDeal queries the "deal" edge of the DealCrmField entity.
func (_m *DealCrmField) QueryDeal() *DealQuery {
	return NewDealCrmFieldClient(_m.config).QueryDeal(_m)
}

// QueryCrmField queries the "crmField" edge of the DealCrmField entity.
func (_m *DealCrmField) QueryCrmField() *CrmFieldQuery {
	return NewDealCrmFieldClient(_m.config).QueryCrmField(_m)
}

// QueryTenant queries the "tenant" edge of the DealCrmField entity.
func (_m *DealCrmField) QueryTenant() *CompanyQuery {
	return NewDealCrmFieldClient(_m.config).QueryTenant(_m)
}

// Update returns a builder for updating this DealCrmField.
// Note that you need to call DealCrmField.Unwrap() before calling this method if this DealCrmField
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DealCrmField) Update() *DealCrmFieldUpdateOne {
	return NewDealCrmFieldClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DealCrmField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DealCrmField) Unwrap() *DealCrmField {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: DealCrmField is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DealCrmField) String() string {
	var builder strings.Builder
	builder.WriteString("DealCrmField(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantId))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(_m.Value)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DealCrmFields is a parsable slice of DealCrmField.
type DealCrmFields []*DealCrmField
