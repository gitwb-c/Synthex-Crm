// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (_m *Chat) Deal(ctx context.Context) (*Deal, error) {
	result, err := _m.Edges.DealOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryDeal().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Chat) Employees(ctx context.Context) (result []*Employee, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedEmployees(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.EmployeesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryEmployees().All(ctx)
	}
	return result, err
}

func (_m *Chat) Messages(ctx context.Context) (result []*Message, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedMessages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.MessagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryMessages().All(ctx)
	}
	return result, err
}

func (_m *Chat) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Company) Employees(ctx context.Context) (result []*Employee, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedEmployees(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.EmployeesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryEmployees().All(ctx)
	}
	return result, err
}

func (_m *Company) Costumers(ctx context.Context) (result []*Costumer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedCostumers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.CostumersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryCostumers().All(ctx)
	}
	return result, err
}

func (_m *Company) Deals(ctx context.Context) (result []*Deal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDeals(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DealsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDeals().All(ctx)
	}
	return result, err
}

func (_m *Company) Chats(ctx context.Context) (result []*Chat, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedChats(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.ChatsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryChats().All(ctx)
	}
	return result, err
}

func (_m *Company) Departments(ctx context.Context) (result []*Department, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDepartments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DepartmentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDepartments().All(ctx)
	}
	return result, err
}

func (_m *Company) Pipelines(ctx context.Context) (result []*Pipeline, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedPipelines(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.PipelinesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryPipelines().All(ctx)
	}
	return result, err
}

func (_m *Company) CrmFields(ctx context.Context) (result []*CrmField, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedCrmFields(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.CrmFieldsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryCrmFields().All(ctx)
	}
	return result, err
}

func (_m *Company) DealCrmFields(ctx context.Context) (result []*DealCrmField, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDealCrmFields(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DealCrmFieldsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDealCrmFields().All(ctx)
	}
	return result, err
}

func (_m *Company) DropdownLists(ctx context.Context) (result []*DropdownList, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDropdownLists(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DropdownListsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDropdownLists().All(ctx)
	}
	return result, err
}

func (_m *Company) EmployeeAuths(ctx context.Context) (result []*EmployeeAuth, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedEmployeeAuths(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.EmployeeAuthsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryEmployeeAuths().All(ctx)
	}
	return result, err
}

func (_m *Company) Files(ctx context.Context) (result []*File, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryFiles().All(ctx)
	}
	return result, err
}

func (_m *Company) Messages(ctx context.Context) (result []*Message, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedMessages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.MessagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryMessages().All(ctx)
	}
	return result, err
}

func (_m *Company) Queues(ctx context.Context) (result []*Queue, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedQueues(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.QueuesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryQueues().All(ctx)
	}
	return result, err
}

func (_m *Company) Rbacs(ctx context.Context) (result []*Rbac, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedRbacs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RbacsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryRbacs().All(ctx)
	}
	return result, err
}

func (_m *Company) Stages(ctx context.Context) (result []*Stage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedStages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.StagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryStages().All(ctx)
	}
	return result, err
}

func (_m *Company) Texts(ctx context.Context) (result []*Text, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedTexts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.TextsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryTexts().All(ctx)
	}
	return result, err
}

func (_m *Costumer) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Costumer) Deals(ctx context.Context) (result []*Deal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDeals(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DealsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDeals().All(ctx)
	}
	return result, err
}

func (_m *CrmField) DropdownList(ctx context.Context) (result []*DropdownList, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDropdownList(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DropdownListOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDropdownList().All(ctx)
	}
	return result, err
}

func (_m *CrmField) DealCrmField(ctx context.Context) (result []*DealCrmField, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDealCrmField(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DealCrmFieldOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDealCrmField().All(ctx)
	}
	return result, err
}

func (_m *CrmField) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Deal) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Deal) Costumer(ctx context.Context) (*Costumer, error) {
	result, err := _m.Edges.CostumerOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryCostumer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Deal) Chat(ctx context.Context) (*Chat, error) {
	result, err := _m.Edges.ChatOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryChat().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Deal) Stage(ctx context.Context) (*Stage, error) {
	result, err := _m.Edges.StageOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryStage().Only(ctx)
	}
	return result, err
}

func (_m *Deal) DealCrmFields(ctx context.Context) (result []*DealCrmField, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDealCrmFields(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DealCrmFieldsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDealCrmFields().All(ctx)
	}
	return result, err
}

func (_m *DealCrmField) Deal(ctx context.Context) (*Deal, error) {
	result, err := _m.Edges.DealOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryDeal().Only(ctx)
	}
	return result, err
}

func (_m *DealCrmField) CrmField(ctx context.Context) (*CrmField, error) {
	result, err := _m.Edges.CrmFieldOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryCrmField().Only(ctx)
	}
	return result, err
}

func (_m *DealCrmField) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Department) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Department) Employee(ctx context.Context) (result []*Employee, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedEmployee(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.EmployeeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryEmployee().All(ctx)
	}
	return result, err
}

func (_m *Department) Queues(ctx context.Context) (result []*Queue, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedQueues(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.QueuesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryQueues().All(ctx)
	}
	return result, err
}

func (_m *Department) Rbacs(ctx context.Context) (result []*Rbac, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedRbacs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RbacsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryRbacs().All(ctx)
	}
	return result, err
}

func (_m *DropdownList) CrmField(ctx context.Context) (result []*CrmField, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedCrmField(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.CrmFieldOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryCrmField().All(ctx)
	}
	return result, err
}

func (_m *DropdownList) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Employee) EmployeeAuth(ctx context.Context) (*EmployeeAuth, error) {
	result, err := _m.Edges.EmployeeAuthOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryEmployeeAuth().Only(ctx)
	}
	return result, err
}

func (_m *Employee) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Employee) Department(ctx context.Context) (*Department, error) {
	result, err := _m.Edges.DepartmentOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryDepartment().Only(ctx)
	}
	return result, err
}

func (_m *Employee) Chat(ctx context.Context) (result []*Chat, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedChat(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.ChatOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryChat().All(ctx)
	}
	return result, err
}

func (_m *Employee) Queues(ctx context.Context) (result []*Queue, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedQueues(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.QueuesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryQueues().All(ctx)
	}
	return result, err
}

func (_m *Employee) Messages(ctx context.Context) (result []*Message, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedMessages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.MessagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryMessages().All(ctx)
	}
	return result, err
}

func (_m *EmployeeAuth) Employee(ctx context.Context) (*Employee, error) {
	result, err := _m.Edges.EmployeeOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryEmployee().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *EmployeeAuth) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *File) Message(ctx context.Context) (*Message, error) {
	result, err := _m.Edges.MessageOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryMessage().Only(ctx)
	}
	return result, err
}

func (_m *File) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Message) Chat(ctx context.Context) (*Chat, error) {
	result, err := _m.Edges.ChatOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryChat().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Message) Employee(ctx context.Context) (result []*Employee, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedEmployee(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.EmployeeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryEmployee().All(ctx)
	}
	return result, err
}

func (_m *Message) Text(ctx context.Context) (*Text, error) {
	result, err := _m.Edges.TextOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryText().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Message) File(ctx context.Context) (*File, error) {
	result, err := _m.Edges.FileOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Message) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Pipeline) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Pipeline) Stages(ctx context.Context) (result []*Stage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedStages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.StagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryStages().All(ctx)
	}
	return result, err
}

func (_m *Queue) Stages(ctx context.Context) (result []*Stage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedStages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.StagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryStages().All(ctx)
	}
	return result, err
}

func (_m *Queue) Employees(ctx context.Context) (result []*Employee, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedEmployees(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.EmployeesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryEmployees().All(ctx)
	}
	return result, err
}

func (_m *Queue) Department(ctx context.Context) (result []*Department, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDepartment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DepartmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDepartment().All(ctx)
	}
	return result, err
}

func (_m *Queue) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Rbac) Department(ctx context.Context) (*Department, error) {
	result, err := _m.Edges.DepartmentOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryDepartment().Only(ctx)
	}
	return result, err
}

func (_m *Rbac) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Stage) Pipeline(ctx context.Context) (*Pipeline, error) {
	result, err := _m.Edges.PipelineOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryPipeline().Only(ctx)
	}
	return result, err
}

func (_m *Stage) Deals(ctx context.Context) (result []*Deal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedDeals(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.DealsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryDeals().All(ctx)
	}
	return result, err
}

func (_m *Stage) Queue(ctx context.Context) (*Queue, error) {
	result, err := _m.Edges.QueueOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryQueue().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Stage) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Text) Message(ctx context.Context) (*Message, error) {
	result, err := _m.Edges.MessageOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryMessage().Only(ctx)
	}
	return result, err
}

func (_m *Text) Tenant(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}
