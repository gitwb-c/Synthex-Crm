// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/crmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dealcrmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dropdownlist"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/google/uuid"
)

// CrmFieldUpdate is the builder for updating CrmField entities.
type CrmFieldUpdate struct {
	config
	hooks    []Hook
	mutation *CrmFieldMutation
}

// Where appends a list predicates to the CrmFieldUpdate builder.
func (_u *CrmFieldUpdate) Where(ps ...predicate.CrmField) *CrmFieldUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *CrmFieldUpdate) SetName(v string) *CrmFieldUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CrmFieldUpdate) SetNillableName(v *string) *CrmFieldUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSection sets the "section" field.
func (_u *CrmFieldUpdate) SetSection(v string) *CrmFieldUpdate {
	_u.mutation.SetSection(v)
	return _u
}

// SetNillableSection sets the "section" field if the given value is not nil.
func (_u *CrmFieldUpdate) SetNillableSection(v *string) *CrmFieldUpdate {
	if v != nil {
		_u.SetSection(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *CrmFieldUpdate) SetUpdatedAt(v time.Time) *CrmFieldUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddDropdownListIDs adds the "dropdownList" edge to the DropdownList entity by IDs.
func (_u *CrmFieldUpdate) AddDropdownListIDs(ids ...uuid.UUID) *CrmFieldUpdate {
	_u.mutation.AddDropdownListIDs(ids...)
	return _u
}

// AddDropdownList adds the "dropdownList" edges to the DropdownList entity.
func (_u *CrmFieldUpdate) AddDropdownList(v ...*DropdownList) *CrmFieldUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDropdownListIDs(ids...)
}

// AddDealCrmFieldIDs adds the "dealCrmField" edge to the DealCrmField entity by IDs.
func (_u *CrmFieldUpdate) AddDealCrmFieldIDs(ids ...uuid.UUID) *CrmFieldUpdate {
	_u.mutation.AddDealCrmFieldIDs(ids...)
	return _u
}

// AddDealCrmField adds the "dealCrmField" edges to the DealCrmField entity.
func (_u *CrmFieldUpdate) AddDealCrmField(v ...*DealCrmField) *CrmFieldUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDealCrmFieldIDs(ids...)
}

// Mutation returns the CrmFieldMutation object of the builder.
func (_u *CrmFieldUpdate) Mutation() *CrmFieldMutation {
	return _u.mutation
}

// ClearDropdownList clears all "dropdownList" edges to the DropdownList entity.
func (_u *CrmFieldUpdate) ClearDropdownList() *CrmFieldUpdate {
	_u.mutation.ClearDropdownList()
	return _u
}

// RemoveDropdownListIDs removes the "dropdownList" edge to DropdownList entities by IDs.
func (_u *CrmFieldUpdate) RemoveDropdownListIDs(ids ...uuid.UUID) *CrmFieldUpdate {
	_u.mutation.RemoveDropdownListIDs(ids...)
	return _u
}

// RemoveDropdownList removes "dropdownList" edges to DropdownList entities.
func (_u *CrmFieldUpdate) RemoveDropdownList(v ...*DropdownList) *CrmFieldUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDropdownListIDs(ids...)
}

// ClearDealCrmField clears all "dealCrmField" edges to the DealCrmField entity.
func (_u *CrmFieldUpdate) ClearDealCrmField() *CrmFieldUpdate {
	_u.mutation.ClearDealCrmField()
	return _u
}

// RemoveDealCrmFieldIDs removes the "dealCrmField" edge to DealCrmField entities by IDs.
func (_u *CrmFieldUpdate) RemoveDealCrmFieldIDs(ids ...uuid.UUID) *CrmFieldUpdate {
	_u.mutation.RemoveDealCrmFieldIDs(ids...)
	return _u
}

// RemoveDealCrmField removes "dealCrmField" edges to DealCrmField entities.
func (_u *CrmFieldUpdate) RemoveDealCrmField(v ...*DealCrmField) *CrmFieldUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDealCrmFieldIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CrmFieldUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CrmFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CrmFieldUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CrmFieldUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CrmFieldUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := crmfield.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CrmFieldUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := crmfield.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CrmField.name": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CrmField.tenant"`)
	}
	return nil
}

func (_u *CrmFieldUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(crmfield.Table, crmfield.Columns, sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(crmfield.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Section(); ok {
		_spec.SetField(crmfield.FieldSection, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(crmfield.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DropdownListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crmfield.DropdownListTable,
			Columns: crmfield.DropdownListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dropdownlist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDropdownListIDs(); len(nodes) > 0 && !_u.mutation.DropdownListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crmfield.DropdownListTable,
			Columns: crmfield.DropdownListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dropdownlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DropdownListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crmfield.DropdownListTable,
			Columns: crmfield.DropdownListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dropdownlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DealCrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   crmfield.DealCrmFieldTable,
			Columns: []string{crmfield.DealCrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealcrmfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDealCrmFieldIDs(); len(nodes) > 0 && !_u.mutation.DealCrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   crmfield.DealCrmFieldTable,
			Columns: []string{crmfield.DealCrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealcrmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealCrmFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   crmfield.DealCrmFieldTable,
			Columns: []string{crmfield.DealCrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealcrmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crmfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CrmFieldUpdateOne is the builder for updating a single CrmField entity.
type CrmFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CrmFieldMutation
}

// SetName sets the "name" field.
func (_u *CrmFieldUpdateOne) SetName(v string) *CrmFieldUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CrmFieldUpdateOne) SetNillableName(v *string) *CrmFieldUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSection sets the "section" field.
func (_u *CrmFieldUpdateOne) SetSection(v string) *CrmFieldUpdateOne {
	_u.mutation.SetSection(v)
	return _u
}

// SetNillableSection sets the "section" field if the given value is not nil.
func (_u *CrmFieldUpdateOne) SetNillableSection(v *string) *CrmFieldUpdateOne {
	if v != nil {
		_u.SetSection(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *CrmFieldUpdateOne) SetUpdatedAt(v time.Time) *CrmFieldUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddDropdownListIDs adds the "dropdownList" edge to the DropdownList entity by IDs.
func (_u *CrmFieldUpdateOne) AddDropdownListIDs(ids ...uuid.UUID) *CrmFieldUpdateOne {
	_u.mutation.AddDropdownListIDs(ids...)
	return _u
}

// AddDropdownList adds the "dropdownList" edges to the DropdownList entity.
func (_u *CrmFieldUpdateOne) AddDropdownList(v ...*DropdownList) *CrmFieldUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDropdownListIDs(ids...)
}

// AddDealCrmFieldIDs adds the "dealCrmField" edge to the DealCrmField entity by IDs.
func (_u *CrmFieldUpdateOne) AddDealCrmFieldIDs(ids ...uuid.UUID) *CrmFieldUpdateOne {
	_u.mutation.AddDealCrmFieldIDs(ids...)
	return _u
}

// AddDealCrmField adds the "dealCrmField" edges to the DealCrmField entity.
func (_u *CrmFieldUpdateOne) AddDealCrmField(v ...*DealCrmField) *CrmFieldUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDealCrmFieldIDs(ids...)
}

// Mutation returns the CrmFieldMutation object of the builder.
func (_u *CrmFieldUpdateOne) Mutation() *CrmFieldMutation {
	return _u.mutation
}

// ClearDropdownList clears all "dropdownList" edges to the DropdownList entity.
func (_u *CrmFieldUpdateOne) ClearDropdownList() *CrmFieldUpdateOne {
	_u.mutation.ClearDropdownList()
	return _u
}

// RemoveDropdownListIDs removes the "dropdownList" edge to DropdownList entities by IDs.
func (_u *CrmFieldUpdateOne) RemoveDropdownListIDs(ids ...uuid.UUID) *CrmFieldUpdateOne {
	_u.mutation.RemoveDropdownListIDs(ids...)
	return _u
}

// RemoveDropdownList removes "dropdownList" edges to DropdownList entities.
func (_u *CrmFieldUpdateOne) RemoveDropdownList(v ...*DropdownList) *CrmFieldUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDropdownListIDs(ids...)
}

// ClearDealCrmField clears all "dealCrmField" edges to the DealCrmField entity.
func (_u *CrmFieldUpdateOne) ClearDealCrmField() *CrmFieldUpdateOne {
	_u.mutation.ClearDealCrmField()
	return _u
}

// RemoveDealCrmFieldIDs removes the "dealCrmField" edge to DealCrmField entities by IDs.
func (_u *CrmFieldUpdateOne) RemoveDealCrmFieldIDs(ids ...uuid.UUID) *CrmFieldUpdateOne {
	_u.mutation.RemoveDealCrmFieldIDs(ids...)
	return _u
}

// RemoveDealCrmField removes "dealCrmField" edges to DealCrmField entities.
func (_u *CrmFieldUpdateOne) RemoveDealCrmField(v ...*DealCrmField) *CrmFieldUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDealCrmFieldIDs(ids...)
}

// Where appends a list predicates to the CrmFieldUpdate builder.
func (_u *CrmFieldUpdateOne) Where(ps ...predicate.CrmField) *CrmFieldUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CrmFieldUpdateOne) Select(field string, fields ...string) *CrmFieldUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CrmField entity.
func (_u *CrmFieldUpdateOne) Save(ctx context.Context) (*CrmField, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CrmFieldUpdateOne) SaveX(ctx context.Context) *CrmField {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CrmFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CrmFieldUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CrmFieldUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := crmfield.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CrmFieldUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := crmfield.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CrmField.name": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CrmField.tenant"`)
	}
	return nil
}

func (_u *CrmFieldUpdateOne) sqlSave(ctx context.Context) (_node *CrmField, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(crmfield.Table, crmfield.Columns, sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CrmField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, crmfield.FieldID)
		for _, f := range fields {
			if !crmfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != crmfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(crmfield.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Section(); ok {
		_spec.SetField(crmfield.FieldSection, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(crmfield.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DropdownListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crmfield.DropdownListTable,
			Columns: crmfield.DropdownListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dropdownlist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDropdownListIDs(); len(nodes) > 0 && !_u.mutation.DropdownListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crmfield.DropdownListTable,
			Columns: crmfield.DropdownListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dropdownlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DropdownListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crmfield.DropdownListTable,
			Columns: crmfield.DropdownListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dropdownlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DealCrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   crmfield.DealCrmFieldTable,
			Columns: []string{crmfield.DealCrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealcrmfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDealCrmFieldIDs(); len(nodes) > 0 && !_u.mutation.DealCrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   crmfield.DealCrmFieldTable,
			Columns: []string{crmfield.DealCrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealcrmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealCrmFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   crmfield.DealCrmFieldTable,
			Columns: []string{crmfield.DealCrmFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealcrmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CrmField{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crmfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
