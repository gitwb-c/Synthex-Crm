// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"crm.saas/backend/internal/ent/migrate"

	"crm.saas/backend/internal/ent/chat"
	"crm.saas/backend/internal/ent/costumer"
	"crm.saas/backend/internal/ent/deal"
	"crm.saas/backend/internal/ent/department"
	"crm.saas/backend/internal/ent/employee"
	"crm.saas/backend/internal/ent/employeeauth"
	entfield "crm.saas/backend/internal/ent/field"
	"crm.saas/backend/internal/ent/form"
	"crm.saas/backend/internal/ent/message"
	"crm.saas/backend/internal/ent/pipeline"
	"crm.saas/backend/internal/ent/queue"
	"crm.saas/backend/internal/ent/stage"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chat is the client for interacting with the Chat builders.
	Chat *ChatClient
	// Costumer is the client for interacting with the Costumer builders.
	Costumer *CostumerClient
	// Deal is the client for interacting with the Deal builders.
	Deal *DealClient
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// EmployeeAuth is the client for interacting with the EmployeeAuth builders.
	EmployeeAuth *EmployeeAuthClient
	// Field is the client for interacting with the Field builders.
	Field *FieldClient
	// Form is the client for interacting with the Form builders.
	Form *FormClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// Pipeline is the client for interacting with the Pipeline builders.
	Pipeline *PipelineClient
	// Queue is the client for interacting with the Queue builders.
	Queue *QueueClient
	// Stage is the client for interacting with the Stage builders.
	Stage *StageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chat = NewChatClient(c.config)
	c.Costumer = NewCostumerClient(c.config)
	c.Deal = NewDealClient(c.config)
	c.Department = NewDepartmentClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.EmployeeAuth = NewEmployeeAuthClient(c.config)
	c.Field = NewFieldClient(c.config)
	c.Form = NewFormClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.Pipeline = NewPipelineClient(c.config)
	c.Queue = NewQueueClient(c.config)
	c.Stage = NewStageClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Chat:         NewChatClient(cfg),
		Costumer:     NewCostumerClient(cfg),
		Deal:         NewDealClient(cfg),
		Department:   NewDepartmentClient(cfg),
		Employee:     NewEmployeeClient(cfg),
		EmployeeAuth: NewEmployeeAuthClient(cfg),
		Field:        NewFieldClient(cfg),
		Form:         NewFormClient(cfg),
		Message:      NewMessageClient(cfg),
		Pipeline:     NewPipelineClient(cfg),
		Queue:        NewQueueClient(cfg),
		Stage:        NewStageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Chat:         NewChatClient(cfg),
		Costumer:     NewCostumerClient(cfg),
		Deal:         NewDealClient(cfg),
		Department:   NewDepartmentClient(cfg),
		Employee:     NewEmployeeClient(cfg),
		EmployeeAuth: NewEmployeeAuthClient(cfg),
		Field:        NewFieldClient(cfg),
		Form:         NewFormClient(cfg),
		Message:      NewMessageClient(cfg),
		Pipeline:     NewPipelineClient(cfg),
		Queue:        NewQueueClient(cfg),
		Stage:        NewStageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chat.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Chat, c.Costumer, c.Deal, c.Department, c.Employee, c.EmployeeAuth, c.Field,
		c.Form, c.Message, c.Pipeline, c.Queue, c.Stage,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Chat, c.Costumer, c.Deal, c.Department, c.Employee, c.EmployeeAuth, c.Field,
		c.Form, c.Message, c.Pipeline, c.Queue, c.Stage,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChatMutation:
		return c.Chat.mutate(ctx, m)
	case *CostumerMutation:
		return c.Costumer.mutate(ctx, m)
	case *DealMutation:
		return c.Deal.mutate(ctx, m)
	case *DepartmentMutation:
		return c.Department.mutate(ctx, m)
	case *EmployeeMutation:
		return c.Employee.mutate(ctx, m)
	case *EmployeeAuthMutation:
		return c.EmployeeAuth.mutate(ctx, m)
	case *FieldMutation:
		return c.Field.mutate(ctx, m)
	case *FormMutation:
		return c.Form.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *PipelineMutation:
		return c.Pipeline.mutate(ctx, m)
	case *QueueMutation:
		return c.Queue.mutate(ctx, m)
	case *StageMutation:
		return c.Stage.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChatClient is a client for the Chat schema.
type ChatClient struct {
	config
}

// NewChatClient returns a client for the Chat from the given config.
func NewChatClient(c config) *ChatClient {
	return &ChatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chat.Hooks(f(g(h())))`.
func (c *ChatClient) Use(hooks ...Hook) {
	c.hooks.Chat = append(c.hooks.Chat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chat.Intercept(f(g(h())))`.
func (c *ChatClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chat = append(c.inters.Chat, interceptors...)
}

// Create returns a builder for creating a Chat entity.
func (c *ChatClient) Create() *ChatCreate {
	mutation := newChatMutation(c.config, OpCreate)
	return &ChatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chat entities.
func (c *ChatClient) CreateBulk(builders ...*ChatCreate) *ChatCreateBulk {
	return &ChatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChatClient) MapCreateBulk(slice any, setFunc func(*ChatCreate, int)) *ChatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChatCreateBulk{err: fmt.Errorf("calling to ChatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chat.
func (c *ChatClient) Update() *ChatUpdate {
	mutation := newChatMutation(c.config, OpUpdate)
	return &ChatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatClient) UpdateOne(_m *Chat) *ChatUpdateOne {
	mutation := newChatMutation(c.config, OpUpdateOne, withChat(_m))
	return &ChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatClient) UpdateOneID(id int) *ChatUpdateOne {
	mutation := newChatMutation(c.config, OpUpdateOne, withChatID(id))
	return &ChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chat.
func (c *ChatClient) Delete() *ChatDelete {
	mutation := newChatMutation(c.config, OpDelete)
	return &ChatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChatClient) DeleteOne(_m *Chat) *ChatDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChatClient) DeleteOneID(id int) *ChatDeleteOne {
	builder := c.Delete().Where(chat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatDeleteOne{builder}
}

// Query returns a query builder for Chat.
func (c *ChatClient) Query() *ChatQuery {
	return &ChatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChat},
		inters: c.Interceptors(),
	}
}

// Get returns a Chat entity by its id.
func (c *ChatClient) Get(ctx context.Context, id int) (*Chat, error) {
	return c.Query().Where(chat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatClient) GetX(ctx context.Context, id int) *Chat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChatClient) Hooks() []Hook {
	return c.hooks.Chat
}

// Interceptors returns the client interceptors.
func (c *ChatClient) Interceptors() []Interceptor {
	return c.inters.Chat
}

func (c *ChatClient) mutate(ctx context.Context, m *ChatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chat mutation op: %q", m.Op())
	}
}

// CostumerClient is a client for the Costumer schema.
type CostumerClient struct {
	config
}

// NewCostumerClient returns a client for the Costumer from the given config.
func NewCostumerClient(c config) *CostumerClient {
	return &CostumerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `costumer.Hooks(f(g(h())))`.
func (c *CostumerClient) Use(hooks ...Hook) {
	c.hooks.Costumer = append(c.hooks.Costumer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `costumer.Intercept(f(g(h())))`.
func (c *CostumerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Costumer = append(c.inters.Costumer, interceptors...)
}

// Create returns a builder for creating a Costumer entity.
func (c *CostumerClient) Create() *CostumerCreate {
	mutation := newCostumerMutation(c.config, OpCreate)
	return &CostumerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Costumer entities.
func (c *CostumerClient) CreateBulk(builders ...*CostumerCreate) *CostumerCreateBulk {
	return &CostumerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CostumerClient) MapCreateBulk(slice any, setFunc func(*CostumerCreate, int)) *CostumerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CostumerCreateBulk{err: fmt.Errorf("calling to CostumerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CostumerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CostumerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Costumer.
func (c *CostumerClient) Update() *CostumerUpdate {
	mutation := newCostumerMutation(c.config, OpUpdate)
	return &CostumerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CostumerClient) UpdateOne(_m *Costumer) *CostumerUpdateOne {
	mutation := newCostumerMutation(c.config, OpUpdateOne, withCostumer(_m))
	return &CostumerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CostumerClient) UpdateOneID(id int) *CostumerUpdateOne {
	mutation := newCostumerMutation(c.config, OpUpdateOne, withCostumerID(id))
	return &CostumerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Costumer.
func (c *CostumerClient) Delete() *CostumerDelete {
	mutation := newCostumerMutation(c.config, OpDelete)
	return &CostumerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CostumerClient) DeleteOne(_m *Costumer) *CostumerDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CostumerClient) DeleteOneID(id int) *CostumerDeleteOne {
	builder := c.Delete().Where(costumer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CostumerDeleteOne{builder}
}

// Query returns a query builder for Costumer.
func (c *CostumerClient) Query() *CostumerQuery {
	return &CostumerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCostumer},
		inters: c.Interceptors(),
	}
}

// Get returns a Costumer entity by its id.
func (c *CostumerClient) Get(ctx context.Context, id int) (*Costumer, error) {
	return c.Query().Where(costumer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CostumerClient) GetX(ctx context.Context, id int) *Costumer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CostumerClient) Hooks() []Hook {
	return c.hooks.Costumer
}

// Interceptors returns the client interceptors.
func (c *CostumerClient) Interceptors() []Interceptor {
	return c.inters.Costumer
}

func (c *CostumerClient) mutate(ctx context.Context, m *CostumerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CostumerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CostumerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CostumerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CostumerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Costumer mutation op: %q", m.Op())
	}
}

// DealClient is a client for the Deal schema.
type DealClient struct {
	config
}

// NewDealClient returns a client for the Deal from the given config.
func NewDealClient(c config) *DealClient {
	return &DealClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deal.Hooks(f(g(h())))`.
func (c *DealClient) Use(hooks ...Hook) {
	c.hooks.Deal = append(c.hooks.Deal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deal.Intercept(f(g(h())))`.
func (c *DealClient) Intercept(interceptors ...Interceptor) {
	c.inters.Deal = append(c.inters.Deal, interceptors...)
}

// Create returns a builder for creating a Deal entity.
func (c *DealClient) Create() *DealCreate {
	mutation := newDealMutation(c.config, OpCreate)
	return &DealCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Deal entities.
func (c *DealClient) CreateBulk(builders ...*DealCreate) *DealCreateBulk {
	return &DealCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DealClient) MapCreateBulk(slice any, setFunc func(*DealCreate, int)) *DealCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DealCreateBulk{err: fmt.Errorf("calling to DealClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DealCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DealCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Deal.
func (c *DealClient) Update() *DealUpdate {
	mutation := newDealMutation(c.config, OpUpdate)
	return &DealUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DealClient) UpdateOne(_m *Deal) *DealUpdateOne {
	mutation := newDealMutation(c.config, OpUpdateOne, withDeal(_m))
	return &DealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DealClient) UpdateOneID(id int) *DealUpdateOne {
	mutation := newDealMutation(c.config, OpUpdateOne, withDealID(id))
	return &DealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deal.
func (c *DealClient) Delete() *DealDelete {
	mutation := newDealMutation(c.config, OpDelete)
	return &DealDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DealClient) DeleteOne(_m *Deal) *DealDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DealClient) DeleteOneID(id int) *DealDeleteOne {
	builder := c.Delete().Where(deal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DealDeleteOne{builder}
}

// Query returns a query builder for Deal.
func (c *DealClient) Query() *DealQuery {
	return &DealQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeal},
		inters: c.Interceptors(),
	}
}

// Get returns a Deal entity by its id.
func (c *DealClient) Get(ctx context.Context, id int) (*Deal, error) {
	return c.Query().Where(deal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DealClient) GetX(ctx context.Context, id int) *Deal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DealClient) Hooks() []Hook {
	return c.hooks.Deal
}

// Interceptors returns the client interceptors.
func (c *DealClient) Interceptors() []Interceptor {
	return c.inters.Deal
}

func (c *DealClient) mutate(ctx context.Context, m *DealMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DealCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DealUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DealDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Deal mutation op: %q", m.Op())
	}
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `department.Intercept(f(g(h())))`.
func (c *DepartmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Department = append(c.inters.Department, interceptors...)
}

// Create returns a builder for creating a Department entity.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Department entities.
func (c *DepartmentClient) CreateBulk(builders ...*DepartmentCreate) *DepartmentCreateBulk {
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepartmentClient) MapCreateBulk(slice any, setFunc func(*DepartmentCreate, int)) *DepartmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepartmentCreateBulk{err: fmt.Errorf("calling to DepartmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepartmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(_m *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(_m))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepartmentClient) DeleteOne(_m *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Query returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDepartment},
		inters: c.Interceptors(),
	}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// Interceptors returns the client interceptors.
func (c *DepartmentClient) Interceptors() []Interceptor {
	return c.inters.Department
}

func (c *DepartmentClient) mutate(ctx context.Context, m *DepartmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Department mutation op: %q", m.Op())
	}
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employee.Intercept(f(g(h())))`.
func (c *EmployeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employee = append(c.inters.Employee, interceptors...)
}

// Create returns a builder for creating a Employee entity.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employee entities.
func (c *EmployeeClient) CreateBulk(builders ...*EmployeeCreate) *EmployeeCreateBulk {
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmployeeClient) MapCreateBulk(slice any, setFunc func(*EmployeeCreate, int)) *EmployeeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmployeeCreateBulk{err: fmt.Errorf("calling to EmployeeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmployeeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(_m *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(_m))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeClient) DeleteOne(_m *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Query returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployee},
		inters: c.Interceptors(),
	}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// Interceptors returns the client interceptors.
func (c *EmployeeClient) Interceptors() []Interceptor {
	return c.inters.Employee
}

func (c *EmployeeClient) mutate(ctx context.Context, m *EmployeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Employee mutation op: %q", m.Op())
	}
}

// EmployeeAuthClient is a client for the EmployeeAuth schema.
type EmployeeAuthClient struct {
	config
}

// NewEmployeeAuthClient returns a client for the EmployeeAuth from the given config.
func NewEmployeeAuthClient(c config) *EmployeeAuthClient {
	return &EmployeeAuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeeauth.Hooks(f(g(h())))`.
func (c *EmployeeAuthClient) Use(hooks ...Hook) {
	c.hooks.EmployeeAuth = append(c.hooks.EmployeeAuth, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeeauth.Intercept(f(g(h())))`.
func (c *EmployeeAuthClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeAuth = append(c.inters.EmployeeAuth, interceptors...)
}

// Create returns a builder for creating a EmployeeAuth entity.
func (c *EmployeeAuthClient) Create() *EmployeeAuthCreate {
	mutation := newEmployeeAuthMutation(c.config, OpCreate)
	return &EmployeeAuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeAuth entities.
func (c *EmployeeAuthClient) CreateBulk(builders ...*EmployeeAuthCreate) *EmployeeAuthCreateBulk {
	return &EmployeeAuthCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmployeeAuthClient) MapCreateBulk(slice any, setFunc func(*EmployeeAuthCreate, int)) *EmployeeAuthCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmployeeAuthCreateBulk{err: fmt.Errorf("calling to EmployeeAuthClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmployeeAuthCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmployeeAuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeAuth.
func (c *EmployeeAuthClient) Update() *EmployeeAuthUpdate {
	mutation := newEmployeeAuthMutation(c.config, OpUpdate)
	return &EmployeeAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeAuthClient) UpdateOne(_m *EmployeeAuth) *EmployeeAuthUpdateOne {
	mutation := newEmployeeAuthMutation(c.config, OpUpdateOne, withEmployeeAuth(_m))
	return &EmployeeAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeAuthClient) UpdateOneID(id int) *EmployeeAuthUpdateOne {
	mutation := newEmployeeAuthMutation(c.config, OpUpdateOne, withEmployeeAuthID(id))
	return &EmployeeAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeAuth.
func (c *EmployeeAuthClient) Delete() *EmployeeAuthDelete {
	mutation := newEmployeeAuthMutation(c.config, OpDelete)
	return &EmployeeAuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeAuthClient) DeleteOne(_m *EmployeeAuth) *EmployeeAuthDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeAuthClient) DeleteOneID(id int) *EmployeeAuthDeleteOne {
	builder := c.Delete().Where(employeeauth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeAuthDeleteOne{builder}
}

// Query returns a query builder for EmployeeAuth.
func (c *EmployeeAuthClient) Query() *EmployeeAuthQuery {
	return &EmployeeAuthQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeAuth},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeAuth entity by its id.
func (c *EmployeeAuthClient) Get(ctx context.Context, id int) (*EmployeeAuth, error) {
	return c.Query().Where(employeeauth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeAuthClient) GetX(ctx context.Context, id int) *EmployeeAuth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeAuthClient) Hooks() []Hook {
	return c.hooks.EmployeeAuth
}

// Interceptors returns the client interceptors.
func (c *EmployeeAuthClient) Interceptors() []Interceptor {
	return c.inters.EmployeeAuth
}

func (c *EmployeeAuthClient) mutate(ctx context.Context, m *EmployeeAuthMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeAuthCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeAuthDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeAuth mutation op: %q", m.Op())
	}
}

// FieldClient is a client for the Field schema.
type FieldClient struct {
	config
}

// NewFieldClient returns a client for the Field from the given config.
func NewFieldClient(c config) *FieldClient {
	return &FieldClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entfield.Hooks(f(g(h())))`.
func (c *FieldClient) Use(hooks ...Hook) {
	c.hooks.Field = append(c.hooks.Field, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entfield.Intercept(f(g(h())))`.
func (c *FieldClient) Intercept(interceptors ...Interceptor) {
	c.inters.Field = append(c.inters.Field, interceptors...)
}

// Create returns a builder for creating a Field entity.
func (c *FieldClient) Create() *FieldCreate {
	mutation := newFieldMutation(c.config, OpCreate)
	return &FieldCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Field entities.
func (c *FieldClient) CreateBulk(builders ...*FieldCreate) *FieldCreateBulk {
	return &FieldCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FieldClient) MapCreateBulk(slice any, setFunc func(*FieldCreate, int)) *FieldCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FieldCreateBulk{err: fmt.Errorf("calling to FieldClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FieldCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FieldCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Field.
func (c *FieldClient) Update() *FieldUpdate {
	mutation := newFieldMutation(c.config, OpUpdate)
	return &FieldUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FieldClient) UpdateOne(_m *Field) *FieldUpdateOne {
	mutation := newFieldMutation(c.config, OpUpdateOne, withField(_m))
	return &FieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FieldClient) UpdateOneID(id int) *FieldUpdateOne {
	mutation := newFieldMutation(c.config, OpUpdateOne, withFieldID(id))
	return &FieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Field.
func (c *FieldClient) Delete() *FieldDelete {
	mutation := newFieldMutation(c.config, OpDelete)
	return &FieldDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FieldClient) DeleteOne(_m *Field) *FieldDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FieldClient) DeleteOneID(id int) *FieldDeleteOne {
	builder := c.Delete().Where(entfield.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FieldDeleteOne{builder}
}

// Query returns a query builder for Field.
func (c *FieldClient) Query() *FieldQuery {
	return &FieldQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeField},
		inters: c.Interceptors(),
	}
}

// Get returns a Field entity by its id.
func (c *FieldClient) Get(ctx context.Context, id int) (*Field, error) {
	return c.Query().Where(entfield.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FieldClient) GetX(ctx context.Context, id int) *Field {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FieldClient) Hooks() []Hook {
	return c.hooks.Field
}

// Interceptors returns the client interceptors.
func (c *FieldClient) Interceptors() []Interceptor {
	return c.inters.Field
}

func (c *FieldClient) mutate(ctx context.Context, m *FieldMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FieldCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FieldUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FieldDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Field mutation op: %q", m.Op())
	}
}

// FormClient is a client for the Form schema.
type FormClient struct {
	config
}

// NewFormClient returns a client for the Form from the given config.
func NewFormClient(c config) *FormClient {
	return &FormClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `form.Hooks(f(g(h())))`.
func (c *FormClient) Use(hooks ...Hook) {
	c.hooks.Form = append(c.hooks.Form, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `form.Intercept(f(g(h())))`.
func (c *FormClient) Intercept(interceptors ...Interceptor) {
	c.inters.Form = append(c.inters.Form, interceptors...)
}

// Create returns a builder for creating a Form entity.
func (c *FormClient) Create() *FormCreate {
	mutation := newFormMutation(c.config, OpCreate)
	return &FormCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Form entities.
func (c *FormClient) CreateBulk(builders ...*FormCreate) *FormCreateBulk {
	return &FormCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FormClient) MapCreateBulk(slice any, setFunc func(*FormCreate, int)) *FormCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FormCreateBulk{err: fmt.Errorf("calling to FormClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FormCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FormCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Form.
func (c *FormClient) Update() *FormUpdate {
	mutation := newFormMutation(c.config, OpUpdate)
	return &FormUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormClient) UpdateOne(_m *Form) *FormUpdateOne {
	mutation := newFormMutation(c.config, OpUpdateOne, withForm(_m))
	return &FormUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormClient) UpdateOneID(id int) *FormUpdateOne {
	mutation := newFormMutation(c.config, OpUpdateOne, withFormID(id))
	return &FormUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Form.
func (c *FormClient) Delete() *FormDelete {
	mutation := newFormMutation(c.config, OpDelete)
	return &FormDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FormClient) DeleteOne(_m *Form) *FormDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FormClient) DeleteOneID(id int) *FormDeleteOne {
	builder := c.Delete().Where(form.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormDeleteOne{builder}
}

// Query returns a query builder for Form.
func (c *FormClient) Query() *FormQuery {
	return &FormQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeForm},
		inters: c.Interceptors(),
	}
}

// Get returns a Form entity by its id.
func (c *FormClient) Get(ctx context.Context, id int) (*Form, error) {
	return c.Query().Where(form.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormClient) GetX(ctx context.Context, id int) *Form {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FormClient) Hooks() []Hook {
	return c.hooks.Form
}

// Interceptors returns the client interceptors.
func (c *FormClient) Interceptors() []Interceptor {
	return c.inters.Form
}

func (c *FormClient) mutate(ctx context.Context, m *FormMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FormCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FormUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FormUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FormDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Form mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(_m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(_m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(_m *Message) *MessageDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id int) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// PipelineClient is a client for the Pipeline schema.
type PipelineClient struct {
	config
}

// NewPipelineClient returns a client for the Pipeline from the given config.
func NewPipelineClient(c config) *PipelineClient {
	return &PipelineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pipeline.Hooks(f(g(h())))`.
func (c *PipelineClient) Use(hooks ...Hook) {
	c.hooks.Pipeline = append(c.hooks.Pipeline, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pipeline.Intercept(f(g(h())))`.
func (c *PipelineClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pipeline = append(c.inters.Pipeline, interceptors...)
}

// Create returns a builder for creating a Pipeline entity.
func (c *PipelineClient) Create() *PipelineCreate {
	mutation := newPipelineMutation(c.config, OpCreate)
	return &PipelineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pipeline entities.
func (c *PipelineClient) CreateBulk(builders ...*PipelineCreate) *PipelineCreateBulk {
	return &PipelineCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PipelineClient) MapCreateBulk(slice any, setFunc func(*PipelineCreate, int)) *PipelineCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PipelineCreateBulk{err: fmt.Errorf("calling to PipelineClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PipelineCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PipelineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pipeline.
func (c *PipelineClient) Update() *PipelineUpdate {
	mutation := newPipelineMutation(c.config, OpUpdate)
	return &PipelineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PipelineClient) UpdateOne(_m *Pipeline) *PipelineUpdateOne {
	mutation := newPipelineMutation(c.config, OpUpdateOne, withPipeline(_m))
	return &PipelineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PipelineClient) UpdateOneID(id int) *PipelineUpdateOne {
	mutation := newPipelineMutation(c.config, OpUpdateOne, withPipelineID(id))
	return &PipelineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pipeline.
func (c *PipelineClient) Delete() *PipelineDelete {
	mutation := newPipelineMutation(c.config, OpDelete)
	return &PipelineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PipelineClient) DeleteOne(_m *Pipeline) *PipelineDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PipelineClient) DeleteOneID(id int) *PipelineDeleteOne {
	builder := c.Delete().Where(pipeline.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PipelineDeleteOne{builder}
}

// Query returns a query builder for Pipeline.
func (c *PipelineClient) Query() *PipelineQuery {
	return &PipelineQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePipeline},
		inters: c.Interceptors(),
	}
}

// Get returns a Pipeline entity by its id.
func (c *PipelineClient) Get(ctx context.Context, id int) (*Pipeline, error) {
	return c.Query().Where(pipeline.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PipelineClient) GetX(ctx context.Context, id int) *Pipeline {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PipelineClient) Hooks() []Hook {
	return c.hooks.Pipeline
}

// Interceptors returns the client interceptors.
func (c *PipelineClient) Interceptors() []Interceptor {
	return c.inters.Pipeline
}

func (c *PipelineClient) mutate(ctx context.Context, m *PipelineMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PipelineCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PipelineUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PipelineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PipelineDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pipeline mutation op: %q", m.Op())
	}
}

// QueueClient is a client for the Queue schema.
type QueueClient struct {
	config
}

// NewQueueClient returns a client for the Queue from the given config.
func NewQueueClient(c config) *QueueClient {
	return &QueueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `queue.Hooks(f(g(h())))`.
func (c *QueueClient) Use(hooks ...Hook) {
	c.hooks.Queue = append(c.hooks.Queue, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `queue.Intercept(f(g(h())))`.
func (c *QueueClient) Intercept(interceptors ...Interceptor) {
	c.inters.Queue = append(c.inters.Queue, interceptors...)
}

// Create returns a builder for creating a Queue entity.
func (c *QueueClient) Create() *QueueCreate {
	mutation := newQueueMutation(c.config, OpCreate)
	return &QueueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Queue entities.
func (c *QueueClient) CreateBulk(builders ...*QueueCreate) *QueueCreateBulk {
	return &QueueCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QueueClient) MapCreateBulk(slice any, setFunc func(*QueueCreate, int)) *QueueCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QueueCreateBulk{err: fmt.Errorf("calling to QueueClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QueueCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QueueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Queue.
func (c *QueueClient) Update() *QueueUpdate {
	mutation := newQueueMutation(c.config, OpUpdate)
	return &QueueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QueueClient) UpdateOne(_m *Queue) *QueueUpdateOne {
	mutation := newQueueMutation(c.config, OpUpdateOne, withQueue(_m))
	return &QueueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QueueClient) UpdateOneID(id int) *QueueUpdateOne {
	mutation := newQueueMutation(c.config, OpUpdateOne, withQueueID(id))
	return &QueueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Queue.
func (c *QueueClient) Delete() *QueueDelete {
	mutation := newQueueMutation(c.config, OpDelete)
	return &QueueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QueueClient) DeleteOne(_m *Queue) *QueueDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QueueClient) DeleteOneID(id int) *QueueDeleteOne {
	builder := c.Delete().Where(queue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QueueDeleteOne{builder}
}

// Query returns a query builder for Queue.
func (c *QueueClient) Query() *QueueQuery {
	return &QueueQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQueue},
		inters: c.Interceptors(),
	}
}

// Get returns a Queue entity by its id.
func (c *QueueClient) Get(ctx context.Context, id int) (*Queue, error) {
	return c.Query().Where(queue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QueueClient) GetX(ctx context.Context, id int) *Queue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *QueueClient) Hooks() []Hook {
	return c.hooks.Queue
}

// Interceptors returns the client interceptors.
func (c *QueueClient) Interceptors() []Interceptor {
	return c.inters.Queue
}

func (c *QueueClient) mutate(ctx context.Context, m *QueueMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QueueCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QueueUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QueueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QueueDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Queue mutation op: %q", m.Op())
	}
}

// StageClient is a client for the Stage schema.
type StageClient struct {
	config
}

// NewStageClient returns a client for the Stage from the given config.
func NewStageClient(c config) *StageClient {
	return &StageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stage.Hooks(f(g(h())))`.
func (c *StageClient) Use(hooks ...Hook) {
	c.hooks.Stage = append(c.hooks.Stage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stage.Intercept(f(g(h())))`.
func (c *StageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Stage = append(c.inters.Stage, interceptors...)
}

// Create returns a builder for creating a Stage entity.
func (c *StageClient) Create() *StageCreate {
	mutation := newStageMutation(c.config, OpCreate)
	return &StageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stage entities.
func (c *StageClient) CreateBulk(builders ...*StageCreate) *StageCreateBulk {
	return &StageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StageClient) MapCreateBulk(slice any, setFunc func(*StageCreate, int)) *StageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StageCreateBulk{err: fmt.Errorf("calling to StageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stage.
func (c *StageClient) Update() *StageUpdate {
	mutation := newStageMutation(c.config, OpUpdate)
	return &StageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StageClient) UpdateOne(_m *Stage) *StageUpdateOne {
	mutation := newStageMutation(c.config, OpUpdateOne, withStage(_m))
	return &StageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StageClient) UpdateOneID(id int) *StageUpdateOne {
	mutation := newStageMutation(c.config, OpUpdateOne, withStageID(id))
	return &StageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stage.
func (c *StageClient) Delete() *StageDelete {
	mutation := newStageMutation(c.config, OpDelete)
	return &StageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StageClient) DeleteOne(_m *Stage) *StageDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StageClient) DeleteOneID(id int) *StageDeleteOne {
	builder := c.Delete().Where(stage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StageDeleteOne{builder}
}

// Query returns a query builder for Stage.
func (c *StageClient) Query() *StageQuery {
	return &StageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStage},
		inters: c.Interceptors(),
	}
}

// Get returns a Stage entity by its id.
func (c *StageClient) Get(ctx context.Context, id int) (*Stage, error) {
	return c.Query().Where(stage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StageClient) GetX(ctx context.Context, id int) *Stage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StageClient) Hooks() []Hook {
	return c.hooks.Stage
}

// Interceptors returns the client interceptors.
func (c *StageClient) Interceptors() []Interceptor {
	return c.inters.Stage
}

func (c *StageClient) mutate(ctx context.Context, m *StageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Stage mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Chat, Costumer, Deal, Department, Employee, EmployeeAuth, Field, Form, Message,
		Pipeline, Queue, Stage []ent.Hook
	}
	inters struct {
		Chat, Costumer, Deal, Department, Employee, EmployeeAuth, Field, Form, Message,
		Pipeline, Queue, Stage []ent.Interceptor
	}
)
