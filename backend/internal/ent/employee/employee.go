// Code generated by ent, DO NOT EDIT.

package employee

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmploymentStatus holds the string denoting the employmentstatus field in the database.
	FieldEmploymentStatus = "employment_status"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeEmployeeAuth holds the string denoting the employeeauth edge name in mutations.
	EdgeEmployeeAuth = "employeeAuth"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeChat holds the string denoting the chat edge name in mutations.
	EdgeChat = "chat"
	// EdgeQueues holds the string denoting the queues edge name in mutations.
	EdgeQueues = "queues"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the employee in the database.
	Table = "employees"
	// EmployeeAuthTable is the table that holds the employeeAuth relation/edge.
	EmployeeAuthTable = "employee_auths"
	// EmployeeAuthInverseTable is the table name for the EmployeeAuth entity.
	// It exists in this package in order to avoid circular dependency with the "employeeauth" package.
	EmployeeAuthInverseTable = "employee_auths"
	// EmployeeAuthColumn is the table column denoting the employeeAuth relation/edge.
	EmployeeAuthColumn = "employee_employee_auth"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "employees"
	// TenantInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	TenantInverseTable = "companies"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// DepartmentTable is the table that holds the department relation/edge.
	DepartmentTable = "employees"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "employee_department"
	// ChatTable is the table that holds the chat relation/edge. The primary key declared below.
	ChatTable = "chat_employees"
	// ChatInverseTable is the table name for the Chat entity.
	// It exists in this package in order to avoid circular dependency with the "chat" package.
	ChatInverseTable = "chats"
	// QueuesTable is the table that holds the queues relation/edge. The primary key declared below.
	QueuesTable = "employee_queues"
	// QueuesInverseTable is the table name for the Queue entity.
	// It exists in this package in order to avoid circular dependency with the "queue" package.
	QueuesInverseTable = "queues"
	// MessagesTable is the table that holds the messages relation/edge. The primary key declared below.
	MessagesTable = "message_employee"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmploymentStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTenantId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "employees"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"employee_department",
}

var (
	// ChatPrimaryKey and ChatColumn2 are the table columns denoting the
	// primary key for the chat relation (M2M).
	ChatPrimaryKey = []string{"chat_id", "employee_id"}
	// QueuesPrimaryKey and QueuesColumn2 are the table columns denoting the
	// primary key for the queues relation (M2M).
	QueuesPrimaryKey = []string{"employee_id", "queue_id"}
	// MessagesPrimaryKey and MessagesColumn2 are the table columns denoting the
	// primary key for the messages relation (M2M).
	MessagesPrimaryKey = []string{"message_id", "employee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// EmploymentStatus defines the type for the "employmentStatus" enum field.
type EmploymentStatus string

// EmploymentStatus values.
const (
	EmploymentStatusActive     EmploymentStatus = "active"
	EmploymentStatusTerminated EmploymentStatus = "terminated"
	EmploymentStatusOnLeave    EmploymentStatus = "onLeave"
)

func (es EmploymentStatus) String() string {
	return string(es)
}

// EmploymentStatusValidator is a validator for the "employmentStatus" field enum values. It is called by the builders before save.
func EmploymentStatusValidator(es EmploymentStatus) error {
	switch es {
	case EmploymentStatusActive, EmploymentStatusTerminated, EmploymentStatusOnLeave:
		return nil
	default:
		return fmt.Errorf("employee: invalid enum value for employmentStatus field: %q", es)
	}
}

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmploymentStatus orders the results by the employmentStatus field.
func ByEmploymentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmploymentStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantId orders the results by the tenantId field.
func ByTenantId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantId, opts...).ToFunc()
}

// ByEmployeeAuthField orders the results by employeeAuth field.
func ByEmployeeAuthField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeAuthStep(), sql.OrderByField(field, opts...))
	}
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByDepartmentField orders the results by department field.
func ByDepartmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChatCount orders the results by chat count.
func ByChatCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChatStep(), opts...)
	}
}

// ByChat orders the results by chat terms.
func ByChat(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChatStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQueuesCount orders the results by queues count.
func ByQueuesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQueuesStep(), opts...)
	}
}

// ByQueues orders the results by queues terms.
func ByQueues(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQueuesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEmployeeAuthStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeAuthInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EmployeeAuthTable, EmployeeAuthColumn),
	)
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
func newDepartmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DepartmentTable, DepartmentColumn),
	)
}
func newChatStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChatInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ChatTable, ChatPrimaryKey...),
	)
}
func newQueuesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QueuesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, QueuesTable, QueuesPrimaryKey...),
	)
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MessagesTable, MessagesPrimaryKey...),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e EmploymentStatus) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *EmploymentStatus) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = EmploymentStatus(str)
	if err := EmploymentStatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid EmploymentStatus", str)
	}
	return nil
}
