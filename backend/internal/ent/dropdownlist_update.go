// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/crmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dropdownlist"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/google/uuid"
)

// DropdownListUpdate is the builder for updating DropdownList entities.
type DropdownListUpdate struct {
	config
	hooks    []Hook
	mutation *DropdownListMutation
}

// Where appends a list predicates to the DropdownListUpdate builder.
func (_u *DropdownListUpdate) Where(ps ...predicate.DropdownList) *DropdownListUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetValue sets the "value" field.
func (_u *DropdownListUpdate) SetValue(v string) *DropdownListUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DropdownListUpdate) SetNillableValue(v *string) *DropdownListUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *DropdownListUpdate) SetUpdatedAt(v time.Time) *DropdownListUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetTenantId sets the "tenantId" field.
func (_u *DropdownListUpdate) SetTenantId(v uuid.UUID) *DropdownListUpdate {
	_u.mutation.SetTenantId(v)
	return _u
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (_u *DropdownListUpdate) SetNillableTenantId(v *uuid.UUID) *DropdownListUpdate {
	if v != nil {
		_u.SetTenantId(*v)
	}
	return _u
}

// ClearTenantId clears the value of the "tenantId" field.
func (_u *DropdownListUpdate) ClearTenantId() *DropdownListUpdate {
	_u.mutation.ClearTenantId()
	return _u
}

// AddCrmFieldIDs adds the "crmField" edge to the CrmField entity by IDs.
func (_u *DropdownListUpdate) AddCrmFieldIDs(ids ...uuid.UUID) *DropdownListUpdate {
	_u.mutation.AddCrmFieldIDs(ids...)
	return _u
}

// AddCrmField adds the "crmField" edges to the CrmField entity.
func (_u *DropdownListUpdate) AddCrmField(v ...*CrmField) *DropdownListUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCrmFieldIDs(ids...)
}

// SetTenantID sets the "tenant" edge to the Company entity by ID.
func (_u *DropdownListUpdate) SetTenantID(id uuid.UUID) *DropdownListUpdate {
	_u.mutation.SetTenantID(id)
	return _u
}

// SetNillableTenantID sets the "tenant" edge to the Company entity by ID if the given value is not nil.
func (_u *DropdownListUpdate) SetNillableTenantID(id *uuid.UUID) *DropdownListUpdate {
	if id != nil {
		_u = _u.SetTenantID(*id)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Company entity.
func (_u *DropdownListUpdate) SetTenant(v *Company) *DropdownListUpdate {
	return _u.SetTenantID(v.ID)
}

// Mutation returns the DropdownListMutation object of the builder.
func (_u *DropdownListUpdate) Mutation() *DropdownListMutation {
	return _u.mutation
}

// ClearCrmField clears all "crmField" edges to the CrmField entity.
func (_u *DropdownListUpdate) ClearCrmField() *DropdownListUpdate {
	_u.mutation.ClearCrmField()
	return _u
}

// RemoveCrmFieldIDs removes the "crmField" edge to CrmField entities by IDs.
func (_u *DropdownListUpdate) RemoveCrmFieldIDs(ids ...uuid.UUID) *DropdownListUpdate {
	_u.mutation.RemoveCrmFieldIDs(ids...)
	return _u
}

// RemoveCrmField removes "crmField" edges to CrmField entities.
func (_u *DropdownListUpdate) RemoveCrmField(v ...*CrmField) *DropdownListUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCrmFieldIDs(ids...)
}

// ClearTenant clears the "tenant" edge to the Company entity.
func (_u *DropdownListUpdate) ClearTenant() *DropdownListUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DropdownListUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DropdownListUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DropdownListUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DropdownListUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DropdownListUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dropdownlist.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DropdownListUpdate) check() error {
	if v, ok := _u.mutation.Value(); ok {
		if err := dropdownlist.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DropdownList.value": %w`, err)}
		}
	}
	return nil
}

func (_u *DropdownListUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dropdownlist.Table, dropdownlist.Columns, sqlgraph.NewFieldSpec(dropdownlist.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dropdownlist.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dropdownlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.CrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dropdownlist.CrmFieldTable,
			Columns: dropdownlist.CrmFieldPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCrmFieldIDs(); len(nodes) > 0 && !_u.mutation.CrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dropdownlist.CrmFieldTable,
			Columns: dropdownlist.CrmFieldPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CrmFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dropdownlist.CrmFieldTable,
			Columns: dropdownlist.CrmFieldPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dropdownlist.TenantTable,
			Columns: []string{dropdownlist.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dropdownlist.TenantTable,
			Columns: []string{dropdownlist.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dropdownlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DropdownListUpdateOne is the builder for updating a single DropdownList entity.
type DropdownListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DropdownListMutation
}

// SetValue sets the "value" field.
func (_u *DropdownListUpdateOne) SetValue(v string) *DropdownListUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *DropdownListUpdateOne) SetNillableValue(v *string) *DropdownListUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *DropdownListUpdateOne) SetUpdatedAt(v time.Time) *DropdownListUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetTenantId sets the "tenantId" field.
func (_u *DropdownListUpdateOne) SetTenantId(v uuid.UUID) *DropdownListUpdateOne {
	_u.mutation.SetTenantId(v)
	return _u
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (_u *DropdownListUpdateOne) SetNillableTenantId(v *uuid.UUID) *DropdownListUpdateOne {
	if v != nil {
		_u.SetTenantId(*v)
	}
	return _u
}

// ClearTenantId clears the value of the "tenantId" field.
func (_u *DropdownListUpdateOne) ClearTenantId() *DropdownListUpdateOne {
	_u.mutation.ClearTenantId()
	return _u
}

// AddCrmFieldIDs adds the "crmField" edge to the CrmField entity by IDs.
func (_u *DropdownListUpdateOne) AddCrmFieldIDs(ids ...uuid.UUID) *DropdownListUpdateOne {
	_u.mutation.AddCrmFieldIDs(ids...)
	return _u
}

// AddCrmField adds the "crmField" edges to the CrmField entity.
func (_u *DropdownListUpdateOne) AddCrmField(v ...*CrmField) *DropdownListUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCrmFieldIDs(ids...)
}

// SetTenantID sets the "tenant" edge to the Company entity by ID.
func (_u *DropdownListUpdateOne) SetTenantID(id uuid.UUID) *DropdownListUpdateOne {
	_u.mutation.SetTenantID(id)
	return _u
}

// SetNillableTenantID sets the "tenant" edge to the Company entity by ID if the given value is not nil.
func (_u *DropdownListUpdateOne) SetNillableTenantID(id *uuid.UUID) *DropdownListUpdateOne {
	if id != nil {
		_u = _u.SetTenantID(*id)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Company entity.
func (_u *DropdownListUpdateOne) SetTenant(v *Company) *DropdownListUpdateOne {
	return _u.SetTenantID(v.ID)
}

// Mutation returns the DropdownListMutation object of the builder.
func (_u *DropdownListUpdateOne) Mutation() *DropdownListMutation {
	return _u.mutation
}

// ClearCrmField clears all "crmField" edges to the CrmField entity.
func (_u *DropdownListUpdateOne) ClearCrmField() *DropdownListUpdateOne {
	_u.mutation.ClearCrmField()
	return _u
}

// RemoveCrmFieldIDs removes the "crmField" edge to CrmField entities by IDs.
func (_u *DropdownListUpdateOne) RemoveCrmFieldIDs(ids ...uuid.UUID) *DropdownListUpdateOne {
	_u.mutation.RemoveCrmFieldIDs(ids...)
	return _u
}

// RemoveCrmField removes "crmField" edges to CrmField entities.
func (_u *DropdownListUpdateOne) RemoveCrmField(v ...*CrmField) *DropdownListUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCrmFieldIDs(ids...)
}

// ClearTenant clears the "tenant" edge to the Company entity.
func (_u *DropdownListUpdateOne) ClearTenant() *DropdownListUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// Where appends a list predicates to the DropdownListUpdate builder.
func (_u *DropdownListUpdateOne) Where(ps ...predicate.DropdownList) *DropdownListUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DropdownListUpdateOne) Select(field string, fields ...string) *DropdownListUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DropdownList entity.
func (_u *DropdownListUpdateOne) Save(ctx context.Context) (*DropdownList, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DropdownListUpdateOne) SaveX(ctx context.Context) *DropdownList {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DropdownListUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DropdownListUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DropdownListUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dropdownlist.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DropdownListUpdateOne) check() error {
	if v, ok := _u.mutation.Value(); ok {
		if err := dropdownlist.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DropdownList.value": %w`, err)}
		}
	}
	return nil
}

func (_u *DropdownListUpdateOne) sqlSave(ctx context.Context) (_node *DropdownList, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dropdownlist.Table, dropdownlist.Columns, sqlgraph.NewFieldSpec(dropdownlist.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DropdownList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dropdownlist.FieldID)
		for _, f := range fields {
			if !dropdownlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dropdownlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(dropdownlist.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dropdownlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.CrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dropdownlist.CrmFieldTable,
			Columns: dropdownlist.CrmFieldPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCrmFieldIDs(); len(nodes) > 0 && !_u.mutation.CrmFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dropdownlist.CrmFieldTable,
			Columns: dropdownlist.CrmFieldPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CrmFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dropdownlist.CrmFieldTable,
			Columns: dropdownlist.CrmFieldPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(crmfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dropdownlist.TenantTable,
			Columns: []string{dropdownlist.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dropdownlist.TenantTable,
			Columns: []string{dropdownlist.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DropdownList{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dropdownlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
