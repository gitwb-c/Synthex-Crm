// Code generated by ent, DO NOT EDIT.

package file

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.File {
	return predicate.File(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldLTE(FieldID, id))
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v uuid.UUID) predicate.File {
	return predicate.File(sql.FieldEQ(FieldTenantId, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldURL, v))
}

// Caption applies equality check predicate on the "caption" field. It's identical to CaptionEQ.
func Caption(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCaption, v))
}

// MimeType applies equality check predicate on the "mimeType" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMimeType, v))
}

// FileName applies equality check predicate on the "fileName" field. It's identical to FileNameEQ.
func FileName(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileName, v))
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v uuid.UUID) predicate.File {
	return predicate.File(sql.FieldEQ(FieldTenantId, v))
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v uuid.UUID) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldTenantId, v))
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...uuid.UUID) predicate.File {
	return predicate.File(sql.FieldIn(FieldTenantId, vs...))
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...uuid.UUID) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldTenantId, vs...))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldURL, v))
}

// CaptionEQ applies the EQ predicate on the "caption" field.
func CaptionEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCaption, v))
}

// CaptionNEQ applies the NEQ predicate on the "caption" field.
func CaptionNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCaption, v))
}

// CaptionIn applies the In predicate on the "caption" field.
func CaptionIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldCaption, vs...))
}

// CaptionNotIn applies the NotIn predicate on the "caption" field.
func CaptionNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCaption, vs...))
}

// CaptionGT applies the GT predicate on the "caption" field.
func CaptionGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldCaption, v))
}

// CaptionGTE applies the GTE predicate on the "caption" field.
func CaptionGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCaption, v))
}

// CaptionLT applies the LT predicate on the "caption" field.
func CaptionLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldCaption, v))
}

// CaptionLTE applies the LTE predicate on the "caption" field.
func CaptionLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCaption, v))
}

// CaptionContains applies the Contains predicate on the "caption" field.
func CaptionContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldCaption, v))
}

// CaptionHasPrefix applies the HasPrefix predicate on the "caption" field.
func CaptionHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldCaption, v))
}

// CaptionHasSuffix applies the HasSuffix predicate on the "caption" field.
func CaptionHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldCaption, v))
}

// CaptionIsNil applies the IsNil predicate on the "caption" field.
func CaptionIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldCaption))
}

// CaptionNotNil applies the NotNil predicate on the "caption" field.
func CaptionNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldCaption))
}

// CaptionEqualFold applies the EqualFold predicate on the "caption" field.
func CaptionEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldCaption, v))
}

// CaptionContainsFold applies the ContainsFold predicate on the "caption" field.
func CaptionContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldCaption, v))
}

// MimeTypeEQ applies the EQ predicate on the "mimeType" field.
func MimeTypeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mimeType" field.
func MimeTypeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mimeType" field.
func MimeTypeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mimeType" field.
func MimeTypeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mimeType" field.
func MimeTypeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mimeType" field.
func MimeTypeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mimeType" field.
func MimeTypeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mimeType" field.
func MimeTypeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mimeType" field.
func MimeTypeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mimeType" field.
func MimeTypeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mimeType" field.
func MimeTypeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mimeType" field.
func MimeTypeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mimeType" field.
func MimeTypeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldMimeType, v))
}

// FileNameEQ applies the EQ predicate on the "fileName" field.
func FileNameEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "fileName" field.
func FileNameNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "fileName" field.
func FileNameIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "fileName" field.
func FileNameNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "fileName" field.
func FileNameGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "fileName" field.
func FileNameGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "fileName" field.
func FileNameLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "fileName" field.
func FileNameLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "fileName" field.
func FileNameContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "fileName" field.
func FileNameHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "fileName" field.
func FileNameHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "fileName" field.
func FileNameEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "fileName" field.
func FileNameContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldFileName, v))
}

// HasMessage applies the HasEdge predicate on the "message" edge.
func HasMessage() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageWith applies the HasEdge predicate on the "message" edge with a given conditions (other predicates).
func HasMessageWith(preds ...predicate.Message) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newMessageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Company) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.File) predicate.File {
	return predicate.File(sql.NotPredicates(p))
}
