// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/crmfield"
	"github.com/google/uuid"
)

// CrmField is the model entity for the CrmField schema.
type CrmField struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Section holds the value of the "section" field.
	Section string `json:"section,omitempty"`
	// Type holds the value of the "type" field.
	Type crmfield.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId uuid.UUID `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CrmFieldQuery when eager-loading is set.
	Edges        CrmFieldEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CrmFieldEdges holds the relations/edges for other nodes in the graph.
type CrmFieldEdges struct {
	// DropdownList holds the value of the dropdownList edge.
	DropdownList []*DropdownList `json:"dropdownList,omitempty"`
	// DealCrmField holds the value of the dealCrmField edge.
	DealCrmField []*DealCrmField `json:"dealCrmField,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Company `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedDropdownList map[string][]*DropdownList
	namedDealCrmField map[string][]*DealCrmField
}

// DropdownListOrErr returns the DropdownList value or an error if the edge
// was not loaded in eager-loading.
func (e CrmFieldEdges) DropdownListOrErr() ([]*DropdownList, error) {
	if e.loadedTypes[0] {
		return e.DropdownList, nil
	}
	return nil, &NotLoadedError{edge: "dropdownList"}
}

// DealCrmFieldOrErr returns the DealCrmField value or an error if the edge
// was not loaded in eager-loading.
func (e CrmFieldEdges) DealCrmFieldOrErr() ([]*DealCrmField, error) {
	if e.loadedTypes[1] {
		return e.DealCrmField, nil
	}
	return nil, &NotLoadedError{edge: "dealCrmField"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CrmFieldEdges) TenantOrErr() (*Company, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CrmField) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case crmfield.FieldName, crmfield.FieldSection, crmfield.FieldType:
			values[i] = new(sql.NullString)
		case crmfield.FieldCreatedAt, crmfield.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case crmfield.FieldID, crmfield.FieldTenantId:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CrmField fields.
func (_m *CrmField) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case crmfield.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case crmfield.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case crmfield.FieldSection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field section", values[i])
			} else if value.Valid {
				_m.Section = value.String
			}
		case crmfield.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = crmfield.Type(value.String)
			}
		case crmfield.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case crmfield.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case crmfield.FieldTenantId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value != nil {
				_m.TenantId = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CrmField.
// This includes values selected through modifiers, order, etc.
func (_m *CrmField) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDropdownList queries the "dropdownList" edge of the CrmField entity.
func (_m *CrmField) QueryDropdownList() *DropdownListQuery {
	return NewCrmFieldClient(_m.config).QueryDropdownList(_m)
}

// QueryDealCrmField queries the "dealCrmField" edge of the CrmField entity.
func (_m *CrmField) QueryDealCrmField() *DealCrmFieldQuery {
	return NewCrmFieldClient(_m.config).QueryDealCrmField(_m)
}

// QueryTenant queries the "tenant" edge of the CrmField entity.
func (_m *CrmField) QueryTenant() *CompanyQuery {
	return NewCrmFieldClient(_m.config).QueryTenant(_m)
}

// Update returns a builder for updating this CrmField.
// Note that you need to call CrmField.Unwrap() before calling this method if this CrmField
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CrmField) Update() *CrmFieldUpdateOne {
	return NewCrmFieldClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CrmField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CrmField) Unwrap() *CrmField {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: CrmField is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CrmField) String() string {
	var builder strings.Builder
	builder.WriteString("CrmField(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("section=")
	builder.WriteString(_m.Section)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDropdownList returns the DropdownList named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CrmField) NamedDropdownList(name string) ([]*DropdownList, error) {
	if _m.Edges.namedDropdownList == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedDropdownList[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CrmField) appendNamedDropdownList(name string, edges ...*DropdownList) {
	if _m.Edges.namedDropdownList == nil {
		_m.Edges.namedDropdownList = make(map[string][]*DropdownList)
	}
	if len(edges) == 0 {
		_m.Edges.namedDropdownList[name] = []*DropdownList{}
	} else {
		_m.Edges.namedDropdownList[name] = append(_m.Edges.namedDropdownList[name], edges...)
	}
}

// NamedDealCrmField returns the DealCrmField named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *CrmField) NamedDealCrmField(name string) ([]*DealCrmField, error) {
	if _m.Edges.namedDealCrmField == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedDealCrmField[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *CrmField) appendNamedDealCrmField(name string, edges ...*DealCrmField) {
	if _m.Edges.namedDealCrmField == nil {
		_m.Edges.namedDealCrmField = make(map[string][]*DealCrmField)
	}
	if len(edges) == 0 {
		_m.Edges.namedDealCrmField[name] = []*DealCrmField{}
	} else {
		_m.Edges.namedDealCrmField[name] = append(_m.Edges.namedDealCrmField[name], edges...)
	}
}

// CrmFields is a parsable slice of CrmField.
type CrmFields []*CrmField
