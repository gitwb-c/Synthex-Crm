// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/chat"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/department"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employee"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employeeauth"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/message"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/queue"
	"github.com/google/uuid"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (_u *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *EmployeeUpdate) SetName(v string) *EmployeeUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EmployeeUpdate) SetNillableName(v *string) *EmployeeUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetActive sets the "active" field.
func (_u *EmployeeUpdate) SetActive(v bool) *EmployeeUpdate {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *EmployeeUpdate) SetNillableActive(v *bool) *EmployeeUpdate {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *EmployeeUpdate) SetUpdatedAt(v time.Time) *EmployeeUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEmployeeAuthID sets the "employeeAuth" edge to the EmployeeAuth entity by ID.
func (_u *EmployeeUpdate) SetEmployeeAuthID(id uuid.UUID) *EmployeeUpdate {
	_u.mutation.SetEmployeeAuthID(id)
	return _u
}

// SetEmployeeAuth sets the "employeeAuth" edge to the EmployeeAuth entity.
func (_u *EmployeeUpdate) SetEmployeeAuth(v *EmployeeAuth) *EmployeeUpdate {
	return _u.SetEmployeeAuthID(v.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (_u *EmployeeUpdate) SetCompanyID(id uuid.UUID) *EmployeeUpdate {
	_u.mutation.SetCompanyID(id)
	return _u
}

// SetCompany sets the "company" edge to the Company entity.
func (_u *EmployeeUpdate) SetCompany(v *Company) *EmployeeUpdate {
	return _u.SetCompanyID(v.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (_u *EmployeeUpdate) SetDepartmentID(id uuid.UUID) *EmployeeUpdate {
	_u.mutation.SetDepartmentID(id)
	return _u
}

// SetDepartment sets the "department" edge to the Department entity.
func (_u *EmployeeUpdate) SetDepartment(v *Department) *EmployeeUpdate {
	return _u.SetDepartmentID(v.ID)
}

// AddChatIDs adds the "chat" edge to the Chat entity by IDs.
func (_u *EmployeeUpdate) AddChatIDs(ids ...uuid.UUID) *EmployeeUpdate {
	_u.mutation.AddChatIDs(ids...)
	return _u
}

// AddChat adds the "chat" edges to the Chat entity.
func (_u *EmployeeUpdate) AddChat(v ...*Chat) *EmployeeUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChatIDs(ids...)
}

// AddQueueIDs adds the "queues" edge to the Queue entity by IDs.
func (_u *EmployeeUpdate) AddQueueIDs(ids ...uuid.UUID) *EmployeeUpdate {
	_u.mutation.AddQueueIDs(ids...)
	return _u
}

// AddQueues adds the "queues" edges to the Queue entity.
func (_u *EmployeeUpdate) AddQueues(v ...*Queue) *EmployeeUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQueueIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (_u *EmployeeUpdate) AddMessageIDs(ids ...uuid.UUID) *EmployeeUpdate {
	_u.mutation.AddMessageIDs(ids...)
	return _u
}

// AddMessages adds the "messages" edges to the Message entity.
func (_u *EmployeeUpdate) AddMessages(v ...*Message) *EmployeeUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (_u *EmployeeUpdate) Mutation() *EmployeeMutation {
	return _u.mutation
}

// ClearEmployeeAuth clears the "employeeAuth" edge to the EmployeeAuth entity.
func (_u *EmployeeUpdate) ClearEmployeeAuth() *EmployeeUpdate {
	_u.mutation.ClearEmployeeAuth()
	return _u
}

// ClearCompany clears the "company" edge to the Company entity.
func (_u *EmployeeUpdate) ClearCompany() *EmployeeUpdate {
	_u.mutation.ClearCompany()
	return _u
}

// ClearDepartment clears the "department" edge to the Department entity.
func (_u *EmployeeUpdate) ClearDepartment() *EmployeeUpdate {
	_u.mutation.ClearDepartment()
	return _u
}

// ClearChat clears all "chat" edges to the Chat entity.
func (_u *EmployeeUpdate) ClearChat() *EmployeeUpdate {
	_u.mutation.ClearChat()
	return _u
}

// RemoveChatIDs removes the "chat" edge to Chat entities by IDs.
func (_u *EmployeeUpdate) RemoveChatIDs(ids ...uuid.UUID) *EmployeeUpdate {
	_u.mutation.RemoveChatIDs(ids...)
	return _u
}

// RemoveChat removes "chat" edges to Chat entities.
func (_u *EmployeeUpdate) RemoveChat(v ...*Chat) *EmployeeUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChatIDs(ids...)
}

// ClearQueues clears all "queues" edges to the Queue entity.
func (_u *EmployeeUpdate) ClearQueues() *EmployeeUpdate {
	_u.mutation.ClearQueues()
	return _u
}

// RemoveQueueIDs removes the "queues" edge to Queue entities by IDs.
func (_u *EmployeeUpdate) RemoveQueueIDs(ids ...uuid.UUID) *EmployeeUpdate {
	_u.mutation.RemoveQueueIDs(ids...)
	return _u
}

// RemoveQueues removes "queues" edges to Queue entities.
func (_u *EmployeeUpdate) RemoveQueues(v ...*Queue) *EmployeeUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQueueIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (_u *EmployeeUpdate) ClearMessages() *EmployeeUpdate {
	_u.mutation.ClearMessages()
	return _u
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (_u *EmployeeUpdate) RemoveMessageIDs(ids ...uuid.UUID) *EmployeeUpdate {
	_u.mutation.RemoveMessageIDs(ids...)
	return _u
}

// RemoveMessages removes "messages" edges to Message entities.
func (_u *EmployeeUpdate) RemoveMessages(v ...*Message) *EmployeeUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EmployeeUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := employee.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EmployeeUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := employee.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Employee.name": %w`, err)}
		}
	}
	if _u.mutation.EmployeeAuthCleared() && len(_u.mutation.EmployeeAuthIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.employeeAuth"`)
	}
	if _u.mutation.CompanyCleared() && len(_u.mutation.CompanyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.company"`)
	}
	if _u.mutation.DepartmentCleared() && len(_u.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.department"`)
	}
	return nil
}

func (_u *EmployeeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(employee.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(employee.FieldActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.EmployeeAuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.EmployeeAuthTable,
			Columns: []string{employee.EmployeeAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeauth.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmployeeAuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.EmployeeAuthTable,
			Columns: []string{employee.EmployeeAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CompanyTable,
			Columns: []string{employee.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CompanyTable,
			Columns: []string{employee.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ChatTable,
			Columns: employee.ChatPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChatIDs(); len(nodes) > 0 && !_u.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ChatTable,
			Columns: employee.ChatPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ChatTable,
			Columns: employee.ChatPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QueuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.QueuesTable,
			Columns: employee.QueuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQueuesIDs(); len(nodes) > 0 && !_u.mutation.QueuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.QueuesTable,
			Columns: employee.QueuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.QueuesTable,
			Columns: employee.QueuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.MessagesTable,
			Columns: employee.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !_u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.MessagesTable,
			Columns: employee.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.MessagesTable,
			Columns: employee.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetName sets the "name" field.
func (_u *EmployeeUpdateOne) SetName(v string) *EmployeeUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EmployeeUpdateOne) SetNillableName(v *string) *EmployeeUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetActive sets the "active" field.
func (_u *EmployeeUpdateOne) SetActive(v bool) *EmployeeUpdateOne {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *EmployeeUpdateOne) SetNillableActive(v *bool) *EmployeeUpdateOne {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *EmployeeUpdateOne) SetUpdatedAt(v time.Time) *EmployeeUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEmployeeAuthID sets the "employeeAuth" edge to the EmployeeAuth entity by ID.
func (_u *EmployeeUpdateOne) SetEmployeeAuthID(id uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.SetEmployeeAuthID(id)
	return _u
}

// SetEmployeeAuth sets the "employeeAuth" edge to the EmployeeAuth entity.
func (_u *EmployeeUpdateOne) SetEmployeeAuth(v *EmployeeAuth) *EmployeeUpdateOne {
	return _u.SetEmployeeAuthID(v.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (_u *EmployeeUpdateOne) SetCompanyID(id uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.SetCompanyID(id)
	return _u
}

// SetCompany sets the "company" edge to the Company entity.
func (_u *EmployeeUpdateOne) SetCompany(v *Company) *EmployeeUpdateOne {
	return _u.SetCompanyID(v.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (_u *EmployeeUpdateOne) SetDepartmentID(id uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.SetDepartmentID(id)
	return _u
}

// SetDepartment sets the "department" edge to the Department entity.
func (_u *EmployeeUpdateOne) SetDepartment(v *Department) *EmployeeUpdateOne {
	return _u.SetDepartmentID(v.ID)
}

// AddChatIDs adds the "chat" edge to the Chat entity by IDs.
func (_u *EmployeeUpdateOne) AddChatIDs(ids ...uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.AddChatIDs(ids...)
	return _u
}

// AddChat adds the "chat" edges to the Chat entity.
func (_u *EmployeeUpdateOne) AddChat(v ...*Chat) *EmployeeUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChatIDs(ids...)
}

// AddQueueIDs adds the "queues" edge to the Queue entity by IDs.
func (_u *EmployeeUpdateOne) AddQueueIDs(ids ...uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.AddQueueIDs(ids...)
	return _u
}

// AddQueues adds the "queues" edges to the Queue entity.
func (_u *EmployeeUpdateOne) AddQueues(v ...*Queue) *EmployeeUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQueueIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (_u *EmployeeUpdateOne) AddMessageIDs(ids ...uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.AddMessageIDs(ids...)
	return _u
}

// AddMessages adds the "messages" edges to the Message entity.
func (_u *EmployeeUpdateOne) AddMessages(v ...*Message) *EmployeeUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (_u *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return _u.mutation
}

// ClearEmployeeAuth clears the "employeeAuth" edge to the EmployeeAuth entity.
func (_u *EmployeeUpdateOne) ClearEmployeeAuth() *EmployeeUpdateOne {
	_u.mutation.ClearEmployeeAuth()
	return _u
}

// ClearCompany clears the "company" edge to the Company entity.
func (_u *EmployeeUpdateOne) ClearCompany() *EmployeeUpdateOne {
	_u.mutation.ClearCompany()
	return _u
}

// ClearDepartment clears the "department" edge to the Department entity.
func (_u *EmployeeUpdateOne) ClearDepartment() *EmployeeUpdateOne {
	_u.mutation.ClearDepartment()
	return _u
}

// ClearChat clears all "chat" edges to the Chat entity.
func (_u *EmployeeUpdateOne) ClearChat() *EmployeeUpdateOne {
	_u.mutation.ClearChat()
	return _u
}

// RemoveChatIDs removes the "chat" edge to Chat entities by IDs.
func (_u *EmployeeUpdateOne) RemoveChatIDs(ids ...uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.RemoveChatIDs(ids...)
	return _u
}

// RemoveChat removes "chat" edges to Chat entities.
func (_u *EmployeeUpdateOne) RemoveChat(v ...*Chat) *EmployeeUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChatIDs(ids...)
}

// ClearQueues clears all "queues" edges to the Queue entity.
func (_u *EmployeeUpdateOne) ClearQueues() *EmployeeUpdateOne {
	_u.mutation.ClearQueues()
	return _u
}

// RemoveQueueIDs removes the "queues" edge to Queue entities by IDs.
func (_u *EmployeeUpdateOne) RemoveQueueIDs(ids ...uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.RemoveQueueIDs(ids...)
	return _u
}

// RemoveQueues removes "queues" edges to Queue entities.
func (_u *EmployeeUpdateOne) RemoveQueues(v ...*Queue) *EmployeeUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQueueIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (_u *EmployeeUpdateOne) ClearMessages() *EmployeeUpdateOne {
	_u.mutation.ClearMessages()
	return _u
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (_u *EmployeeUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *EmployeeUpdateOne {
	_u.mutation.RemoveMessageIDs(ids...)
	return _u
}

// RemoveMessages removes "messages" edges to Message entities.
func (_u *EmployeeUpdateOne) RemoveMessages(v ...*Message) *EmployeeUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (_u *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Employee entity.
func (_u *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EmployeeUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := employee.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EmployeeUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := employee.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Employee.name": %w`, err)}
		}
	}
	if _u.mutation.EmployeeAuthCleared() && len(_u.mutation.EmployeeAuthIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.employeeAuth"`)
	}
	if _u.mutation.CompanyCleared() && len(_u.mutation.CompanyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.company"`)
	}
	if _u.mutation.DepartmentCleared() && len(_u.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.department"`)
	}
	return nil
}

func (_u *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(employee.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(employee.FieldActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.EmployeeAuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.EmployeeAuthTable,
			Columns: []string{employee.EmployeeAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeauth.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmployeeAuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.EmployeeAuthTable,
			Columns: []string{employee.EmployeeAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CompanyTable,
			Columns: []string{employee.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CompanyTable,
			Columns: []string{employee.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ChatTable,
			Columns: employee.ChatPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChatIDs(); len(nodes) > 0 && !_u.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ChatTable,
			Columns: employee.ChatPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ChatTable,
			Columns: employee.ChatPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QueuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.QueuesTable,
			Columns: employee.QueuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQueuesIDs(); len(nodes) > 0 && !_u.mutation.QueuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.QueuesTable,
			Columns: employee.QueuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.QueuesTable,
			Columns: employee.QueuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.MessagesTable,
			Columns: employee.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !_u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.MessagesTable,
			Columns: employee.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.MessagesTable,
			Columns: employee.MessagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Employee{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
