// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/chat"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/deal"
	"github.com/google/uuid"
)

// Chat is the model entity for the Chat schema.
type Chat struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Accepted holds the value of the "accepted" field.
	Accepted bool `json:"accepted,omitempty"`
	// Locked holds the value of the "locked" field.
	Locked bool `json:"locked,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId uuid.UUID `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatQuery when eager-loading is set.
	Edges        ChatEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChatEdges holds the relations/edges for other nodes in the graph.
type ChatEdges struct {
	// Deal holds the value of the deal edge.
	Deal *Deal `json:"deal,omitempty"`
	// Employees holds the value of the employees edge.
	Employees []*Employee `json:"employees,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Company `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedEmployees map[string][]*Employee
	namedMessages  map[string][]*Message
}

// DealOrErr returns the Deal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatEdges) DealOrErr() (*Deal, error) {
	if e.Deal != nil {
		return e.Deal, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: deal.Label}
	}
	return nil, &NotLoadedError{edge: "deal"}
}

// EmployeesOrErr returns the Employees value or an error if the edge
// was not loaded in eager-loading.
func (e ChatEdges) EmployeesOrErr() ([]*Employee, error) {
	if e.loadedTypes[1] {
		return e.Employees, nil
	}
	return nil, &NotLoadedError{edge: "employees"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e ChatEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[2] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatEdges) TenantOrErr() (*Company, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chat.FieldAccepted, chat.FieldLocked:
			values[i] = new(sql.NullBool)
		case chat.FieldTitle:
			values[i] = new(sql.NullString)
		case chat.FieldCreatedAt, chat.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case chat.FieldID, chat.FieldTenantId:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chat fields.
func (_m *Chat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chat.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case chat.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case chat.FieldAccepted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field accepted", values[i])
			} else if value.Valid {
				_m.Accepted = value.Bool
			}
		case chat.FieldLocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[i])
			} else if value.Valid {
				_m.Locked = value.Bool
			}
		case chat.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case chat.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case chat.FieldTenantId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value != nil {
				_m.TenantId = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Chat.
// This includes values selected through modifiers, order, etc.
func (_m *Chat) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDeal queries the "deal" edge of the Chat entity.
func (_m *Chat) QueryDeal() *DealQuery {
	return NewChatClient(_m.config).QueryDeal(_m)
}

// QueryEmployees queries the "employees" edge of the Chat entity.
func (_m *Chat) QueryEmployees() *EmployeeQuery {
	return NewChatClient(_m.config).QueryEmployees(_m)
}

// QueryMessages queries the "messages" edge of the Chat entity.
func (_m *Chat) QueryMessages() *MessageQuery {
	return NewChatClient(_m.config).QueryMessages(_m)
}

// QueryTenant queries the "tenant" edge of the Chat entity.
func (_m *Chat) QueryTenant() *CompanyQuery {
	return NewChatClient(_m.config).QueryTenant(_m)
}

// Update returns a builder for updating this Chat.
// Note that you need to call Chat.Unwrap() before calling this method if this Chat
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Chat) Update() *ChatUpdateOne {
	return NewChatClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Chat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Chat) Unwrap() *Chat {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chat is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Chat) String() string {
	var builder strings.Builder
	builder.WriteString("Chat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("accepted=")
	builder.WriteString(fmt.Sprintf("%v", _m.Accepted))
	builder.WriteString(", ")
	builder.WriteString("locked=")
	builder.WriteString(fmt.Sprintf("%v", _m.Locked))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEmployees returns the Employees named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Chat) NamedEmployees(name string) ([]*Employee, error) {
	if _m.Edges.namedEmployees == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEmployees[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Chat) appendNamedEmployees(name string, edges ...*Employee) {
	if _m.Edges.namedEmployees == nil {
		_m.Edges.namedEmployees = make(map[string][]*Employee)
	}
	if len(edges) == 0 {
		_m.Edges.namedEmployees[name] = []*Employee{}
	} else {
		_m.Edges.namedEmployees[name] = append(_m.Edges.namedEmployees[name], edges...)
	}
}

// NamedMessages returns the Messages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Chat) NamedMessages(name string) ([]*Message, error) {
	if _m.Edges.namedMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Chat) appendNamedMessages(name string, edges ...*Message) {
	if _m.Edges.namedMessages == nil {
		_m.Edges.namedMessages = make(map[string][]*Message)
	}
	if len(edges) == 0 {
		_m.Edges.namedMessages[name] = []*Message{}
	} else {
		_m.Edges.namedMessages[name] = append(_m.Edges.namedMessages[name], edges...)
	}
}

// Chats is a parsable slice of Chat.
type Chats []*Chat
