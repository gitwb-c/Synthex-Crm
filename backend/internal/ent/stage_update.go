// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/deal"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/pipeline"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/queue"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/stage"
	"github.com/google/uuid"
)

// StageUpdate is the builder for updating Stage entities.
type StageUpdate struct {
	config
	hooks    []Hook
	mutation *StageMutation
}

// Where appends a list predicates to the StageUpdate builder.
func (_u *StageUpdate) Where(ps ...predicate.Stage) *StageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *StageUpdate) SetName(v string) *StageUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StageUpdate) SetNillableName(v *string) *StageUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetColor sets the "color" field.
func (_u *StageUpdate) SetColor(v string) *StageUpdate {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *StageUpdate) SetNillableColor(v *string) *StageUpdate {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// SetLossOrGain sets the "lossOrGain" field.
func (_u *StageUpdate) SetLossOrGain(v bool) *StageUpdate {
	_u.mutation.SetLossOrGain(v)
	return _u
}

// SetNillableLossOrGain sets the "lossOrGain" field if the given value is not nil.
func (_u *StageUpdate) SetNillableLossOrGain(v *bool) *StageUpdate {
	if v != nil {
		_u.SetLossOrGain(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *StageUpdate) SetUpdatedAt(v time.Time) *StageUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetTenantId sets the "tenantId" field.
func (_u *StageUpdate) SetTenantId(v uuid.UUID) *StageUpdate {
	_u.mutation.SetTenantId(v)
	return _u
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (_u *StageUpdate) SetNillableTenantId(v *uuid.UUID) *StageUpdate {
	if v != nil {
		_u.SetTenantId(*v)
	}
	return _u
}

// ClearTenantId clears the value of the "tenantId" field.
func (_u *StageUpdate) ClearTenantId() *StageUpdate {
	_u.mutation.ClearTenantId()
	return _u
}

// SetPipelineID sets the "pipeline" edge to the Pipeline entity by ID.
func (_u *StageUpdate) SetPipelineID(id uuid.UUID) *StageUpdate {
	_u.mutation.SetPipelineID(id)
	return _u
}

// SetPipeline sets the "pipeline" edge to the Pipeline entity.
func (_u *StageUpdate) SetPipeline(v *Pipeline) *StageUpdate {
	return _u.SetPipelineID(v.ID)
}

// AddDealIDs adds the "deals" edge to the Deal entity by IDs.
func (_u *StageUpdate) AddDealIDs(ids ...uuid.UUID) *StageUpdate {
	_u.mutation.AddDealIDs(ids...)
	return _u
}

// AddDeals adds the "deals" edges to the Deal entity.
func (_u *StageUpdate) AddDeals(v ...*Deal) *StageUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDealIDs(ids...)
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (_u *StageUpdate) SetQueueID(id uuid.UUID) *StageUpdate {
	_u.mutation.SetQueueID(id)
	return _u
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (_u *StageUpdate) SetNillableQueueID(id *uuid.UUID) *StageUpdate {
	if id != nil {
		_u = _u.SetQueueID(*id)
	}
	return _u
}

// SetQueue sets the "queue" edge to the Queue entity.
func (_u *StageUpdate) SetQueue(v *Queue) *StageUpdate {
	return _u.SetQueueID(v.ID)
}

// SetTenantID sets the "tenant" edge to the Company entity by ID.
func (_u *StageUpdate) SetTenantID(id uuid.UUID) *StageUpdate {
	_u.mutation.SetTenantID(id)
	return _u
}

// SetNillableTenantID sets the "tenant" edge to the Company entity by ID if the given value is not nil.
func (_u *StageUpdate) SetNillableTenantID(id *uuid.UUID) *StageUpdate {
	if id != nil {
		_u = _u.SetTenantID(*id)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Company entity.
func (_u *StageUpdate) SetTenant(v *Company) *StageUpdate {
	return _u.SetTenantID(v.ID)
}

// Mutation returns the StageMutation object of the builder.
func (_u *StageUpdate) Mutation() *StageMutation {
	return _u.mutation
}

// ClearPipeline clears the "pipeline" edge to the Pipeline entity.
func (_u *StageUpdate) ClearPipeline() *StageUpdate {
	_u.mutation.ClearPipeline()
	return _u
}

// ClearDeals clears all "deals" edges to the Deal entity.
func (_u *StageUpdate) ClearDeals() *StageUpdate {
	_u.mutation.ClearDeals()
	return _u
}

// RemoveDealIDs removes the "deals" edge to Deal entities by IDs.
func (_u *StageUpdate) RemoveDealIDs(ids ...uuid.UUID) *StageUpdate {
	_u.mutation.RemoveDealIDs(ids...)
	return _u
}

// RemoveDeals removes "deals" edges to Deal entities.
func (_u *StageUpdate) RemoveDeals(v ...*Deal) *StageUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDealIDs(ids...)
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (_u *StageUpdate) ClearQueue() *StageUpdate {
	_u.mutation.ClearQueue()
	return _u
}

// ClearTenant clears the "tenant" edge to the Company entity.
func (_u *StageUpdate) ClearTenant() *StageUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StageUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StageUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := stage.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StageUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := stage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Stage.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := stage.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Stage.color": %w`, err)}
		}
	}
	if _u.mutation.PipelineCleared() && len(_u.mutation.PipelineIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stage.pipeline"`)
	}
	return nil
}

func (_u *StageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stage.Table, stage.Columns, sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(stage.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(stage.FieldColor, field.TypeString, value)
	}
	if value, ok := _u.mutation.LossOrGain(); ok {
		_spec.SetField(stage.FieldLossOrGain, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(stage.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PipelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.PipelineTable,
			Columns: []string{stage.PipelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pipeline.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PipelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.PipelineTable,
			Columns: []string{stage.PipelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pipeline.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   stage.DealsTable,
			Columns: []string{stage.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDealsIDs(); len(nodes) > 0 && !_u.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   stage.DealsTable,
			Columns: []string{stage.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   stage.DealsTable,
			Columns: []string{stage.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.QueueTable,
			Columns: []string{stage.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.QueueTable,
			Columns: []string{stage.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.TenantTable,
			Columns: []string{stage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.TenantTable,
			Columns: []string{stage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StageUpdateOne is the builder for updating a single Stage entity.
type StageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StageMutation
}

// SetName sets the "name" field.
func (_u *StageUpdateOne) SetName(v string) *StageUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StageUpdateOne) SetNillableName(v *string) *StageUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetColor sets the "color" field.
func (_u *StageUpdateOne) SetColor(v string) *StageUpdateOne {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *StageUpdateOne) SetNillableColor(v *string) *StageUpdateOne {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// SetLossOrGain sets the "lossOrGain" field.
func (_u *StageUpdateOne) SetLossOrGain(v bool) *StageUpdateOne {
	_u.mutation.SetLossOrGain(v)
	return _u
}

// SetNillableLossOrGain sets the "lossOrGain" field if the given value is not nil.
func (_u *StageUpdateOne) SetNillableLossOrGain(v *bool) *StageUpdateOne {
	if v != nil {
		_u.SetLossOrGain(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *StageUpdateOne) SetUpdatedAt(v time.Time) *StageUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetTenantId sets the "tenantId" field.
func (_u *StageUpdateOne) SetTenantId(v uuid.UUID) *StageUpdateOne {
	_u.mutation.SetTenantId(v)
	return _u
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (_u *StageUpdateOne) SetNillableTenantId(v *uuid.UUID) *StageUpdateOne {
	if v != nil {
		_u.SetTenantId(*v)
	}
	return _u
}

// ClearTenantId clears the value of the "tenantId" field.
func (_u *StageUpdateOne) ClearTenantId() *StageUpdateOne {
	_u.mutation.ClearTenantId()
	return _u
}

// SetPipelineID sets the "pipeline" edge to the Pipeline entity by ID.
func (_u *StageUpdateOne) SetPipelineID(id uuid.UUID) *StageUpdateOne {
	_u.mutation.SetPipelineID(id)
	return _u
}

// SetPipeline sets the "pipeline" edge to the Pipeline entity.
func (_u *StageUpdateOne) SetPipeline(v *Pipeline) *StageUpdateOne {
	return _u.SetPipelineID(v.ID)
}

// AddDealIDs adds the "deals" edge to the Deal entity by IDs.
func (_u *StageUpdateOne) AddDealIDs(ids ...uuid.UUID) *StageUpdateOne {
	_u.mutation.AddDealIDs(ids...)
	return _u
}

// AddDeals adds the "deals" edges to the Deal entity.
func (_u *StageUpdateOne) AddDeals(v ...*Deal) *StageUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDealIDs(ids...)
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (_u *StageUpdateOne) SetQueueID(id uuid.UUID) *StageUpdateOne {
	_u.mutation.SetQueueID(id)
	return _u
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (_u *StageUpdateOne) SetNillableQueueID(id *uuid.UUID) *StageUpdateOne {
	if id != nil {
		_u = _u.SetQueueID(*id)
	}
	return _u
}

// SetQueue sets the "queue" edge to the Queue entity.
func (_u *StageUpdateOne) SetQueue(v *Queue) *StageUpdateOne {
	return _u.SetQueueID(v.ID)
}

// SetTenantID sets the "tenant" edge to the Company entity by ID.
func (_u *StageUpdateOne) SetTenantID(id uuid.UUID) *StageUpdateOne {
	_u.mutation.SetTenantID(id)
	return _u
}

// SetNillableTenantID sets the "tenant" edge to the Company entity by ID if the given value is not nil.
func (_u *StageUpdateOne) SetNillableTenantID(id *uuid.UUID) *StageUpdateOne {
	if id != nil {
		_u = _u.SetTenantID(*id)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Company entity.
func (_u *StageUpdateOne) SetTenant(v *Company) *StageUpdateOne {
	return _u.SetTenantID(v.ID)
}

// Mutation returns the StageMutation object of the builder.
func (_u *StageUpdateOne) Mutation() *StageMutation {
	return _u.mutation
}

// ClearPipeline clears the "pipeline" edge to the Pipeline entity.
func (_u *StageUpdateOne) ClearPipeline() *StageUpdateOne {
	_u.mutation.ClearPipeline()
	return _u
}

// ClearDeals clears all "deals" edges to the Deal entity.
func (_u *StageUpdateOne) ClearDeals() *StageUpdateOne {
	_u.mutation.ClearDeals()
	return _u
}

// RemoveDealIDs removes the "deals" edge to Deal entities by IDs.
func (_u *StageUpdateOne) RemoveDealIDs(ids ...uuid.UUID) *StageUpdateOne {
	_u.mutation.RemoveDealIDs(ids...)
	return _u
}

// RemoveDeals removes "deals" edges to Deal entities.
func (_u *StageUpdateOne) RemoveDeals(v ...*Deal) *StageUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDealIDs(ids...)
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (_u *StageUpdateOne) ClearQueue() *StageUpdateOne {
	_u.mutation.ClearQueue()
	return _u
}

// ClearTenant clears the "tenant" edge to the Company entity.
func (_u *StageUpdateOne) ClearTenant() *StageUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// Where appends a list predicates to the StageUpdate builder.
func (_u *StageUpdateOne) Where(ps ...predicate.Stage) *StageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StageUpdateOne) Select(field string, fields ...string) *StageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Stage entity.
func (_u *StageUpdateOne) Save(ctx context.Context) (*Stage, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StageUpdateOne) SaveX(ctx context.Context) *Stage {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StageUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := stage.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StageUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := stage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Stage.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := stage.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Stage.color": %w`, err)}
		}
	}
	if _u.mutation.PipelineCleared() && len(_u.mutation.PipelineIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stage.pipeline"`)
	}
	return nil
}

func (_u *StageUpdateOne) sqlSave(ctx context.Context) (_node *Stage, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stage.Table, stage.Columns, sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stage.FieldID)
		for _, f := range fields {
			if !stage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(stage.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(stage.FieldColor, field.TypeString, value)
	}
	if value, ok := _u.mutation.LossOrGain(); ok {
		_spec.SetField(stage.FieldLossOrGain, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(stage.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PipelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.PipelineTable,
			Columns: []string{stage.PipelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pipeline.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PipelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.PipelineTable,
			Columns: []string{stage.PipelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pipeline.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   stage.DealsTable,
			Columns: []string{stage.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDealsIDs(); len(nodes) > 0 && !_u.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   stage.DealsTable,
			Columns: []string{stage.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   stage.DealsTable,
			Columns: []string{stage.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.QueueTable,
			Columns: []string{stage.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.QueueTable,
			Columns: []string{stage.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.TenantTable,
			Columns: []string{stage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.TenantTable,
			Columns: []string{stage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stage{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
