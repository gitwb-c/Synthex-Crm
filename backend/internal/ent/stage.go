// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/pipeline"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/queue"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/stage"
	"github.com/google/uuid"
)

// Stage is the model entity for the Stage schema.
type Stage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// LossOrGain holds the value of the "lossOrGain" field.
	LossOrGain bool `json:"lossOrGain,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId uuid.UUID `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StageQuery when eager-loading is set.
	Edges          StageEdges `json:"edges"`
	stage_pipeline *uuid.UUID
	stage_queue    *uuid.UUID
	selectValues   sql.SelectValues
}

// StageEdges holds the relations/edges for other nodes in the graph.
type StageEdges struct {
	// Pipeline holds the value of the pipeline edge.
	Pipeline *Pipeline `json:"pipeline,omitempty"`
	// Deals holds the value of the deals edge.
	Deals []*Deal `json:"deals,omitempty"`
	// Queue holds the value of the queue edge.
	Queue *Queue `json:"queue,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Company `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedDeals map[string][]*Deal
}

// PipelineOrErr returns the Pipeline value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StageEdges) PipelineOrErr() (*Pipeline, error) {
	if e.Pipeline != nil {
		return e.Pipeline, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: pipeline.Label}
	}
	return nil, &NotLoadedError{edge: "pipeline"}
}

// DealsOrErr returns the Deals value or an error if the edge
// was not loaded in eager-loading.
func (e StageEdges) DealsOrErr() ([]*Deal, error) {
	if e.loadedTypes[1] {
		return e.Deals, nil
	}
	return nil, &NotLoadedError{edge: "deals"}
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StageEdges) QueueOrErr() (*Queue, error) {
	if e.Queue != nil {
		return e.Queue, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: queue.Label}
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StageEdges) TenantOrErr() (*Company, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stage.FieldLossOrGain:
			values[i] = new(sql.NullBool)
		case stage.FieldName, stage.FieldColor:
			values[i] = new(sql.NullString)
		case stage.FieldCreatedAt, stage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case stage.FieldID, stage.FieldTenantId:
			values[i] = new(uuid.UUID)
		case stage.ForeignKeys[0]: // stage_pipeline
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case stage.ForeignKeys[1]: // stage_queue
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stage fields.
func (_m *Stage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case stage.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case stage.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		case stage.FieldLossOrGain:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field lossOrGain", values[i])
			} else if value.Valid {
				_m.LossOrGain = value.Bool
			}
		case stage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case stage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case stage.FieldTenantId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value != nil {
				_m.TenantId = *value
			}
		case stage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field stage_pipeline", values[i])
			} else if value.Valid {
				_m.stage_pipeline = new(uuid.UUID)
				*_m.stage_pipeline = *value.S.(*uuid.UUID)
			}
		case stage.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field stage_queue", values[i])
			} else if value.Valid {
				_m.stage_queue = new(uuid.UUID)
				*_m.stage_queue = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Stage.
// This includes values selected through modifiers, order, etc.
func (_m *Stage) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPipeline queries the "pipeline" edge of the Stage entity.
func (_m *Stage) QueryPipeline() *PipelineQuery {
	return NewStageClient(_m.config).QueryPipeline(_m)
}

// QueryDeals queries the "deals" edge of the Stage entity.
func (_m *Stage) QueryDeals() *DealQuery {
	return NewStageClient(_m.config).QueryDeals(_m)
}

// QueryQueue queries the "queue" edge of the Stage entity.
func (_m *Stage) QueryQueue() *QueueQuery {
	return NewStageClient(_m.config).QueryQueue(_m)
}

// QueryTenant queries the "tenant" edge of the Stage entity.
func (_m *Stage) QueryTenant() *CompanyQuery {
	return NewStageClient(_m.config).QueryTenant(_m)
}

// Update returns a builder for updating this Stage.
// Note that you need to call Stage.Unwrap() before calling this method if this Stage
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Stage) Update() *StageUpdateOne {
	return NewStageClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Stage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Stage) Unwrap() *Stage {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stage is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Stage) String() string {
	var builder strings.Builder
	builder.WriteString("Stage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteString(", ")
	builder.WriteString("lossOrGain=")
	builder.WriteString(fmt.Sprintf("%v", _m.LossOrGain))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeals returns the Deals named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Stage) NamedDeals(name string) ([]*Deal, error) {
	if _m.Edges.namedDeals == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedDeals[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Stage) appendNamedDeals(name string, edges ...*Deal) {
	if _m.Edges.namedDeals == nil {
		_m.Edges.namedDeals = make(map[string][]*Deal)
	}
	if len(edges) == 0 {
		_m.Edges.namedDeals[name] = []*Deal{}
	} else {
		_m.Edges.namedDeals[name] = append(_m.Edges.namedDeals[name], edges...)
	}
}

// Stages is a parsable slice of Stage.
type Stages []*Stage
