// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/chat"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employee"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/file"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/message"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/text"
	"github.com/google/uuid"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (_u *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSentBy sets the "sentBy" field.
func (_u *MessageUpdate) SetSentBy(v message.SentBy) *MessageUpdate {
	_u.mutation.SetSentBy(v)
	return _u
}

// SetNillableSentBy sets the "sentBy" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableSentBy(v *message.SentBy) *MessageUpdate {
	if v != nil {
		_u.SetSentBy(*v)
	}
	return _u
}

// SetPrivate sets the "private" field.
func (_u *MessageUpdate) SetPrivate(v bool) *MessageUpdate {
	_u.mutation.SetPrivate(v)
	return _u
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (_u *MessageUpdate) SetNillablePrivate(v *bool) *MessageUpdate {
	if v != nil {
		_u.SetPrivate(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *MessageUpdate) SetType(v message.Type) *MessageUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableType(v *message.Type) *MessageUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *MessageUpdate) SetUpdatedAt(v time.Time) *MessageUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (_u *MessageUpdate) SetChatID(id uuid.UUID) *MessageUpdate {
	_u.mutation.SetChatID(id)
	return _u
}

// SetNillableChatID sets the "chat" edge to the Chat entity by ID if the given value is not nil.
func (_u *MessageUpdate) SetNillableChatID(id *uuid.UUID) *MessageUpdate {
	if id != nil {
		_u = _u.SetChatID(*id)
	}
	return _u
}

// SetChat sets the "chat" edge to the Chat entity.
func (_u *MessageUpdate) SetChat(v *Chat) *MessageUpdate {
	return _u.SetChatID(v.ID)
}

// AddEmployeeIDs adds the "employee" edge to the Employee entity by IDs.
func (_u *MessageUpdate) AddEmployeeIDs(ids ...uuid.UUID) *MessageUpdate {
	_u.mutation.AddEmployeeIDs(ids...)
	return _u
}

// AddEmployee adds the "employee" edges to the Employee entity.
func (_u *MessageUpdate) AddEmployee(v ...*Employee) *MessageUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEmployeeIDs(ids...)
}

// SetTextID sets the "text" edge to the Text entity by ID.
func (_u *MessageUpdate) SetTextID(id uuid.UUID) *MessageUpdate {
	_u.mutation.SetTextID(id)
	return _u
}

// SetNillableTextID sets the "text" edge to the Text entity by ID if the given value is not nil.
func (_u *MessageUpdate) SetNillableTextID(id *uuid.UUID) *MessageUpdate {
	if id != nil {
		_u = _u.SetTextID(*id)
	}
	return _u
}

// SetText sets the "text" edge to the Text entity.
func (_u *MessageUpdate) SetText(v *Text) *MessageUpdate {
	return _u.SetTextID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *MessageUpdate) SetFileID(id uuid.UUID) *MessageUpdate {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *MessageUpdate) SetNillableFileID(id *uuid.UUID) *MessageUpdate {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *MessageUpdate) SetFile(v *File) *MessageUpdate {
	return _u.SetFileID(v.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (_u *MessageUpdate) Mutation() *MessageMutation {
	return _u.mutation
}

// ClearChat clears the "chat" edge to the Chat entity.
func (_u *MessageUpdate) ClearChat() *MessageUpdate {
	_u.mutation.ClearChat()
	return _u
}

// ClearEmployee clears all "employee" edges to the Employee entity.
func (_u *MessageUpdate) ClearEmployee() *MessageUpdate {
	_u.mutation.ClearEmployee()
	return _u
}

// RemoveEmployeeIDs removes the "employee" edge to Employee entities by IDs.
func (_u *MessageUpdate) RemoveEmployeeIDs(ids ...uuid.UUID) *MessageUpdate {
	_u.mutation.RemoveEmployeeIDs(ids...)
	return _u
}

// RemoveEmployee removes "employee" edges to Employee entities.
func (_u *MessageUpdate) RemoveEmployee(v ...*Employee) *MessageUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEmployeeIDs(ids...)
}

// ClearText clears the "text" edge to the Text entity.
func (_u *MessageUpdate) ClearText() *MessageUpdate {
	_u.mutation.ClearText()
	return _u
}

// ClearFile clears the "file" edge to the File entity.
func (_u *MessageUpdate) ClearFile() *MessageUpdate {
	_u.mutation.ClearFile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MessageUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MessageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MessageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MessageUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MessageUpdate) check() error {
	if v, ok := _u.mutation.SentBy(); ok {
		if err := message.SentByValidator(v); err != nil {
			return &ValidationError{Name: "sentBy", err: fmt.Errorf(`ent: validator failed for field "Message.sentBy": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := message.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Message.type": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Message.tenant"`)
	}
	return nil
}

func (_u *MessageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SentBy(); ok {
		_spec.SetField(message.FieldSentBy, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Private(); ok {
		_spec.SetField(message.FieldPrivate, field.TypeBool, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   message.EmployeeTable,
			Columns: message.EmployeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEmployeeIDs(); len(nodes) > 0 && !_u.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   message.EmployeeTable,
			Columns: message.EmployeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   message.EmployeeTable,
			Columns: message.EmployeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.TextTable,
			Columns: []string{message.TextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(text.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.TextTable,
			Columns: []string{message.TextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(text.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.FileTable,
			Columns: []string{message.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.FileTable,
			Columns: []string{message.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetSentBy sets the "sentBy" field.
func (_u *MessageUpdateOne) SetSentBy(v message.SentBy) *MessageUpdateOne {
	_u.mutation.SetSentBy(v)
	return _u
}

// SetNillableSentBy sets the "sentBy" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableSentBy(v *message.SentBy) *MessageUpdateOne {
	if v != nil {
		_u.SetSentBy(*v)
	}
	return _u
}

// SetPrivate sets the "private" field.
func (_u *MessageUpdateOne) SetPrivate(v bool) *MessageUpdateOne {
	_u.mutation.SetPrivate(v)
	return _u
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillablePrivate(v *bool) *MessageUpdateOne {
	if v != nil {
		_u.SetPrivate(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *MessageUpdateOne) SetType(v message.Type) *MessageUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableType(v *message.Type) *MessageUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *MessageUpdateOne) SetUpdatedAt(v time.Time) *MessageUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (_u *MessageUpdateOne) SetChatID(id uuid.UUID) *MessageUpdateOne {
	_u.mutation.SetChatID(id)
	return _u
}

// SetNillableChatID sets the "chat" edge to the Chat entity by ID if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableChatID(id *uuid.UUID) *MessageUpdateOne {
	if id != nil {
		_u = _u.SetChatID(*id)
	}
	return _u
}

// SetChat sets the "chat" edge to the Chat entity.
func (_u *MessageUpdateOne) SetChat(v *Chat) *MessageUpdateOne {
	return _u.SetChatID(v.ID)
}

// AddEmployeeIDs adds the "employee" edge to the Employee entity by IDs.
func (_u *MessageUpdateOne) AddEmployeeIDs(ids ...uuid.UUID) *MessageUpdateOne {
	_u.mutation.AddEmployeeIDs(ids...)
	return _u
}

// AddEmployee adds the "employee" edges to the Employee entity.
func (_u *MessageUpdateOne) AddEmployee(v ...*Employee) *MessageUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEmployeeIDs(ids...)
}

// SetTextID sets the "text" edge to the Text entity by ID.
func (_u *MessageUpdateOne) SetTextID(id uuid.UUID) *MessageUpdateOne {
	_u.mutation.SetTextID(id)
	return _u
}

// SetNillableTextID sets the "text" edge to the Text entity by ID if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableTextID(id *uuid.UUID) *MessageUpdateOne {
	if id != nil {
		_u = _u.SetTextID(*id)
	}
	return _u
}

// SetText sets the "text" edge to the Text entity.
func (_u *MessageUpdateOne) SetText(v *Text) *MessageUpdateOne {
	return _u.SetTextID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *MessageUpdateOne) SetFileID(id uuid.UUID) *MessageUpdateOne {
	_u.mutation.SetFileID(id)
	return _u
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableFileID(id *uuid.UUID) *MessageUpdateOne {
	if id != nil {
		_u = _u.SetFileID(*id)
	}
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *MessageUpdateOne) SetFile(v *File) *MessageUpdateOne {
	return _u.SetFileID(v.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (_u *MessageUpdateOne) Mutation() *MessageMutation {
	return _u.mutation
}

// ClearChat clears the "chat" edge to the Chat entity.
func (_u *MessageUpdateOne) ClearChat() *MessageUpdateOne {
	_u.mutation.ClearChat()
	return _u
}

// ClearEmployee clears all "employee" edges to the Employee entity.
func (_u *MessageUpdateOne) ClearEmployee() *MessageUpdateOne {
	_u.mutation.ClearEmployee()
	return _u
}

// RemoveEmployeeIDs removes the "employee" edge to Employee entities by IDs.
func (_u *MessageUpdateOne) RemoveEmployeeIDs(ids ...uuid.UUID) *MessageUpdateOne {
	_u.mutation.RemoveEmployeeIDs(ids...)
	return _u
}

// RemoveEmployee removes "employee" edges to Employee entities.
func (_u *MessageUpdateOne) RemoveEmployee(v ...*Employee) *MessageUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEmployeeIDs(ids...)
}

// ClearText clears the "text" edge to the Text entity.
func (_u *MessageUpdateOne) ClearText() *MessageUpdateOne {
	_u.mutation.ClearText()
	return _u
}

// ClearFile clears the "file" edge to the File entity.
func (_u *MessageUpdateOne) ClearFile() *MessageUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// Where appends a list predicates to the MessageUpdate builder.
func (_u *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Message entity.
func (_u *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MessageUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MessageUpdateOne) check() error {
	if v, ok := _u.mutation.SentBy(); ok {
		if err := message.SentByValidator(v); err != nil {
			return &ValidationError{Name: "sentBy", err: fmt.Errorf(`ent: validator failed for field "Message.sentBy": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := message.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Message.type": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Message.tenant"`)
	}
	return nil
}

func (_u *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SentBy(); ok {
		_spec.SetField(message.FieldSentBy, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Private(); ok {
		_spec.SetField(message.FieldPrivate, field.TypeBool, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   message.EmployeeTable,
			Columns: message.EmployeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEmployeeIDs(); len(nodes) > 0 && !_u.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   message.EmployeeTable,
			Columns: message.EmployeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   message.EmployeeTable,
			Columns: message.EmployeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.TextTable,
			Columns: []string{message.TextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(text.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.TextTable,
			Columns: []string{message.TextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(text.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.FileTable,
			Columns: []string{message.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.FileTable,
			Columns: []string{message.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
