// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/chat"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/deal"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employee"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/message"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/google/uuid"
)

// ChatUpdate is the builder for updating Chat entities.
type ChatUpdate struct {
	config
	hooks    []Hook
	mutation *ChatMutation
}

// Where appends a list predicates to the ChatUpdate builder.
func (_u *ChatUpdate) Where(ps ...predicate.Chat) *ChatUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *ChatUpdate) SetTitle(v string) *ChatUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ChatUpdate) SetNillableTitle(v *string) *ChatUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetAccepted sets the "accepted" field.
func (_u *ChatUpdate) SetAccepted(v bool) *ChatUpdate {
	_u.mutation.SetAccepted(v)
	return _u
}

// SetNillableAccepted sets the "accepted" field if the given value is not nil.
func (_u *ChatUpdate) SetNillableAccepted(v *bool) *ChatUpdate {
	if v != nil {
		_u.SetAccepted(*v)
	}
	return _u
}

// SetLocked sets the "locked" field.
func (_u *ChatUpdate) SetLocked(v bool) *ChatUpdate {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *ChatUpdate) SetNillableLocked(v *bool) *ChatUpdate {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *ChatUpdate) SetUpdatedAt(v time.Time) *ChatUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetTenantId sets the "tenantId" field.
func (_u *ChatUpdate) SetTenantId(v uuid.UUID) *ChatUpdate {
	_u.mutation.SetTenantId(v)
	return _u
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (_u *ChatUpdate) SetNillableTenantId(v *uuid.UUID) *ChatUpdate {
	if v != nil {
		_u.SetTenantId(*v)
	}
	return _u
}

// ClearTenantId clears the value of the "tenantId" field.
func (_u *ChatUpdate) ClearTenantId() *ChatUpdate {
	_u.mutation.ClearTenantId()
	return _u
}

// SetDealID sets the "deal" edge to the Deal entity by ID.
func (_u *ChatUpdate) SetDealID(id uuid.UUID) *ChatUpdate {
	_u.mutation.SetDealID(id)
	return _u
}

// SetNillableDealID sets the "deal" edge to the Deal entity by ID if the given value is not nil.
func (_u *ChatUpdate) SetNillableDealID(id *uuid.UUID) *ChatUpdate {
	if id != nil {
		_u = _u.SetDealID(*id)
	}
	return _u
}

// SetDeal sets the "deal" edge to the Deal entity.
func (_u *ChatUpdate) SetDeal(v *Deal) *ChatUpdate {
	return _u.SetDealID(v.ID)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (_u *ChatUpdate) AddEmployeeIDs(ids ...uuid.UUID) *ChatUpdate {
	_u.mutation.AddEmployeeIDs(ids...)
	return _u
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (_u *ChatUpdate) AddEmployees(v ...*Employee) *ChatUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEmployeeIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (_u *ChatUpdate) AddMessageIDs(ids ...uuid.UUID) *ChatUpdate {
	_u.mutation.AddMessageIDs(ids...)
	return _u
}

// AddMessages adds the "messages" edges to the Message entity.
func (_u *ChatUpdate) AddMessages(v ...*Message) *ChatUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDs(ids...)
}

// SetTenantID sets the "tenant" edge to the Company entity by ID.
func (_u *ChatUpdate) SetTenantID(id uuid.UUID) *ChatUpdate {
	_u.mutation.SetTenantID(id)
	return _u
}

// SetNillableTenantID sets the "tenant" edge to the Company entity by ID if the given value is not nil.
func (_u *ChatUpdate) SetNillableTenantID(id *uuid.UUID) *ChatUpdate {
	if id != nil {
		_u = _u.SetTenantID(*id)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Company entity.
func (_u *ChatUpdate) SetTenant(v *Company) *ChatUpdate {
	return _u.SetTenantID(v.ID)
}

// Mutation returns the ChatMutation object of the builder.
func (_u *ChatUpdate) Mutation() *ChatMutation {
	return _u.mutation
}

// ClearDeal clears the "deal" edge to the Deal entity.
func (_u *ChatUpdate) ClearDeal() *ChatUpdate {
	_u.mutation.ClearDeal()
	return _u
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (_u *ChatUpdate) ClearEmployees() *ChatUpdate {
	_u.mutation.ClearEmployees()
	return _u
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (_u *ChatUpdate) RemoveEmployeeIDs(ids ...uuid.UUID) *ChatUpdate {
	_u.mutation.RemoveEmployeeIDs(ids...)
	return _u
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (_u *ChatUpdate) RemoveEmployees(v ...*Employee) *ChatUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEmployeeIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (_u *ChatUpdate) ClearMessages() *ChatUpdate {
	_u.mutation.ClearMessages()
	return _u
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (_u *ChatUpdate) RemoveMessageIDs(ids ...uuid.UUID) *ChatUpdate {
	_u.mutation.RemoveMessageIDs(ids...)
	return _u
}

// RemoveMessages removes "messages" edges to Message entities.
func (_u *ChatUpdate) RemoveMessages(v ...*Message) *ChatUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDs(ids...)
}

// ClearTenant clears the "tenant" edge to the Company entity.
func (_u *ChatUpdate) ClearTenant() *ChatUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChatUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChatUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChatUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChatUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ChatUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := chat.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChatUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := chat.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Chat.title": %w`, err)}
		}
	}
	return nil
}

func (_u *ChatUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chat.Table, chat.Columns, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(chat.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Accepted(); ok {
		_spec.SetField(chat.FieldAccepted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(chat.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(chat.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.DealTable,
			Columns: []string{chat.DealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.DealTable,
			Columns: []string{chat.DealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chat.EmployeesTable,
			Columns: chat.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !_u.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chat.EmployeesTable,
			Columns: chat.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chat.EmployeesTable,
			Columns: chat.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !_u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chat.TenantTable,
			Columns: []string{chat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chat.TenantTable,
			Columns: []string{chat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChatUpdateOne is the builder for updating a single Chat entity.
type ChatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatMutation
}

// SetTitle sets the "title" field.
func (_u *ChatUpdateOne) SetTitle(v string) *ChatUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ChatUpdateOne) SetNillableTitle(v *string) *ChatUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetAccepted sets the "accepted" field.
func (_u *ChatUpdateOne) SetAccepted(v bool) *ChatUpdateOne {
	_u.mutation.SetAccepted(v)
	return _u
}

// SetNillableAccepted sets the "accepted" field if the given value is not nil.
func (_u *ChatUpdateOne) SetNillableAccepted(v *bool) *ChatUpdateOne {
	if v != nil {
		_u.SetAccepted(*v)
	}
	return _u
}

// SetLocked sets the "locked" field.
func (_u *ChatUpdateOne) SetLocked(v bool) *ChatUpdateOne {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *ChatUpdateOne) SetNillableLocked(v *bool) *ChatUpdateOne {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *ChatUpdateOne) SetUpdatedAt(v time.Time) *ChatUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetTenantId sets the "tenantId" field.
func (_u *ChatUpdateOne) SetTenantId(v uuid.UUID) *ChatUpdateOne {
	_u.mutation.SetTenantId(v)
	return _u
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (_u *ChatUpdateOne) SetNillableTenantId(v *uuid.UUID) *ChatUpdateOne {
	if v != nil {
		_u.SetTenantId(*v)
	}
	return _u
}

// ClearTenantId clears the value of the "tenantId" field.
func (_u *ChatUpdateOne) ClearTenantId() *ChatUpdateOne {
	_u.mutation.ClearTenantId()
	return _u
}

// SetDealID sets the "deal" edge to the Deal entity by ID.
func (_u *ChatUpdateOne) SetDealID(id uuid.UUID) *ChatUpdateOne {
	_u.mutation.SetDealID(id)
	return _u
}

// SetNillableDealID sets the "deal" edge to the Deal entity by ID if the given value is not nil.
func (_u *ChatUpdateOne) SetNillableDealID(id *uuid.UUID) *ChatUpdateOne {
	if id != nil {
		_u = _u.SetDealID(*id)
	}
	return _u
}

// SetDeal sets the "deal" edge to the Deal entity.
func (_u *ChatUpdateOne) SetDeal(v *Deal) *ChatUpdateOne {
	return _u.SetDealID(v.ID)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (_u *ChatUpdateOne) AddEmployeeIDs(ids ...uuid.UUID) *ChatUpdateOne {
	_u.mutation.AddEmployeeIDs(ids...)
	return _u
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (_u *ChatUpdateOne) AddEmployees(v ...*Employee) *ChatUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEmployeeIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (_u *ChatUpdateOne) AddMessageIDs(ids ...uuid.UUID) *ChatUpdateOne {
	_u.mutation.AddMessageIDs(ids...)
	return _u
}

// AddMessages adds the "messages" edges to the Message entity.
func (_u *ChatUpdateOne) AddMessages(v ...*Message) *ChatUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDs(ids...)
}

// SetTenantID sets the "tenant" edge to the Company entity by ID.
func (_u *ChatUpdateOne) SetTenantID(id uuid.UUID) *ChatUpdateOne {
	_u.mutation.SetTenantID(id)
	return _u
}

// SetNillableTenantID sets the "tenant" edge to the Company entity by ID if the given value is not nil.
func (_u *ChatUpdateOne) SetNillableTenantID(id *uuid.UUID) *ChatUpdateOne {
	if id != nil {
		_u = _u.SetTenantID(*id)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Company entity.
func (_u *ChatUpdateOne) SetTenant(v *Company) *ChatUpdateOne {
	return _u.SetTenantID(v.ID)
}

// Mutation returns the ChatMutation object of the builder.
func (_u *ChatUpdateOne) Mutation() *ChatMutation {
	return _u.mutation
}

// ClearDeal clears the "deal" edge to the Deal entity.
func (_u *ChatUpdateOne) ClearDeal() *ChatUpdateOne {
	_u.mutation.ClearDeal()
	return _u
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (_u *ChatUpdateOne) ClearEmployees() *ChatUpdateOne {
	_u.mutation.ClearEmployees()
	return _u
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (_u *ChatUpdateOne) RemoveEmployeeIDs(ids ...uuid.UUID) *ChatUpdateOne {
	_u.mutation.RemoveEmployeeIDs(ids...)
	return _u
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (_u *ChatUpdateOne) RemoveEmployees(v ...*Employee) *ChatUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEmployeeIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (_u *ChatUpdateOne) ClearMessages() *ChatUpdateOne {
	_u.mutation.ClearMessages()
	return _u
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (_u *ChatUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *ChatUpdateOne {
	_u.mutation.RemoveMessageIDs(ids...)
	return _u
}

// RemoveMessages removes "messages" edges to Message entities.
func (_u *ChatUpdateOne) RemoveMessages(v ...*Message) *ChatUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDs(ids...)
}

// ClearTenant clears the "tenant" edge to the Company entity.
func (_u *ChatUpdateOne) ClearTenant() *ChatUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// Where appends a list predicates to the ChatUpdate builder.
func (_u *ChatUpdateOne) Where(ps ...predicate.Chat) *ChatUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChatUpdateOne) Select(field string, fields ...string) *ChatUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Chat entity.
func (_u *ChatUpdateOne) Save(ctx context.Context) (*Chat, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChatUpdateOne) SaveX(ctx context.Context) *Chat {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChatUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChatUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ChatUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := chat.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChatUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := chat.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Chat.title": %w`, err)}
		}
	}
	return nil
}

func (_u *ChatUpdateOne) sqlSave(ctx context.Context) (_node *Chat, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chat.Table, chat.Columns, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chat.FieldID)
		for _, f := range fields {
			if !chat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(chat.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Accepted(); ok {
		_spec.SetField(chat.FieldAccepted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(chat.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(chat.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.DealTable,
			Columns: []string{chat.DealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.DealTable,
			Columns: []string{chat.DealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chat.EmployeesTable,
			Columns: chat.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !_u.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chat.EmployeesTable,
			Columns: chat.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chat.EmployeesTable,
			Columns: chat.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !_u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chat.TenantTable,
			Columns: []string{chat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chat.TenantTable,
			Columns: []string{chat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chat{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
