// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/chat"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employee"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/file"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/message"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/text"
	"github.com/google/uuid"
)

// MessageCreate is the builder for creating a Message entity.
type MessageCreate struct {
	config
	mutation *MessageMutation
	hooks    []Hook
}

// SetSentBy sets the "sentBy" field.
func (_c *MessageCreate) SetSentBy(v message.SentBy) *MessageCreate {
	_c.mutation.SetSentBy(v)
	return _c
}

// SetPrivate sets the "private" field.
func (_c *MessageCreate) SetPrivate(v bool) *MessageCreate {
	_c.mutation.SetPrivate(v)
	return _c
}

// SetType sets the "type" field.
func (_c *MessageCreate) SetType(v message.Type) *MessageCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetCreatedAt sets the "createdAt" field.
func (_c *MessageCreate) SetCreatedAt(v time.Time) *MessageCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (_c *MessageCreate) SetNillableCreatedAt(v *time.Time) *MessageCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updatedAt" field.
func (_c *MessageCreate) SetUpdatedAt(v time.Time) *MessageCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (_c *MessageCreate) SetNillableUpdatedAt(v *time.Time) *MessageCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetTenantId sets the "tenantId" field.
func (_c *MessageCreate) SetTenantId(v uuid.UUID) *MessageCreate {
	_c.mutation.SetTenantId(v)
	return _c
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (_c *MessageCreate) SetNillableTenantId(v *uuid.UUID) *MessageCreate {
	if v != nil {
		_c.SetTenantId(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MessageCreate) SetID(v uuid.UUID) *MessageCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *MessageCreate) SetNillableID(v *uuid.UUID) *MessageCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (_c *MessageCreate) SetChatID(id uuid.UUID) *MessageCreate {
	_c.mutation.SetChatID(id)
	return _c
}

// SetNillableChatID sets the "chat" edge to the Chat entity by ID if the given value is not nil.
func (_c *MessageCreate) SetNillableChatID(id *uuid.UUID) *MessageCreate {
	if id != nil {
		_c = _c.SetChatID(*id)
	}
	return _c
}

// SetChat sets the "chat" edge to the Chat entity.
func (_c *MessageCreate) SetChat(v *Chat) *MessageCreate {
	return _c.SetChatID(v.ID)
}

// AddEmployeeIDs adds the "employee" edge to the Employee entity by IDs.
func (_c *MessageCreate) AddEmployeeIDs(ids ...uuid.UUID) *MessageCreate {
	_c.mutation.AddEmployeeIDs(ids...)
	return _c
}

// AddEmployee adds the "employee" edges to the Employee entity.
func (_c *MessageCreate) AddEmployee(v ...*Employee) *MessageCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEmployeeIDs(ids...)
}

// SetTextID sets the "text" edge to the Text entity by ID.
func (_c *MessageCreate) SetTextID(id uuid.UUID) *MessageCreate {
	_c.mutation.SetTextID(id)
	return _c
}

// SetNillableTextID sets the "text" edge to the Text entity by ID if the given value is not nil.
func (_c *MessageCreate) SetNillableTextID(id *uuid.UUID) *MessageCreate {
	if id != nil {
		_c = _c.SetTextID(*id)
	}
	return _c
}

// SetText sets the "text" edge to the Text entity.
func (_c *MessageCreate) SetText(v *Text) *MessageCreate {
	return _c.SetTextID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_c *MessageCreate) SetFileID(id uuid.UUID) *MessageCreate {
	_c.mutation.SetFileID(id)
	return _c
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_c *MessageCreate) SetNillableFileID(id *uuid.UUID) *MessageCreate {
	if id != nil {
		_c = _c.SetFileID(*id)
	}
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *MessageCreate) SetFile(v *File) *MessageCreate {
	return _c.SetFileID(v.ID)
}

// SetTenantID sets the "tenant" edge to the Company entity by ID.
func (_c *MessageCreate) SetTenantID(id uuid.UUID) *MessageCreate {
	_c.mutation.SetTenantID(id)
	return _c
}

// SetNillableTenantID sets the "tenant" edge to the Company entity by ID if the given value is not nil.
func (_c *MessageCreate) SetNillableTenantID(id *uuid.UUID) *MessageCreate {
	if id != nil {
		_c = _c.SetTenantID(*id)
	}
	return _c
}

// SetTenant sets the "tenant" edge to the Company entity.
func (_c *MessageCreate) SetTenant(v *Company) *MessageCreate {
	return _c.SetTenantID(v.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (_c *MessageCreate) Mutation() *MessageMutation {
	return _c.mutation
}

// Save creates the Message in the database.
func (_c *MessageCreate) Save(ctx context.Context) (*Message, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MessageCreate) SaveX(ctx context.Context) *Message {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MessageCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MessageCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MessageCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := message.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := message.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := message.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MessageCreate) check() error {
	if _, ok := _c.mutation.SentBy(); !ok {
		return &ValidationError{Name: "sentBy", err: errors.New(`ent: missing required field "Message.sentBy"`)}
	}
	if v, ok := _c.mutation.SentBy(); ok {
		if err := message.SentByValidator(v); err != nil {
			return &ValidationError{Name: "sentBy", err: fmt.Errorf(`ent: validator failed for field "Message.sentBy": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Private(); !ok {
		return &ValidationError{Name: "private", err: errors.New(`ent: missing required field "Message.private"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Message.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := message.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Message.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Message.createdAt"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Message.updatedAt"`)}
	}
	return nil
}

func (_c *MessageCreate) sqlSave(ctx context.Context) (*Message, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MessageCreate) createSpec() (*Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Message{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(message.Table, sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.SentBy(); ok {
		_spec.SetField(message.FieldSentBy, field.TypeEnum, value)
		_node.SentBy = value
	}
	if value, ok := _c.mutation.Private(); ok {
		_spec.SetField(message.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.message_chat = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   message.EmployeeTable,
			Columns: message.EmployeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.TextTable,
			Columns: []string{message.TextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(text.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.text_message = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.FileTable,
			Columns: []string{message.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_message = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.TenantTable,
			Columns: []string{message.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MessageCreateBulk is the builder for creating many Message entities in bulk.
type MessageCreateBulk struct {
	config
	err      error
	builders []*MessageCreate
}

// Save creates the Message entities in the database.
func (_c *MessageCreateBulk) Save(ctx context.Context) ([]*Message, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Message, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MessageCreateBulk) SaveX(ctx context.Context) []*Message {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MessageCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MessageCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
