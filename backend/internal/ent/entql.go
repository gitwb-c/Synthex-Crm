// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/gitwb-c/crm.saas/backend/internal/ent/chat"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/costumer"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/crmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/deal"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dealcrmfield"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/department"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dropdownlist"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employee"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employeeauth"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/file"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/message"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/pipeline"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/queue"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/rbac"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/stage"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/text"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 17)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   chat.Table,
			Columns: chat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: chat.FieldID,
			},
		},
		Type: "Chat",
		Fields: map[string]*sqlgraph.FieldSpec{
			chat.FieldTitle:     {Type: field.TypeString, Column: chat.FieldTitle},
			chat.FieldAccepted:  {Type: field.TypeBool, Column: chat.FieldAccepted},
			chat.FieldLocked:    {Type: field.TypeBool, Column: chat.FieldLocked},
			chat.FieldCreatedAt: {Type: field.TypeTime, Column: chat.FieldCreatedAt},
			chat.FieldUpdatedAt: {Type: field.TypeTime, Column: chat.FieldUpdatedAt},
			chat.FieldTenantId:  {Type: field.TypeUUID, Column: chat.FieldTenantId},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: company.FieldID,
			},
		},
		Type: "Company",
		Fields: map[string]*sqlgraph.FieldSpec{
			company.FieldName:      {Type: field.TypeString, Column: company.FieldName},
			company.FieldCreatedAt: {Type: field.TypeTime, Column: company.FieldCreatedAt},
			company.FieldUpdatedAt: {Type: field.TypeTime, Column: company.FieldUpdatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   costumer.Table,
			Columns: costumer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: costumer.FieldID,
			},
		},
		Type: "Costumer",
		Fields: map[string]*sqlgraph.FieldSpec{
			costumer.FieldName:      {Type: field.TypeString, Column: costumer.FieldName},
			costumer.FieldPhone:     {Type: field.TypeString, Column: costumer.FieldPhone},
			costumer.FieldEmail:     {Type: field.TypeString, Column: costumer.FieldEmail},
			costumer.FieldCreatedAt: {Type: field.TypeTime, Column: costumer.FieldCreatedAt},
			costumer.FieldUpdatedAt: {Type: field.TypeTime, Column: costumer.FieldUpdatedAt},
			costumer.FieldTenantId:  {Type: field.TypeUUID, Column: costumer.FieldTenantId},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   crmfield.Table,
			Columns: crmfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: crmfield.FieldID,
			},
		},
		Type: "CrmField",
		Fields: map[string]*sqlgraph.FieldSpec{
			crmfield.FieldName:      {Type: field.TypeString, Column: crmfield.FieldName},
			crmfield.FieldSection:   {Type: field.TypeString, Column: crmfield.FieldSection},
			crmfield.FieldType:      {Type: field.TypeEnum, Column: crmfield.FieldType},
			crmfield.FieldCreatedAt: {Type: field.TypeTime, Column: crmfield.FieldCreatedAt},
			crmfield.FieldUpdatedAt: {Type: field.TypeTime, Column: crmfield.FieldUpdatedAt},
			crmfield.FieldTenantId:  {Type: field.TypeUUID, Column: crmfield.FieldTenantId},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deal.Table,
			Columns: deal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deal.FieldID,
			},
		},
		Type: "Deal",
		Fields: map[string]*sqlgraph.FieldSpec{
			deal.FieldTitle:     {Type: field.TypeString, Column: deal.FieldTitle},
			deal.FieldSource:    {Type: field.TypeString, Column: deal.FieldSource},
			deal.FieldCreatedAt: {Type: field.TypeTime, Column: deal.FieldCreatedAt},
			deal.FieldUpdatedAt: {Type: field.TypeTime, Column: deal.FieldUpdatedAt},
			deal.FieldTenantId:  {Type: field.TypeUUID, Column: deal.FieldTenantId},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dealcrmfield.Table,
			Columns: dealcrmfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dealcrmfield.FieldID,
			},
		},
		Type: "DealCrmField",
		Fields: map[string]*sqlgraph.FieldSpec{
			dealcrmfield.FieldValue:     {Type: field.TypeString, Column: dealcrmfield.FieldValue},
			dealcrmfield.FieldCreatedAt: {Type: field.TypeTime, Column: dealcrmfield.FieldCreatedAt},
			dealcrmfield.FieldUpdatedAt: {Type: field.TypeTime, Column: dealcrmfield.FieldUpdatedAt},
			dealcrmfield.FieldTenantId:  {Type: field.TypeUUID, Column: dealcrmfield.FieldTenantId},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   department.Table,
			Columns: department.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: department.FieldID,
			},
		},
		Type: "Department",
		Fields: map[string]*sqlgraph.FieldSpec{
			department.FieldName:      {Type: field.TypeString, Column: department.FieldName},
			department.FieldCreatedAt: {Type: field.TypeTime, Column: department.FieldCreatedAt},
			department.FieldUpdatedAt: {Type: field.TypeTime, Column: department.FieldUpdatedAt},
			department.FieldTenantId:  {Type: field.TypeUUID, Column: department.FieldTenantId},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dropdownlist.Table,
			Columns: dropdownlist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dropdownlist.FieldID,
			},
		},
		Type: "DropdownList",
		Fields: map[string]*sqlgraph.FieldSpec{
			dropdownlist.FieldValue:     {Type: field.TypeString, Column: dropdownlist.FieldValue},
			dropdownlist.FieldCreatedAt: {Type: field.TypeTime, Column: dropdownlist.FieldCreatedAt},
			dropdownlist.FieldUpdatedAt: {Type: field.TypeTime, Column: dropdownlist.FieldUpdatedAt},
			dropdownlist.FieldTenantId:  {Type: field.TypeUUID, Column: dropdownlist.FieldTenantId},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: employee.FieldID,
			},
		},
		Type: "Employee",
		Fields: map[string]*sqlgraph.FieldSpec{
			employee.FieldName:             {Type: field.TypeString, Column: employee.FieldName},
			employee.FieldEmploymentStatus: {Type: field.TypeEnum, Column: employee.FieldEmploymentStatus},
			employee.FieldCreatedAt:        {Type: field.TypeTime, Column: employee.FieldCreatedAt},
			employee.FieldUpdatedAt:        {Type: field.TypeTime, Column: employee.FieldUpdatedAt},
			employee.FieldTenantId:         {Type: field.TypeUUID, Column: employee.FieldTenantId},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   employeeauth.Table,
			Columns: employeeauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: employeeauth.FieldID,
			},
		},
		Type: "EmployeeAuth",
		Fields: map[string]*sqlgraph.FieldSpec{
			employeeauth.FieldName:      {Type: field.TypeString, Column: employeeauth.FieldName},
			employeeauth.FieldEmail:     {Type: field.TypeString, Column: employeeauth.FieldEmail},
			employeeauth.FieldPassword:  {Type: field.TypeString, Column: employeeauth.FieldPassword},
			employeeauth.FieldCreatedAt: {Type: field.TypeTime, Column: employeeauth.FieldCreatedAt},
			employeeauth.FieldUpdatedAt: {Type: field.TypeTime, Column: employeeauth.FieldUpdatedAt},
			employeeauth.FieldTenantId:  {Type: field.TypeUUID, Column: employeeauth.FieldTenantId},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   file.Table,
			Columns: file.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: file.FieldID,
			},
		},
		Type: "File",
		Fields: map[string]*sqlgraph.FieldSpec{
			file.FieldURL:      {Type: field.TypeString, Column: file.FieldURL},
			file.FieldCaption:  {Type: field.TypeString, Column: file.FieldCaption},
			file.FieldMimeType: {Type: field.TypeString, Column: file.FieldMimeType},
			file.FieldFileName: {Type: field.TypeString, Column: file.FieldFileName},
			file.FieldTenantId: {Type: field.TypeUUID, Column: file.FieldTenantId},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: message.FieldID,
			},
		},
		Type: "Message",
		Fields: map[string]*sqlgraph.FieldSpec{
			message.FieldSentBy:    {Type: field.TypeEnum, Column: message.FieldSentBy},
			message.FieldPrivate:   {Type: field.TypeBool, Column: message.FieldPrivate},
			message.FieldType:      {Type: field.TypeEnum, Column: message.FieldType},
			message.FieldCreatedAt: {Type: field.TypeTime, Column: message.FieldCreatedAt},
			message.FieldUpdatedAt: {Type: field.TypeTime, Column: message.FieldUpdatedAt},
			message.FieldTenantId:  {Type: field.TypeUUID, Column: message.FieldTenantId},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   pipeline.Table,
			Columns: pipeline.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pipeline.FieldID,
			},
		},
		Type: "Pipeline",
		Fields: map[string]*sqlgraph.FieldSpec{
			pipeline.FieldName:      {Type: field.TypeString, Column: pipeline.FieldName},
			pipeline.FieldCreatedAt: {Type: field.TypeTime, Column: pipeline.FieldCreatedAt},
			pipeline.FieldUpdatedAt: {Type: field.TypeTime, Column: pipeline.FieldUpdatedAt},
			pipeline.FieldTenantId:  {Type: field.TypeUUID, Column: pipeline.FieldTenantId},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   queue.Table,
			Columns: queue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: queue.FieldID,
			},
		},
		Type: "Queue",
		Fields: map[string]*sqlgraph.FieldSpec{
			queue.FieldName:      {Type: field.TypeString, Column: queue.FieldName},
			queue.FieldType:      {Type: field.TypeEnum, Column: queue.FieldType},
			queue.FieldCreatedAt: {Type: field.TypeTime, Column: queue.FieldCreatedAt},
			queue.FieldUpdatedAt: {Type: field.TypeTime, Column: queue.FieldUpdatedAt},
			queue.FieldTenantId:  {Type: field.TypeUUID, Column: queue.FieldTenantId},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rbac.Table,
			Columns: rbac.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rbac.FieldID,
			},
		},
		Type: "Rbac",
		Fields: map[string]*sqlgraph.FieldSpec{
			rbac.FieldAccess:    {Type: field.TypeEnum, Column: rbac.FieldAccess},
			rbac.FieldCreatedAt: {Type: field.TypeTime, Column: rbac.FieldCreatedAt},
			rbac.FieldUpdatedAt: {Type: field.TypeTime, Column: rbac.FieldUpdatedAt},
			rbac.FieldTenantId:  {Type: field.TypeUUID, Column: rbac.FieldTenantId},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stage.Table,
			Columns: stage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stage.FieldID,
			},
		},
		Type: "Stage",
		Fields: map[string]*sqlgraph.FieldSpec{
			stage.FieldName:       {Type: field.TypeString, Column: stage.FieldName},
			stage.FieldColor:      {Type: field.TypeString, Column: stage.FieldColor},
			stage.FieldLossOrGain: {Type: field.TypeBool, Column: stage.FieldLossOrGain},
			stage.FieldCreatedAt:  {Type: field.TypeTime, Column: stage.FieldCreatedAt},
			stage.FieldUpdatedAt:  {Type: field.TypeTime, Column: stage.FieldUpdatedAt},
			stage.FieldTenantId:   {Type: field.TypeUUID, Column: stage.FieldTenantId},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   text.Table,
			Columns: text.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: text.FieldID,
			},
		},
		Type: "Text",
		Fields: map[string]*sqlgraph.FieldSpec{
			text.FieldText:     {Type: field.TypeString, Column: text.FieldText},
			text.FieldTenantId: {Type: field.TypeUUID, Column: text.FieldTenantId},
		},
	}
	graph.MustAddE(
		"deal",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.DealTable,
			Columns: []string{chat.DealColumn},
			Bidi:    false,
		},
		"Chat",
		"Deal",
	)
	graph.MustAddE(
		"employees",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chat.EmployeesTable,
			Columns: chat.EmployeesPrimaryKey,
			Bidi:    false,
		},
		"Chat",
		"Employee",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
		},
		"Chat",
		"Message",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chat.TenantTable,
			Columns: []string{chat.TenantColumn},
			Bidi:    false,
		},
		"Chat",
		"Company",
	)
	graph.MustAddE(
		"employees",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeesTable,
			Columns: []string{company.EmployeesColumn},
			Bidi:    false,
		},
		"Company",
		"Employee",
	)
	graph.MustAddE(
		"costumers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CostumersTable,
			Columns: []string{company.CostumersColumn},
			Bidi:    false,
		},
		"Company",
		"Costumer",
	)
	graph.MustAddE(
		"deals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DealsTable,
			Columns: []string{company.DealsColumn},
			Bidi:    false,
		},
		"Company",
		"Deal",
	)
	graph.MustAddE(
		"chats",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ChatsTable,
			Columns: []string{company.ChatsColumn},
			Bidi:    false,
		},
		"Company",
		"Chat",
	)
	graph.MustAddE(
		"departments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DepartmentsTable,
			Columns: []string{company.DepartmentsColumn},
			Bidi:    false,
		},
		"Company",
		"Department",
	)
	graph.MustAddE(
		"pipelines",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PipelinesTable,
			Columns: []string{company.PipelinesColumn},
			Bidi:    false,
		},
		"Company",
		"Pipeline",
	)
	graph.MustAddE(
		"crmFields",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CrmFieldsTable,
			Columns: []string{company.CrmFieldsColumn},
			Bidi:    false,
		},
		"Company",
		"CrmField",
	)
	graph.MustAddE(
		"dealCrmFields",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DealCrmFieldsTable,
			Columns: []string{company.DealCrmFieldsColumn},
			Bidi:    false,
		},
		"Company",
		"DealCrmField",
	)
	graph.MustAddE(
		"dropdownLists",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.DropdownListsTable,
			Columns: []string{company.DropdownListsColumn},
			Bidi:    false,
		},
		"Company",
		"DropdownList",
	)
	graph.MustAddE(
		"employeeAuths",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmployeeAuthsTable,
			Columns: []string{company.EmployeeAuthsColumn},
			Bidi:    false,
		},
		"Company",
		"EmployeeAuth",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.FilesTable,
			Columns: []string{company.FilesColumn},
			Bidi:    false,
		},
		"Company",
		"File",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.MessagesTable,
			Columns: []string{company.MessagesColumn},
			Bidi:    false,
		},
		"Company",
		"Message",
	)
	graph.MustAddE(
		"queues",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.QueuesTable,
			Columns: []string{company.QueuesColumn},
			Bidi:    false,
		},
		"Company",
		"Queue",
	)
	graph.MustAddE(
		"rbacs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.RbacsTable,
			Columns: []string{company.RbacsColumn},
			Bidi:    false,
		},
		"Company",
		"Rbac",
	)
	graph.MustAddE(
		"stages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.StagesTable,
			Columns: []string{company.StagesColumn},
			Bidi:    false,
		},
		"Company",
		"Stage",
	)
	graph.MustAddE(
		"texts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TextsTable,
			Columns: []string{company.TextsColumn},
			Bidi:    false,
		},
		"Company",
		"Text",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costumer.TenantTable,
			Columns: []string{costumer.TenantColumn},
			Bidi:    false,
		},
		"Costumer",
		"Company",
	)
	graph.MustAddE(
		"deals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   costumer.DealsTable,
			Columns: []string{costumer.DealsColumn},
			Bidi:    false,
		},
		"Costumer",
		"Deal",
	)
	graph.MustAddE(
		"dropdownList",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crmfield.DropdownListTable,
			Columns: crmfield.DropdownListPrimaryKey,
			Bidi:    false,
		},
		"CrmField",
		"DropdownList",
	)
	graph.MustAddE(
		"dealCrmField",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   crmfield.DealCrmFieldTable,
			Columns: []string{crmfield.DealCrmFieldColumn},
			Bidi:    false,
		},
		"CrmField",
		"DealCrmField",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crmfield.TenantTable,
			Columns: []string{crmfield.TenantColumn},
			Bidi:    false,
		},
		"CrmField",
		"Company",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deal.TenantTable,
			Columns: []string{deal.TenantColumn},
			Bidi:    false,
		},
		"Deal",
		"Company",
	)
	graph.MustAddE(
		"costumer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deal.CostumerTable,
			Columns: []string{deal.CostumerColumn},
			Bidi:    false,
		},
		"Deal",
		"Costumer",
	)
	graph.MustAddE(
		"chat",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deal.ChatTable,
			Columns: []string{deal.ChatColumn},
			Bidi:    false,
		},
		"Deal",
		"Chat",
	)
	graph.MustAddE(
		"stage",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deal.StageTable,
			Columns: []string{deal.StageColumn},
			Bidi:    false,
		},
		"Deal",
		"Stage",
	)
	graph.MustAddE(
		"dealCrmFields",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deal.DealCrmFieldsTable,
			Columns: []string{deal.DealCrmFieldsColumn},
			Bidi:    false,
		},
		"Deal",
		"DealCrmField",
	)
	graph.MustAddE(
		"deal",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.DealTable,
			Columns: []string{dealcrmfield.DealColumn},
			Bidi:    false,
		},
		"DealCrmField",
		"Deal",
	)
	graph.MustAddE(
		"crmField",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dealcrmfield.CrmFieldTable,
			Columns: []string{dealcrmfield.CrmFieldColumn},
			Bidi:    false,
		},
		"DealCrmField",
		"CrmField",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dealcrmfield.TenantTable,
			Columns: []string{dealcrmfield.TenantColumn},
			Bidi:    false,
		},
		"DealCrmField",
		"Company",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.TenantTable,
			Columns: []string{department.TenantColumn},
			Bidi:    false,
		},
		"Department",
		"Company",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.EmployeeTable,
			Columns: []string{department.EmployeeColumn},
			Bidi:    false,
		},
		"Department",
		"Employee",
	)
	graph.MustAddE(
		"queues",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   department.QueuesTable,
			Columns: department.QueuesPrimaryKey,
			Bidi:    false,
		},
		"Department",
		"Queue",
	)
	graph.MustAddE(
		"rbacs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.RbacsTable,
			Columns: []string{department.RbacsColumn},
			Bidi:    false,
		},
		"Department",
		"Rbac",
	)
	graph.MustAddE(
		"crmField",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dropdownlist.CrmFieldTable,
			Columns: dropdownlist.CrmFieldPrimaryKey,
			Bidi:    false,
		},
		"DropdownList",
		"CrmField",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dropdownlist.TenantTable,
			Columns: []string{dropdownlist.TenantColumn},
			Bidi:    false,
		},
		"DropdownList",
		"Company",
	)
	graph.MustAddE(
		"employeeAuth",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.EmployeeAuthTable,
			Columns: []string{employee.EmployeeAuthColumn},
			Bidi:    false,
		},
		"Employee",
		"EmployeeAuth",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.TenantTable,
			Columns: []string{employee.TenantColumn},
			Bidi:    false,
		},
		"Employee",
		"Company",
	)
	graph.MustAddE(
		"department",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
		},
		"Employee",
		"Department",
	)
	graph.MustAddE(
		"chat",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ChatTable,
			Columns: employee.ChatPrimaryKey,
			Bidi:    false,
		},
		"Employee",
		"Chat",
	)
	graph.MustAddE(
		"queues",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.QueuesTable,
			Columns: employee.QueuesPrimaryKey,
			Bidi:    false,
		},
		"Employee",
		"Queue",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.MessagesTable,
			Columns: employee.MessagesPrimaryKey,
			Bidi:    false,
		},
		"Employee",
		"Message",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   employeeauth.EmployeeTable,
			Columns: []string{employeeauth.EmployeeColumn},
			Bidi:    false,
		},
		"EmployeeAuth",
		"Employee",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employeeauth.TenantTable,
			Columns: []string{employeeauth.TenantColumn},
			Bidi:    false,
		},
		"EmployeeAuth",
		"Company",
	)
	graph.MustAddE(
		"message",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   file.MessageTable,
			Columns: []string{file.MessageColumn},
			Bidi:    false,
		},
		"File",
		"Message",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.TenantTable,
			Columns: []string{file.TenantColumn},
			Bidi:    false,
		},
		"File",
		"Company",
	)
	graph.MustAddE(
		"chat",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
		},
		"Message",
		"Chat",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   message.EmployeeTable,
			Columns: message.EmployeePrimaryKey,
			Bidi:    false,
		},
		"Message",
		"Employee",
	)
	graph.MustAddE(
		"text",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.TextTable,
			Columns: []string{message.TextColumn},
			Bidi:    false,
		},
		"Message",
		"Text",
	)
	graph.MustAddE(
		"file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.FileTable,
			Columns: []string{message.FileColumn},
			Bidi:    false,
		},
		"Message",
		"File",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.TenantTable,
			Columns: []string{message.TenantColumn},
			Bidi:    false,
		},
		"Message",
		"Company",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pipeline.TenantTable,
			Columns: []string{pipeline.TenantColumn},
			Bidi:    false,
		},
		"Pipeline",
		"Company",
	)
	graph.MustAddE(
		"stages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pipeline.StagesTable,
			Columns: []string{pipeline.StagesColumn},
			Bidi:    false,
		},
		"Pipeline",
		"Stage",
	)
	graph.MustAddE(
		"stages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   queue.StagesTable,
			Columns: []string{queue.StagesColumn},
			Bidi:    false,
		},
		"Queue",
		"Stage",
	)
	graph.MustAddE(
		"employees",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queue.EmployeesTable,
			Columns: queue.EmployeesPrimaryKey,
			Bidi:    false,
		},
		"Queue",
		"Employee",
	)
	graph.MustAddE(
		"department",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   queue.DepartmentTable,
			Columns: queue.DepartmentPrimaryKey,
			Bidi:    false,
		},
		"Queue",
		"Department",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queue.TenantTable,
			Columns: []string{queue.TenantColumn},
			Bidi:    false,
		},
		"Queue",
		"Company",
	)
	graph.MustAddE(
		"department",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rbac.DepartmentTable,
			Columns: []string{rbac.DepartmentColumn},
			Bidi:    false,
		},
		"Rbac",
		"Department",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rbac.TenantTable,
			Columns: []string{rbac.TenantColumn},
			Bidi:    false,
		},
		"Rbac",
		"Company",
	)
	graph.MustAddE(
		"pipeline",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.PipelineTable,
			Columns: []string{stage.PipelineColumn},
			Bidi:    false,
		},
		"Stage",
		"Pipeline",
	)
	graph.MustAddE(
		"deals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   stage.DealsTable,
			Columns: []string{stage.DealsColumn},
			Bidi:    false,
		},
		"Stage",
		"Deal",
	)
	graph.MustAddE(
		"queue",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stage.QueueTable,
			Columns: []string{stage.QueueColumn},
			Bidi:    false,
		},
		"Stage",
		"Queue",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stage.TenantTable,
			Columns: []string{stage.TenantColumn},
			Bidi:    false,
		},
		"Stage",
		"Company",
	)
	graph.MustAddE(
		"message",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   text.MessageTable,
			Columns: []string{text.MessageColumn},
			Bidi:    false,
		},
		"Text",
		"Message",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   text.TenantTable,
			Columns: []string{text.TenantColumn},
			Bidi:    false,
		},
		"Text",
		"Company",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *ChatQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChatQuery builder.
func (_q *ChatQuery) Filter() *ChatFilter {
	return &ChatFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ChatMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChatMutation builder.
func (m *ChatMutation) Filter() *ChatFilter {
	return &ChatFilter{config: m.config, predicateAdder: m}
}

// ChatFilter provides a generic filtering capability at runtime for ChatQuery.
type ChatFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChatFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ChatFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(chat.FieldID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ChatFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(chat.FieldTitle))
}

// WhereAccepted applies the entql bool predicate on the accepted field.
func (f *ChatFilter) WhereAccepted(p entql.BoolP) {
	f.Where(p.Field(chat.FieldAccepted))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *ChatFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(chat.FieldLocked))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *ChatFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(chat.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *ChatFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(chat.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *ChatFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(chat.FieldTenantId))
}

// WhereHasDeal applies a predicate to check if query has an edge deal.
func (f *ChatFilter) WhereHasDeal() {
	f.Where(entql.HasEdge("deal"))
}

// WhereHasDealWith applies a predicate to check if query has an edge deal with a given conditions (other predicates).
func (f *ChatFilter) WhereHasDealWith(preds ...predicate.Deal) {
	f.Where(entql.HasEdgeWith("deal", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployees applies a predicate to check if query has an edge employees.
func (f *ChatFilter) WhereHasEmployees() {
	f.Where(entql.HasEdge("employees"))
}

// WhereHasEmployeesWith applies a predicate to check if query has an edge employees with a given conditions (other predicates).
func (f *ChatFilter) WhereHasEmployeesWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employees", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *ChatFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *ChatFilter) WhereHasMessagesWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ChatFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ChatFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *CompanyQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CompanyQuery builder.
func (_q *CompanyQuery) Filter() *CompanyFilter {
	return &CompanyFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *CompanyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CompanyMutation builder.
func (m *CompanyMutation) Filter() *CompanyFilter {
	return &CompanyFilter{config: m.config, predicateAdder: m}
}

// CompanyFilter provides a generic filtering capability at runtime for CompanyQuery.
type CompanyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CompanyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CompanyFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(company.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *CompanyFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(company.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *CompanyFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(company.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *CompanyFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(company.FieldUpdatedAt))
}

// WhereHasEmployees applies a predicate to check if query has an edge employees.
func (f *CompanyFilter) WhereHasEmployees() {
	f.Where(entql.HasEdge("employees"))
}

// WhereHasEmployeesWith applies a predicate to check if query has an edge employees with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasEmployeesWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employees", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCostumers applies a predicate to check if query has an edge costumers.
func (f *CompanyFilter) WhereHasCostumers() {
	f.Where(entql.HasEdge("costumers"))
}

// WhereHasCostumersWith applies a predicate to check if query has an edge costumers with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasCostumersWith(preds ...predicate.Costumer) {
	f.Where(entql.HasEdgeWith("costumers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeals applies a predicate to check if query has an edge deals.
func (f *CompanyFilter) WhereHasDeals() {
	f.Where(entql.HasEdge("deals"))
}

// WhereHasDealsWith applies a predicate to check if query has an edge deals with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasDealsWith(preds ...predicate.Deal) {
	f.Where(entql.HasEdgeWith("deals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChats applies a predicate to check if query has an edge chats.
func (f *CompanyFilter) WhereHasChats() {
	f.Where(entql.HasEdge("chats"))
}

// WhereHasChatsWith applies a predicate to check if query has an edge chats with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasChatsWith(preds ...predicate.Chat) {
	f.Where(entql.HasEdgeWith("chats", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartments applies a predicate to check if query has an edge departments.
func (f *CompanyFilter) WhereHasDepartments() {
	f.Where(entql.HasEdge("departments"))
}

// WhereHasDepartmentsWith applies a predicate to check if query has an edge departments with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasDepartmentsWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("departments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPipelines applies a predicate to check if query has an edge pipelines.
func (f *CompanyFilter) WhereHasPipelines() {
	f.Where(entql.HasEdge("pipelines"))
}

// WhereHasPipelinesWith applies a predicate to check if query has an edge pipelines with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasPipelinesWith(preds ...predicate.Pipeline) {
	f.Where(entql.HasEdgeWith("pipelines", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCrmFields applies a predicate to check if query has an edge crmFields.
func (f *CompanyFilter) WhereHasCrmFields() {
	f.Where(entql.HasEdge("crmFields"))
}

// WhereHasCrmFieldsWith applies a predicate to check if query has an edge crmFields with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasCrmFieldsWith(preds ...predicate.CrmField) {
	f.Where(entql.HasEdgeWith("crmFields", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDealCrmFields applies a predicate to check if query has an edge dealCrmFields.
func (f *CompanyFilter) WhereHasDealCrmFields() {
	f.Where(entql.HasEdge("dealCrmFields"))
}

// WhereHasDealCrmFieldsWith applies a predicate to check if query has an edge dealCrmFields with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasDealCrmFieldsWith(preds ...predicate.DealCrmField) {
	f.Where(entql.HasEdgeWith("dealCrmFields", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDropdownLists applies a predicate to check if query has an edge dropdownLists.
func (f *CompanyFilter) WhereHasDropdownLists() {
	f.Where(entql.HasEdge("dropdownLists"))
}

// WhereHasDropdownListsWith applies a predicate to check if query has an edge dropdownLists with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasDropdownListsWith(preds ...predicate.DropdownList) {
	f.Where(entql.HasEdgeWith("dropdownLists", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployeeAuths applies a predicate to check if query has an edge employeeAuths.
func (f *CompanyFilter) WhereHasEmployeeAuths() {
	f.Where(entql.HasEdge("employeeAuths"))
}

// WhereHasEmployeeAuthsWith applies a predicate to check if query has an edge employeeAuths with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasEmployeeAuthsWith(preds ...predicate.EmployeeAuth) {
	f.Where(entql.HasEdgeWith("employeeAuths", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *CompanyFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasFilesWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *CompanyFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasMessagesWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasQueues applies a predicate to check if query has an edge queues.
func (f *CompanyFilter) WhereHasQueues() {
	f.Where(entql.HasEdge("queues"))
}

// WhereHasQueuesWith applies a predicate to check if query has an edge queues with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasQueuesWith(preds ...predicate.Queue) {
	f.Where(entql.HasEdgeWith("queues", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRbacs applies a predicate to check if query has an edge rbacs.
func (f *CompanyFilter) WhereHasRbacs() {
	f.Where(entql.HasEdge("rbacs"))
}

// WhereHasRbacsWith applies a predicate to check if query has an edge rbacs with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasRbacsWith(preds ...predicate.Rbac) {
	f.Where(entql.HasEdgeWith("rbacs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStages applies a predicate to check if query has an edge stages.
func (f *CompanyFilter) WhereHasStages() {
	f.Where(entql.HasEdge("stages"))
}

// WhereHasStagesWith applies a predicate to check if query has an edge stages with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasStagesWith(preds ...predicate.Stage) {
	f.Where(entql.HasEdgeWith("stages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTexts applies a predicate to check if query has an edge texts.
func (f *CompanyFilter) WhereHasTexts() {
	f.Where(entql.HasEdge("texts"))
}

// WhereHasTextsWith applies a predicate to check if query has an edge texts with a given conditions (other predicates).
func (f *CompanyFilter) WhereHasTextsWith(preds ...predicate.Text) {
	f.Where(entql.HasEdgeWith("texts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *CostumerQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CostumerQuery builder.
func (_q *CostumerQuery) Filter() *CostumerFilter {
	return &CostumerFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *CostumerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CostumerMutation builder.
func (m *CostumerMutation) Filter() *CostumerFilter {
	return &CostumerFilter{config: m.config, predicateAdder: m}
}

// CostumerFilter provides a generic filtering capability at runtime for CostumerQuery.
type CostumerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CostumerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CostumerFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(costumer.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *CostumerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(costumer.FieldName))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *CostumerFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(costumer.FieldPhone))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *CostumerFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(costumer.FieldEmail))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *CostumerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(costumer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *CostumerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(costumer.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *CostumerFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(costumer.FieldTenantId))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CostumerFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CostumerFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeals applies a predicate to check if query has an edge deals.
func (f *CostumerFilter) WhereHasDeals() {
	f.Where(entql.HasEdge("deals"))
}

// WhereHasDealsWith applies a predicate to check if query has an edge deals with a given conditions (other predicates).
func (f *CostumerFilter) WhereHasDealsWith(preds ...predicate.Deal) {
	f.Where(entql.HasEdgeWith("deals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *CrmFieldQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CrmFieldQuery builder.
func (_q *CrmFieldQuery) Filter() *CrmFieldFilter {
	return &CrmFieldFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *CrmFieldMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CrmFieldMutation builder.
func (m *CrmFieldMutation) Filter() *CrmFieldFilter {
	return &CrmFieldFilter{config: m.config, predicateAdder: m}
}

// CrmFieldFilter provides a generic filtering capability at runtime for CrmFieldQuery.
type CrmFieldFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CrmFieldFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CrmFieldFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(crmfield.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *CrmFieldFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(crmfield.FieldName))
}

// WhereSection applies the entql string predicate on the section field.
func (f *CrmFieldFilter) WhereSection(p entql.StringP) {
	f.Where(p.Field(crmfield.FieldSection))
}

// WhereType applies the entql string predicate on the type field.
func (f *CrmFieldFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(crmfield.FieldType))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *CrmFieldFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(crmfield.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *CrmFieldFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(crmfield.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *CrmFieldFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(crmfield.FieldTenantId))
}

// WhereHasDropdownList applies a predicate to check if query has an edge dropdownList.
func (f *CrmFieldFilter) WhereHasDropdownList() {
	f.Where(entql.HasEdge("dropdownList"))
}

// WhereHasDropdownListWith applies a predicate to check if query has an edge dropdownList with a given conditions (other predicates).
func (f *CrmFieldFilter) WhereHasDropdownListWith(preds ...predicate.DropdownList) {
	f.Where(entql.HasEdgeWith("dropdownList", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDealCrmField applies a predicate to check if query has an edge dealCrmField.
func (f *CrmFieldFilter) WhereHasDealCrmField() {
	f.Where(entql.HasEdge("dealCrmField"))
}

// WhereHasDealCrmFieldWith applies a predicate to check if query has an edge dealCrmField with a given conditions (other predicates).
func (f *CrmFieldFilter) WhereHasDealCrmFieldWith(preds ...predicate.DealCrmField) {
	f.Where(entql.HasEdgeWith("dealCrmField", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CrmFieldFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CrmFieldFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DealQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DealQuery builder.
func (_q *DealQuery) Filter() *DealFilter {
	return &DealFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DealMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DealMutation builder.
func (m *DealMutation) Filter() *DealFilter {
	return &DealFilter{config: m.config, predicateAdder: m}
}

// DealFilter provides a generic filtering capability at runtime for DealQuery.
type DealFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DealFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DealFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(deal.FieldID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *DealFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(deal.FieldTitle))
}

// WhereSource applies the entql string predicate on the source field.
func (f *DealFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(deal.FieldSource))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *DealFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(deal.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *DealFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(deal.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *DealFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(deal.FieldTenantId))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DealFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DealFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCostumer applies a predicate to check if query has an edge costumer.
func (f *DealFilter) WhereHasCostumer() {
	f.Where(entql.HasEdge("costumer"))
}

// WhereHasCostumerWith applies a predicate to check if query has an edge costumer with a given conditions (other predicates).
func (f *DealFilter) WhereHasCostumerWith(preds ...predicate.Costumer) {
	f.Where(entql.HasEdgeWith("costumer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChat applies a predicate to check if query has an edge chat.
func (f *DealFilter) WhereHasChat() {
	f.Where(entql.HasEdge("chat"))
}

// WhereHasChatWith applies a predicate to check if query has an edge chat with a given conditions (other predicates).
func (f *DealFilter) WhereHasChatWith(preds ...predicate.Chat) {
	f.Where(entql.HasEdgeWith("chat", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStage applies a predicate to check if query has an edge stage.
func (f *DealFilter) WhereHasStage() {
	f.Where(entql.HasEdge("stage"))
}

// WhereHasStageWith applies a predicate to check if query has an edge stage with a given conditions (other predicates).
func (f *DealFilter) WhereHasStageWith(preds ...predicate.Stage) {
	f.Where(entql.HasEdgeWith("stage", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDealCrmFields applies a predicate to check if query has an edge dealCrmFields.
func (f *DealFilter) WhereHasDealCrmFields() {
	f.Where(entql.HasEdge("dealCrmFields"))
}

// WhereHasDealCrmFieldsWith applies a predicate to check if query has an edge dealCrmFields with a given conditions (other predicates).
func (f *DealFilter) WhereHasDealCrmFieldsWith(preds ...predicate.DealCrmField) {
	f.Where(entql.HasEdgeWith("dealCrmFields", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DealCrmFieldQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DealCrmFieldQuery builder.
func (_q *DealCrmFieldQuery) Filter() *DealCrmFieldFilter {
	return &DealCrmFieldFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DealCrmFieldMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DealCrmFieldMutation builder.
func (m *DealCrmFieldMutation) Filter() *DealCrmFieldFilter {
	return &DealCrmFieldFilter{config: m.config, predicateAdder: m}
}

// DealCrmFieldFilter provides a generic filtering capability at runtime for DealCrmFieldQuery.
type DealCrmFieldFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DealCrmFieldFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DealCrmFieldFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(dealcrmfield.FieldID))
}

// WhereValue applies the entql string predicate on the value field.
func (f *DealCrmFieldFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(dealcrmfield.FieldValue))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *DealCrmFieldFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dealcrmfield.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *DealCrmFieldFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dealcrmfield.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *DealCrmFieldFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(dealcrmfield.FieldTenantId))
}

// WhereHasDeal applies a predicate to check if query has an edge deal.
func (f *DealCrmFieldFilter) WhereHasDeal() {
	f.Where(entql.HasEdge("deal"))
}

// WhereHasDealWith applies a predicate to check if query has an edge deal with a given conditions (other predicates).
func (f *DealCrmFieldFilter) WhereHasDealWith(preds ...predicate.Deal) {
	f.Where(entql.HasEdgeWith("deal", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCrmField applies a predicate to check if query has an edge crmField.
func (f *DealCrmFieldFilter) WhereHasCrmField() {
	f.Where(entql.HasEdge("crmField"))
}

// WhereHasCrmFieldWith applies a predicate to check if query has an edge crmField with a given conditions (other predicates).
func (f *DealCrmFieldFilter) WhereHasCrmFieldWith(preds ...predicate.CrmField) {
	f.Where(entql.HasEdgeWith("crmField", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DealCrmFieldFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DealCrmFieldFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DepartmentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DepartmentQuery builder.
func (_q *DepartmentQuery) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DepartmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DepartmentMutation builder.
func (m *DepartmentMutation) Filter() *DepartmentFilter {
	return &DepartmentFilter{config: m.config, predicateAdder: m}
}

// DepartmentFilter provides a generic filtering capability at runtime for DepartmentQuery.
type DepartmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DepartmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DepartmentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(department.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DepartmentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(department.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *DepartmentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *DepartmentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(department.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *DepartmentFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(department.FieldTenantId))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DepartmentFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *DepartmentFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasQueues applies a predicate to check if query has an edge queues.
func (f *DepartmentFilter) WhereHasQueues() {
	f.Where(entql.HasEdge("queues"))
}

// WhereHasQueuesWith applies a predicate to check if query has an edge queues with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasQueuesWith(preds ...predicate.Queue) {
	f.Where(entql.HasEdgeWith("queues", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRbacs applies a predicate to check if query has an edge rbacs.
func (f *DepartmentFilter) WhereHasRbacs() {
	f.Where(entql.HasEdge("rbacs"))
}

// WhereHasRbacsWith applies a predicate to check if query has an edge rbacs with a given conditions (other predicates).
func (f *DepartmentFilter) WhereHasRbacsWith(preds ...predicate.Rbac) {
	f.Where(entql.HasEdgeWith("rbacs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DropdownListQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DropdownListQuery builder.
func (_q *DropdownListQuery) Filter() *DropdownListFilter {
	return &DropdownListFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DropdownListMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DropdownListMutation builder.
func (m *DropdownListMutation) Filter() *DropdownListFilter {
	return &DropdownListFilter{config: m.config, predicateAdder: m}
}

// DropdownListFilter provides a generic filtering capability at runtime for DropdownListQuery.
type DropdownListFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DropdownListFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DropdownListFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(dropdownlist.FieldID))
}

// WhereValue applies the entql string predicate on the value field.
func (f *DropdownListFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(dropdownlist.FieldValue))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *DropdownListFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dropdownlist.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *DropdownListFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dropdownlist.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *DropdownListFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(dropdownlist.FieldTenantId))
}

// WhereHasCrmField applies a predicate to check if query has an edge crmField.
func (f *DropdownListFilter) WhereHasCrmField() {
	f.Where(entql.HasEdge("crmField"))
}

// WhereHasCrmFieldWith applies a predicate to check if query has an edge crmField with a given conditions (other predicates).
func (f *DropdownListFilter) WhereHasCrmFieldWith(preds ...predicate.CrmField) {
	f.Where(entql.HasEdgeWith("crmField", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DropdownListFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DropdownListFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EmployeeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmployeeQuery builder.
func (_q *EmployeeQuery) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EmployeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmployeeMutation builder.
func (m *EmployeeMutation) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: m.config, predicateAdder: m}
}

// EmployeeFilter provides a generic filtering capability at runtime for EmployeeQuery.
type EmployeeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmployeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EmployeeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(employee.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EmployeeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(employee.FieldName))
}

// WhereEmploymentStatus applies the entql string predicate on the employmentStatus field.
func (f *EmployeeFilter) WhereEmploymentStatus(p entql.StringP) {
	f.Where(p.Field(employee.FieldEmploymentStatus))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *EmployeeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *EmployeeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *EmployeeFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(employee.FieldTenantId))
}

// WhereHasEmployeeAuth applies a predicate to check if query has an edge employeeAuth.
func (f *EmployeeFilter) WhereHasEmployeeAuth() {
	f.Where(entql.HasEdge("employeeAuth"))
}

// WhereHasEmployeeAuthWith applies a predicate to check if query has an edge employeeAuth with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasEmployeeAuthWith(preds ...predicate.EmployeeAuth) {
	f.Where(entql.HasEdgeWith("employeeAuth", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *EmployeeFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartment applies a predicate to check if query has an edge department.
func (f *EmployeeFilter) WhereHasDepartment() {
	f.Where(entql.HasEdge("department"))
}

// WhereHasDepartmentWith applies a predicate to check if query has an edge department with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasDepartmentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChat applies a predicate to check if query has an edge chat.
func (f *EmployeeFilter) WhereHasChat() {
	f.Where(entql.HasEdge("chat"))
}

// WhereHasChatWith applies a predicate to check if query has an edge chat with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasChatWith(preds ...predicate.Chat) {
	f.Where(entql.HasEdgeWith("chat", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasQueues applies a predicate to check if query has an edge queues.
func (f *EmployeeFilter) WhereHasQueues() {
	f.Where(entql.HasEdge("queues"))
}

// WhereHasQueuesWith applies a predicate to check if query has an edge queues with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasQueuesWith(preds ...predicate.Queue) {
	f.Where(entql.HasEdgeWith("queues", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *EmployeeFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasMessagesWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EmployeeAuthQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmployeeAuthQuery builder.
func (_q *EmployeeAuthQuery) Filter() *EmployeeAuthFilter {
	return &EmployeeAuthFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EmployeeAuthMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmployeeAuthMutation builder.
func (m *EmployeeAuthMutation) Filter() *EmployeeAuthFilter {
	return &EmployeeAuthFilter{config: m.config, predicateAdder: m}
}

// EmployeeAuthFilter provides a generic filtering capability at runtime for EmployeeAuthQuery.
type EmployeeAuthFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmployeeAuthFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EmployeeAuthFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(employeeauth.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EmployeeAuthFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(employeeauth.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *EmployeeAuthFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(employeeauth.FieldEmail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *EmployeeAuthFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(employeeauth.FieldPassword))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *EmployeeAuthFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(employeeauth.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *EmployeeAuthFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(employeeauth.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *EmployeeAuthFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(employeeauth.FieldTenantId))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *EmployeeAuthFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *EmployeeAuthFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *EmployeeAuthFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *EmployeeAuthFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *FileQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FileQuery builder.
func (_q *FileQuery) Filter() *FileFilter {
	return &FileFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *FileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FileMutation builder.
func (m *FileMutation) Filter() *FileFilter {
	return &FileFilter{config: m.config, predicateAdder: m}
}

// FileFilter provides a generic filtering capability at runtime for FileQuery.
type FileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *FileFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(file.FieldID))
}

// WhereURL applies the entql string predicate on the url field.
func (f *FileFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(file.FieldURL))
}

// WhereCaption applies the entql string predicate on the caption field.
func (f *FileFilter) WhereCaption(p entql.StringP) {
	f.Where(p.Field(file.FieldCaption))
}

// WhereMimeType applies the entql string predicate on the mimeType field.
func (f *FileFilter) WhereMimeType(p entql.StringP) {
	f.Where(p.Field(file.FieldMimeType))
}

// WhereFileName applies the entql string predicate on the fileName field.
func (f *FileFilter) WhereFileName(p entql.StringP) {
	f.Where(p.Field(file.FieldFileName))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *FileFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(file.FieldTenantId))
}

// WhereHasMessage applies a predicate to check if query has an edge message.
func (f *FileFilter) WhereHasMessage() {
	f.Where(entql.HasEdge("message"))
}

// WhereHasMessageWith applies a predicate to check if query has an edge message with a given conditions (other predicates).
func (f *FileFilter) WhereHasMessageWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("message", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *FileFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *FileFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *MessageQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MessageQuery builder.
func (_q *MessageQuery) Filter() *MessageFilter {
	return &MessageFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MessageMutation builder.
func (m *MessageMutation) Filter() *MessageFilter {
	return &MessageFilter{config: m.config, predicateAdder: m}
}

// MessageFilter provides a generic filtering capability at runtime for MessageQuery.
type MessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MessageFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(message.FieldID))
}

// WhereSentBy applies the entql string predicate on the sentBy field.
func (f *MessageFilter) WhereSentBy(p entql.StringP) {
	f.Where(p.Field(message.FieldSentBy))
}

// WherePrivate applies the entql bool predicate on the private field.
func (f *MessageFilter) WherePrivate(p entql.BoolP) {
	f.Where(p.Field(message.FieldPrivate))
}

// WhereType applies the entql string predicate on the type field.
func (f *MessageFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(message.FieldType))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *MessageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(message.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *MessageFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(message.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *MessageFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(message.FieldTenantId))
}

// WhereHasChat applies a predicate to check if query has an edge chat.
func (f *MessageFilter) WhereHasChat() {
	f.Where(entql.HasEdge("chat"))
}

// WhereHasChatWith applies a predicate to check if query has an edge chat with a given conditions (other predicates).
func (f *MessageFilter) WhereHasChatWith(preds ...predicate.Chat) {
	f.Where(entql.HasEdgeWith("chat", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *MessageFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *MessageFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasText applies a predicate to check if query has an edge text.
func (f *MessageFilter) WhereHasText() {
	f.Where(entql.HasEdge("text"))
}

// WhereHasTextWith applies a predicate to check if query has an edge text with a given conditions (other predicates).
func (f *MessageFilter) WhereHasTextWith(preds ...predicate.Text) {
	f.Where(entql.HasEdgeWith("text", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFile applies a predicate to check if query has an edge file.
func (f *MessageFilter) WhereHasFile() {
	f.Where(entql.HasEdge("file"))
}

// WhereHasFileWith applies a predicate to check if query has an edge file with a given conditions (other predicates).
func (f *MessageFilter) WhereHasFileWith(preds ...predicate.File) {
	f.Where(entql.HasEdgeWith("file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *MessageFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *MessageFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PipelineQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PipelineQuery builder.
func (_q *PipelineQuery) Filter() *PipelineFilter {
	return &PipelineFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PipelineMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PipelineMutation builder.
func (m *PipelineMutation) Filter() *PipelineFilter {
	return &PipelineFilter{config: m.config, predicateAdder: m}
}

// PipelineFilter provides a generic filtering capability at runtime for PipelineQuery.
type PipelineFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PipelineFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PipelineFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(pipeline.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PipelineFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(pipeline.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *PipelineFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(pipeline.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *PipelineFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(pipeline.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *PipelineFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(pipeline.FieldTenantId))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PipelineFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PipelineFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStages applies a predicate to check if query has an edge stages.
func (f *PipelineFilter) WhereHasStages() {
	f.Where(entql.HasEdge("stages"))
}

// WhereHasStagesWith applies a predicate to check if query has an edge stages with a given conditions (other predicates).
func (f *PipelineFilter) WhereHasStagesWith(preds ...predicate.Stage) {
	f.Where(entql.HasEdgeWith("stages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *QueueQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the QueueQuery builder.
func (_q *QueueQuery) Filter() *QueueFilter {
	return &QueueFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *QueueMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the QueueMutation builder.
func (m *QueueMutation) Filter() *QueueFilter {
	return &QueueFilter{config: m.config, predicateAdder: m}
}

// QueueFilter provides a generic filtering capability at runtime for QueueQuery.
type QueueFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *QueueFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *QueueFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(queue.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *QueueFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(queue.FieldName))
}

// WhereType applies the entql string predicate on the type field.
func (f *QueueFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(queue.FieldType))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *QueueFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(queue.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *QueueFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(queue.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *QueueFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(queue.FieldTenantId))
}

// WhereHasStages applies a predicate to check if query has an edge stages.
func (f *QueueFilter) WhereHasStages() {
	f.Where(entql.HasEdge("stages"))
}

// WhereHasStagesWith applies a predicate to check if query has an edge stages with a given conditions (other predicates).
func (f *QueueFilter) WhereHasStagesWith(preds ...predicate.Stage) {
	f.Where(entql.HasEdgeWith("stages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployees applies a predicate to check if query has an edge employees.
func (f *QueueFilter) WhereHasEmployees() {
	f.Where(entql.HasEdge("employees"))
}

// WhereHasEmployeesWith applies a predicate to check if query has an edge employees with a given conditions (other predicates).
func (f *QueueFilter) WhereHasEmployeesWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employees", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDepartment applies a predicate to check if query has an edge department.
func (f *QueueFilter) WhereHasDepartment() {
	f.Where(entql.HasEdge("department"))
}

// WhereHasDepartmentWith applies a predicate to check if query has an edge department with a given conditions (other predicates).
func (f *QueueFilter) WhereHasDepartmentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *QueueFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *QueueFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *RbacQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RbacQuery builder.
func (_q *RbacQuery) Filter() *RbacFilter {
	return &RbacFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RbacMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RbacMutation builder.
func (m *RbacMutation) Filter() *RbacFilter {
	return &RbacFilter{config: m.config, predicateAdder: m}
}

// RbacFilter provides a generic filtering capability at runtime for RbacQuery.
type RbacFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RbacFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RbacFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(rbac.FieldID))
}

// WhereAccess applies the entql string predicate on the access field.
func (f *RbacFilter) WhereAccess(p entql.StringP) {
	f.Where(p.Field(rbac.FieldAccess))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *RbacFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(rbac.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *RbacFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(rbac.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *RbacFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(rbac.FieldTenantId))
}

// WhereHasDepartment applies a predicate to check if query has an edge department.
func (f *RbacFilter) WhereHasDepartment() {
	f.Where(entql.HasEdge("department"))
}

// WhereHasDepartmentWith applies a predicate to check if query has an edge department with a given conditions (other predicates).
func (f *RbacFilter) WhereHasDepartmentWith(preds ...predicate.Department) {
	f.Where(entql.HasEdgeWith("department", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *RbacFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *RbacFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *StageQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StageQuery builder.
func (_q *StageQuery) Filter() *StageFilter {
	return &StageFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *StageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StageMutation builder.
func (m *StageMutation) Filter() *StageFilter {
	return &StageFilter{config: m.config, predicateAdder: m}
}

// StageFilter provides a generic filtering capability at runtime for StageQuery.
type StageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *StageFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(stage.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *StageFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(stage.FieldName))
}

// WhereColor applies the entql string predicate on the color field.
func (f *StageFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(stage.FieldColor))
}

// WhereLossOrGain applies the entql bool predicate on the lossOrGain field.
func (f *StageFilter) WhereLossOrGain(p entql.BoolP) {
	f.Where(p.Field(stage.FieldLossOrGain))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *StageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(stage.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *StageFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(stage.FieldUpdatedAt))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *StageFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(stage.FieldTenantId))
}

// WhereHasPipeline applies a predicate to check if query has an edge pipeline.
func (f *StageFilter) WhereHasPipeline() {
	f.Where(entql.HasEdge("pipeline"))
}

// WhereHasPipelineWith applies a predicate to check if query has an edge pipeline with a given conditions (other predicates).
func (f *StageFilter) WhereHasPipelineWith(preds ...predicate.Pipeline) {
	f.Where(entql.HasEdgeWith("pipeline", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeals applies a predicate to check if query has an edge deals.
func (f *StageFilter) WhereHasDeals() {
	f.Where(entql.HasEdge("deals"))
}

// WhereHasDealsWith applies a predicate to check if query has an edge deals with a given conditions (other predicates).
func (f *StageFilter) WhereHasDealsWith(preds ...predicate.Deal) {
	f.Where(entql.HasEdgeWith("deals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasQueue applies a predicate to check if query has an edge queue.
func (f *StageFilter) WhereHasQueue() {
	f.Where(entql.HasEdge("queue"))
}

// WhereHasQueueWith applies a predicate to check if query has an edge queue with a given conditions (other predicates).
func (f *StageFilter) WhereHasQueueWith(preds ...predicate.Queue) {
	f.Where(entql.HasEdgeWith("queue", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *StageFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *StageFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TextQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TextQuery builder.
func (_q *TextQuery) Filter() *TextFilter {
	return &TextFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TextMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TextMutation builder.
func (m *TextMutation) Filter() *TextFilter {
	return &TextFilter{config: m.config, predicateAdder: m}
}

// TextFilter provides a generic filtering capability at runtime for TextQuery.
type TextFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TextFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TextFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(text.FieldID))
}

// WhereText applies the entql string predicate on the text field.
func (f *TextFilter) WhereText(p entql.StringP) {
	f.Where(p.Field(text.FieldText))
}

// WhereTenantId applies the entql [16]byte predicate on the tenantId field.
func (f *TextFilter) WhereTenantId(p entql.ValueP) {
	f.Where(p.Field(text.FieldTenantId))
}

// WhereHasMessage applies a predicate to check if query has an edge message.
func (f *TextFilter) WhereHasMessage() {
	f.Where(entql.HasEdge("message"))
}

// WhereHasMessageWith applies a predicate to check if query has an edge message with a given conditions (other predicates).
func (f *TextFilter) WhereHasMessageWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("message", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *TextFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *TextFilter) WhereHasTenantWith(preds ...predicate.Company) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
