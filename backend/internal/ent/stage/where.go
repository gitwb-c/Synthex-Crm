// Code generated by ent, DO NOT EDIT.

package stage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldName, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldColor, v))
}

// LossOrGain applies equality check predicate on the "lossOrGain" field. It's identical to LossOrGainEQ.
func LossOrGain(v bool) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldLossOrGain, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldTenantId, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContainsFold(FieldName, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.Stage {
	return predicate.Stage(sql.FieldHasSuffix(FieldColor, v))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.Stage {
	return predicate.Stage(sql.FieldContainsFold(FieldColor, v))
}

// LossOrGainEQ applies the EQ predicate on the "lossOrGain" field.
func LossOrGainEQ(v bool) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldLossOrGain, v))
}

// LossOrGainNEQ applies the NEQ predicate on the "lossOrGain" field.
func LossOrGainNEQ(v bool) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldLossOrGain, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Stage {
	return predicate.Stage(sql.FieldLTE(FieldUpdatedAt, v))
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldEQ(FieldTenantId, v))
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldNEQ(FieldTenantId, v))
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldIn(FieldTenantId, vs...))
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...uuid.UUID) predicate.Stage {
	return predicate.Stage(sql.FieldNotIn(FieldTenantId, vs...))
}

// TenantIdIsNil applies the IsNil predicate on the "tenantId" field.
func TenantIdIsNil() predicate.Stage {
	return predicate.Stage(sql.FieldIsNull(FieldTenantId))
}

// TenantIdNotNil applies the NotNil predicate on the "tenantId" field.
func TenantIdNotNil() predicate.Stage {
	return predicate.Stage(sql.FieldNotNull(FieldTenantId))
}

// HasPipeline applies the HasEdge predicate on the "pipeline" edge.
func HasPipeline() predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PipelineTable, PipelineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPipelineWith applies the HasEdge predicate on the "pipeline" edge with a given conditions (other predicates).
func HasPipelineWith(preds ...predicate.Pipeline) predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := newPipelineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeals applies the HasEdge predicate on the "deals" edge.
func HasDeals() predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DealsTable, DealsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDealsWith applies the HasEdge predicate on the "deals" edge with a given conditions (other predicates).
func HasDealsWith(preds ...predicate.Deal) predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := newDealsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQueue applies the HasEdge predicate on the "queue" edge.
func HasQueue() predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, QueueTable, QueueColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQueueWith applies the HasEdge predicate on the "queue" edge with a given conditions (other predicates).
func HasQueueWith(preds ...predicate.Queue) predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := newQueueStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Company) predicate.Stage {
	return predicate.Stage(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stage) predicate.Stage {
	return predicate.Stage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stage) predicate.Stage {
	return predicate.Stage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stage) predicate.Stage {
	return predicate.Stage(sql.NotPredicates(p))
}
