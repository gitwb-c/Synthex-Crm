// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/costumer"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/deal"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/google/uuid"
)

// CostumerUpdate is the builder for updating Costumer entities.
type CostumerUpdate struct {
	config
	hooks    []Hook
	mutation *CostumerMutation
}

// Where appends a list predicates to the CostumerUpdate builder.
func (_u *CostumerUpdate) Where(ps ...predicate.Costumer) *CostumerUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *CostumerUpdate) SetName(v string) *CostumerUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CostumerUpdate) SetNillableName(v *string) *CostumerUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetPhone sets the "phone" field.
func (_u *CostumerUpdate) SetPhone(v string) *CostumerUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *CostumerUpdate) SetNillablePhone(v *string) *CostumerUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *CostumerUpdate) SetEmail(v string) *CostumerUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *CostumerUpdate) SetNillableEmail(v *string) *CostumerUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *CostumerUpdate) SetUpdatedAt(v time.Time) *CostumerUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddDealIDs adds the "deals" edge to the Deal entity by IDs.
func (_u *CostumerUpdate) AddDealIDs(ids ...uuid.UUID) *CostumerUpdate {
	_u.mutation.AddDealIDs(ids...)
	return _u
}

// AddDeals adds the "deals" edges to the Deal entity.
func (_u *CostumerUpdate) AddDeals(v ...*Deal) *CostumerUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDealIDs(ids...)
}

// Mutation returns the CostumerMutation object of the builder.
func (_u *CostumerUpdate) Mutation() *CostumerMutation {
	return _u.mutation
}

// ClearDeals clears all "deals" edges to the Deal entity.
func (_u *CostumerUpdate) ClearDeals() *CostumerUpdate {
	_u.mutation.ClearDeals()
	return _u
}

// RemoveDealIDs removes the "deals" edge to Deal entities by IDs.
func (_u *CostumerUpdate) RemoveDealIDs(ids ...uuid.UUID) *CostumerUpdate {
	_u.mutation.RemoveDealIDs(ids...)
	return _u
}

// RemoveDeals removes "deals" edges to Deal entities.
func (_u *CostumerUpdate) RemoveDeals(v ...*Deal) *CostumerUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDealIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CostumerUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CostumerUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CostumerUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CostumerUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CostumerUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := costumer.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CostumerUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := costumer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Costumer.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := costumer.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Costumer.phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := costumer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Costumer.email": %w`, err)}
		}
	}
	return nil
}

func (_u *CostumerUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(costumer.Table, costumer.Columns, sqlgraph.NewFieldSpec(costumer.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(costumer.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(costumer.FieldPhone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(costumer.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(costumer.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   costumer.DealsTable,
			Columns: []string{costumer.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDealsIDs(); len(nodes) > 0 && !_u.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   costumer.DealsTable,
			Columns: []string{costumer.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   costumer.DealsTable,
			Columns: []string{costumer.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costumer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CostumerUpdateOne is the builder for updating a single Costumer entity.
type CostumerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CostumerMutation
}

// SetName sets the "name" field.
func (_u *CostumerUpdateOne) SetName(v string) *CostumerUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CostumerUpdateOne) SetNillableName(v *string) *CostumerUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetPhone sets the "phone" field.
func (_u *CostumerUpdateOne) SetPhone(v string) *CostumerUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *CostumerUpdateOne) SetNillablePhone(v *string) *CostumerUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *CostumerUpdateOne) SetEmail(v string) *CostumerUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *CostumerUpdateOne) SetNillableEmail(v *string) *CostumerUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *CostumerUpdateOne) SetUpdatedAt(v time.Time) *CostumerUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddDealIDs adds the "deals" edge to the Deal entity by IDs.
func (_u *CostumerUpdateOne) AddDealIDs(ids ...uuid.UUID) *CostumerUpdateOne {
	_u.mutation.AddDealIDs(ids...)
	return _u
}

// AddDeals adds the "deals" edges to the Deal entity.
func (_u *CostumerUpdateOne) AddDeals(v ...*Deal) *CostumerUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDealIDs(ids...)
}

// Mutation returns the CostumerMutation object of the builder.
func (_u *CostumerUpdateOne) Mutation() *CostumerMutation {
	return _u.mutation
}

// ClearDeals clears all "deals" edges to the Deal entity.
func (_u *CostumerUpdateOne) ClearDeals() *CostumerUpdateOne {
	_u.mutation.ClearDeals()
	return _u
}

// RemoveDealIDs removes the "deals" edge to Deal entities by IDs.
func (_u *CostumerUpdateOne) RemoveDealIDs(ids ...uuid.UUID) *CostumerUpdateOne {
	_u.mutation.RemoveDealIDs(ids...)
	return _u
}

// RemoveDeals removes "deals" edges to Deal entities.
func (_u *CostumerUpdateOne) RemoveDeals(v ...*Deal) *CostumerUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDealIDs(ids...)
}

// Where appends a list predicates to the CostumerUpdate builder.
func (_u *CostumerUpdateOne) Where(ps ...predicate.Costumer) *CostumerUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CostumerUpdateOne) Select(field string, fields ...string) *CostumerUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Costumer entity.
func (_u *CostumerUpdateOne) Save(ctx context.Context) (*Costumer, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CostumerUpdateOne) SaveX(ctx context.Context) *Costumer {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CostumerUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CostumerUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CostumerUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := costumer.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CostumerUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := costumer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Costumer.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := costumer.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Costumer.phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := costumer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Costumer.email": %w`, err)}
		}
	}
	return nil
}

func (_u *CostumerUpdateOne) sqlSave(ctx context.Context) (_node *Costumer, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(costumer.Table, costumer.Columns, sqlgraph.NewFieldSpec(costumer.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Costumer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, costumer.FieldID)
		for _, f := range fields {
			if !costumer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != costumer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(costumer.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(costumer.FieldPhone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(costumer.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(costumer.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   costumer.DealsTable,
			Columns: []string{costumer.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDealsIDs(); len(nodes) > 0 && !_u.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   costumer.DealsTable,
			Columns: []string{costumer.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   costumer.DealsTable,
			Columns: []string{costumer.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Costumer{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costumer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
