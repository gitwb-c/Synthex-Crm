// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/gitwb-c/crm.saas/backend/internal/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The ChatQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChatQueryRuleFunc func(context.Context, *ent.ChatQuery) error

// EvalQuery return f(ctx, q).
func (f ChatQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChatQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ChatQuery", q)
}

// The ChatMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChatMutationRuleFunc func(context.Context, *ent.ChatMutation) error

// EvalMutation calls f(ctx, m).
func (f ChatMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ChatMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ChatMutation", m)
}

// The CompanyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CompanyQueryRuleFunc func(context.Context, *ent.CompanyQuery) error

// EvalQuery return f(ctx, q).
func (f CompanyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CompanyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CompanyQuery", q)
}

// The CompanyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CompanyMutationRuleFunc func(context.Context, *ent.CompanyMutation) error

// EvalMutation calls f(ctx, m).
func (f CompanyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CompanyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CompanyMutation", m)
}

// The CostumerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CostumerQueryRuleFunc func(context.Context, *ent.CostumerQuery) error

// EvalQuery return f(ctx, q).
func (f CostumerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CostumerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CostumerQuery", q)
}

// The CostumerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CostumerMutationRuleFunc func(context.Context, *ent.CostumerMutation) error

// EvalMutation calls f(ctx, m).
func (f CostumerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CostumerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CostumerMutation", m)
}

// The CrmFieldQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CrmFieldQueryRuleFunc func(context.Context, *ent.CrmFieldQuery) error

// EvalQuery return f(ctx, q).
func (f CrmFieldQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CrmFieldQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CrmFieldQuery", q)
}

// The CrmFieldMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CrmFieldMutationRuleFunc func(context.Context, *ent.CrmFieldMutation) error

// EvalMutation calls f(ctx, m).
func (f CrmFieldMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CrmFieldMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CrmFieldMutation", m)
}

// The DealQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DealQueryRuleFunc func(context.Context, *ent.DealQuery) error

// EvalQuery return f(ctx, q).
func (f DealQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DealQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DealQuery", q)
}

// The DealMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DealMutationRuleFunc func(context.Context, *ent.DealMutation) error

// EvalMutation calls f(ctx, m).
func (f DealMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DealMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DealMutation", m)
}

// The DealCrmFieldQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DealCrmFieldQueryRuleFunc func(context.Context, *ent.DealCrmFieldQuery) error

// EvalQuery return f(ctx, q).
func (f DealCrmFieldQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DealCrmFieldQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DealCrmFieldQuery", q)
}

// The DealCrmFieldMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DealCrmFieldMutationRuleFunc func(context.Context, *ent.DealCrmFieldMutation) error

// EvalMutation calls f(ctx, m).
func (f DealCrmFieldMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DealCrmFieldMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DealCrmFieldMutation", m)
}

// The DepartmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DepartmentQueryRuleFunc func(context.Context, *ent.DepartmentQuery) error

// EvalQuery return f(ctx, q).
func (f DepartmentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DepartmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DepartmentQuery", q)
}

// The DepartmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DepartmentMutationRuleFunc func(context.Context, *ent.DepartmentMutation) error

// EvalMutation calls f(ctx, m).
func (f DepartmentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DepartmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DepartmentMutation", m)
}

// The DropdownListQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DropdownListQueryRuleFunc func(context.Context, *ent.DropdownListQuery) error

// EvalQuery return f(ctx, q).
func (f DropdownListQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DropdownListQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DropdownListQuery", q)
}

// The DropdownListMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DropdownListMutationRuleFunc func(context.Context, *ent.DropdownListMutation) error

// EvalMutation calls f(ctx, m).
func (f DropdownListMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DropdownListMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DropdownListMutation", m)
}

// The EmployeeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmployeeQueryRuleFunc func(context.Context, *ent.EmployeeQuery) error

// EvalQuery return f(ctx, q).
func (f EmployeeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmployeeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EmployeeQuery", q)
}

// The EmployeeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmployeeMutationRuleFunc func(context.Context, *ent.EmployeeMutation) error

// EvalMutation calls f(ctx, m).
func (f EmployeeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EmployeeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EmployeeMutation", m)
}

// The EmployeeAuthQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmployeeAuthQueryRuleFunc func(context.Context, *ent.EmployeeAuthQuery) error

// EvalQuery return f(ctx, q).
func (f EmployeeAuthQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmployeeAuthQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EmployeeAuthQuery", q)
}

// The EmployeeAuthMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmployeeAuthMutationRuleFunc func(context.Context, *ent.EmployeeAuthMutation) error

// EvalMutation calls f(ctx, m).
func (f EmployeeAuthMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EmployeeAuthMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EmployeeAuthMutation", m)
}

// The FileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FileQueryRuleFunc func(context.Context, *ent.FileQuery) error

// EvalQuery return f(ctx, q).
func (f FileQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FileQuery", q)
}

// The FileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FileMutationRuleFunc func(context.Context, *ent.FileMutation) error

// EvalMutation calls f(ctx, m).
func (f FileMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FileMutation", m)
}

// The MessageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MessageQueryRuleFunc func(context.Context, *ent.MessageQuery) error

// EvalQuery return f(ctx, q).
func (f MessageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MessageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MessageQuery", q)
}

// The MessageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MessageMutationRuleFunc func(context.Context, *ent.MessageMutation) error

// EvalMutation calls f(ctx, m).
func (f MessageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MessageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MessageMutation", m)
}

// The PipelineQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PipelineQueryRuleFunc func(context.Context, *ent.PipelineQuery) error

// EvalQuery return f(ctx, q).
func (f PipelineQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PipelineQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PipelineQuery", q)
}

// The PipelineMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PipelineMutationRuleFunc func(context.Context, *ent.PipelineMutation) error

// EvalMutation calls f(ctx, m).
func (f PipelineMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PipelineMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PipelineMutation", m)
}

// The QueueQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type QueueQueryRuleFunc func(context.Context, *ent.QueueQuery) error

// EvalQuery return f(ctx, q).
func (f QueueQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.QueueQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.QueueQuery", q)
}

// The QueueMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type QueueMutationRuleFunc func(context.Context, *ent.QueueMutation) error

// EvalMutation calls f(ctx, m).
func (f QueueMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.QueueMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.QueueMutation", m)
}

// The RbacQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RbacQueryRuleFunc func(context.Context, *ent.RbacQuery) error

// EvalQuery return f(ctx, q).
func (f RbacQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RbacQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RbacQuery", q)
}

// The RbacMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RbacMutationRuleFunc func(context.Context, *ent.RbacMutation) error

// EvalMutation calls f(ctx, m).
func (f RbacMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RbacMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RbacMutation", m)
}

// The StageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StageQueryRuleFunc func(context.Context, *ent.StageQuery) error

// EvalQuery return f(ctx, q).
func (f StageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StageQuery", q)
}

// The StageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StageMutationRuleFunc func(context.Context, *ent.StageMutation) error

// EvalMutation calls f(ctx, m).
func (f StageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StageMutation", m)
}

// The TextQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TextQueryRuleFunc func(context.Context, *ent.TextQuery) error

// EvalQuery return f(ctx, q).
func (f TextQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TextQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TextQuery", q)
}

// The TextMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TextMutationRuleFunc func(context.Context, *ent.TextMutation) error

// EvalMutation calls f(ctx, m).
func (f TextMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TextMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TextMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.ChatQuery:
		return q.Filter(), nil
	case *ent.CompanyQuery:
		return q.Filter(), nil
	case *ent.CostumerQuery:
		return q.Filter(), nil
	case *ent.CrmFieldQuery:
		return q.Filter(), nil
	case *ent.DealQuery:
		return q.Filter(), nil
	case *ent.DealCrmFieldQuery:
		return q.Filter(), nil
	case *ent.DepartmentQuery:
		return q.Filter(), nil
	case *ent.DropdownListQuery:
		return q.Filter(), nil
	case *ent.EmployeeQuery:
		return q.Filter(), nil
	case *ent.EmployeeAuthQuery:
		return q.Filter(), nil
	case *ent.FileQuery:
		return q.Filter(), nil
	case *ent.MessageQuery:
		return q.Filter(), nil
	case *ent.PipelineQuery:
		return q.Filter(), nil
	case *ent.QueueQuery:
		return q.Filter(), nil
	case *ent.RbacQuery:
		return q.Filter(), nil
	case *ent.StageQuery:
		return q.Filter(), nil
	case *ent.TextQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.ChatMutation:
		return m.Filter(), nil
	case *ent.CompanyMutation:
		return m.Filter(), nil
	case *ent.CostumerMutation:
		return m.Filter(), nil
	case *ent.CrmFieldMutation:
		return m.Filter(), nil
	case *ent.DealMutation:
		return m.Filter(), nil
	case *ent.DealCrmFieldMutation:
		return m.Filter(), nil
	case *ent.DepartmentMutation:
		return m.Filter(), nil
	case *ent.DropdownListMutation:
		return m.Filter(), nil
	case *ent.EmployeeMutation:
		return m.Filter(), nil
	case *ent.EmployeeAuthMutation:
		return m.Filter(), nil
	case *ent.FileMutation:
		return m.Filter(), nil
	case *ent.MessageMutation:
		return m.Filter(), nil
	case *ent.PipelineMutation:
		return m.Filter(), nil
	case *ent.QueueMutation:
		return m.Filter(), nil
	case *ent.RbacMutation:
		return m.Filter(), nil
	case *ent.StageMutation:
		return m.Filter(), nil
	case *ent.TextMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
