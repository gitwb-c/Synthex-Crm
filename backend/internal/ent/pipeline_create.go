// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/pipeline"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/stage"
	"github.com/google/uuid"
)

// PipelineCreate is the builder for creating a Pipeline entity.
type PipelineCreate struct {
	config
	mutation *PipelineMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *PipelineCreate) SetName(v string) *PipelineCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetCreatedAt sets the "createdAt" field.
func (_c *PipelineCreate) SetCreatedAt(v time.Time) *PipelineCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (_c *PipelineCreate) SetNillableCreatedAt(v *time.Time) *PipelineCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updatedAt" field.
func (_c *PipelineCreate) SetUpdatedAt(v time.Time) *PipelineCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (_c *PipelineCreate) SetNillableUpdatedAt(v *time.Time) *PipelineCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetTenantId sets the "tenantId" field.
func (_c *PipelineCreate) SetTenantId(v uuid.UUID) *PipelineCreate {
	_c.mutation.SetTenantId(v)
	return _c
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (_c *PipelineCreate) SetNillableTenantId(v *uuid.UUID) *PipelineCreate {
	if v != nil {
		_c.SetTenantId(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *PipelineCreate) SetID(v uuid.UUID) *PipelineCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *PipelineCreate) SetNillableID(v *uuid.UUID) *PipelineCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetTenantID sets the "tenant" edge to the Company entity by ID.
func (_c *PipelineCreate) SetTenantID(id uuid.UUID) *PipelineCreate {
	_c.mutation.SetTenantID(id)
	return _c
}

// SetNillableTenantID sets the "tenant" edge to the Company entity by ID if the given value is not nil.
func (_c *PipelineCreate) SetNillableTenantID(id *uuid.UUID) *PipelineCreate {
	if id != nil {
		_c = _c.SetTenantID(*id)
	}
	return _c
}

// SetTenant sets the "tenant" edge to the Company entity.
func (_c *PipelineCreate) SetTenant(v *Company) *PipelineCreate {
	return _c.SetTenantID(v.ID)
}

// AddStageIDs adds the "stages" edge to the Stage entity by IDs.
func (_c *PipelineCreate) AddStageIDs(ids ...uuid.UUID) *PipelineCreate {
	_c.mutation.AddStageIDs(ids...)
	return _c
}

// AddStages adds the "stages" edges to the Stage entity.
func (_c *PipelineCreate) AddStages(v ...*Stage) *PipelineCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddStageIDs(ids...)
}

// Mutation returns the PipelineMutation object of the builder.
func (_c *PipelineCreate) Mutation() *PipelineMutation {
	return _c.mutation
}

// Save creates the Pipeline in the database.
func (_c *PipelineCreate) Save(ctx context.Context) (*Pipeline, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PipelineCreate) SaveX(ctx context.Context) *Pipeline {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PipelineCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PipelineCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PipelineCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if pipeline.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized pipeline.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := pipeline.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if pipeline.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pipeline.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pipeline.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if pipeline.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized pipeline.DefaultID (forgotten import ent/runtime?)")
		}
		v := pipeline.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *PipelineCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Pipeline.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := pipeline.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pipeline.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Pipeline.createdAt"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Pipeline.updatedAt"`)}
	}
	return nil
}

func (_c *PipelineCreate) sqlSave(ctx context.Context) (*Pipeline, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PipelineCreate) createSpec() (*Pipeline, *sqlgraph.CreateSpec) {
	var (
		_node = &Pipeline{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(pipeline.Table, sqlgraph.NewFieldSpec(pipeline.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(pipeline.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(pipeline.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(pipeline.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pipeline.TenantTable,
			Columns: []string{pipeline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pipeline.StagesTable,
			Columns: []string{pipeline.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PipelineCreateBulk is the builder for creating many Pipeline entities in bulk.
type PipelineCreateBulk struct {
	config
	err      error
	builders []*PipelineCreate
}

// Save creates the Pipeline entities in the database.
func (_c *PipelineCreateBulk) Save(ctx context.Context) ([]*Pipeline, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Pipeline, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PipelineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PipelineCreateBulk) SaveX(ctx context.Context) []*Pipeline {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PipelineCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PipelineCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
