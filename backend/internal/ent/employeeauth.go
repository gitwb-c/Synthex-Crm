// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"crm.saas/backend/internal/ent/employeeauth"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeeAuth is the model entity for the EmployeeAuth schema.
type EmployeeAuth struct {
	config
	// ID of the ent.
	ID           int `json:"id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeAuth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeeauth.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeAuth fields.
func (_m *EmployeeAuth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeeauth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeeAuth.
// This includes values selected through modifiers, order, etc.
func (_m *EmployeeAuth) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this EmployeeAuth.
// Note that you need to call EmployeeAuth.Unwrap() before calling this method if this EmployeeAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *EmployeeAuth) Update() *EmployeeAuthUpdateOne {
	return NewEmployeeAuthClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the EmployeeAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *EmployeeAuth) Unwrap() *EmployeeAuth {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeAuth is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *EmployeeAuth) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeAuth(")
	builder.WriteString(fmt.Sprintf("id=%v", _m.ID))
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeAuths is a parsable slice of EmployeeAuth.
type EmployeeAuths []*EmployeeAuth
