// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/queue"
	"github.com/google/uuid"
)

// Queue is the model entity for the Queue schema.
type Queue struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId uuid.UUID `json:"-" sql:"not null"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type queue.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QueueQuery when eager-loading is set.
	Edges        QueueEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QueueEdges holds the relations/edges for other nodes in the graph.
type QueueEdges struct {
	// Stages holds the value of the stages edge.
	Stages []*Stage `json:"stages,omitempty"`
	// Employees holds the value of the employees edge.
	Employees []*Employee `json:"employees,omitempty"`
	// Department holds the value of the department edge.
	Department []*Department `json:"department,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Company `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedStages     map[string][]*Stage
	namedEmployees  map[string][]*Employee
	namedDepartment map[string][]*Department
}

// StagesOrErr returns the Stages value or an error if the edge
// was not loaded in eager-loading.
func (e QueueEdges) StagesOrErr() ([]*Stage, error) {
	if e.loadedTypes[0] {
		return e.Stages, nil
	}
	return nil, &NotLoadedError{edge: "stages"}
}

// EmployeesOrErr returns the Employees value or an error if the edge
// was not loaded in eager-loading.
func (e QueueEdges) EmployeesOrErr() ([]*Employee, error) {
	if e.loadedTypes[1] {
		return e.Employees, nil
	}
	return nil, &NotLoadedError{edge: "employees"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading.
func (e QueueEdges) DepartmentOrErr() ([]*Department, error) {
	if e.loadedTypes[2] {
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueueEdges) TenantOrErr() (*Company, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Queue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case queue.FieldName, queue.FieldType:
			values[i] = new(sql.NullString)
		case queue.FieldCreatedAt, queue.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case queue.FieldID, queue.FieldTenantId:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Queue fields.
func (_m *Queue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case queue.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case queue.FieldTenantId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value != nil {
				_m.TenantId = *value
			}
		case queue.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case queue.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = queue.Type(value.String)
			}
		case queue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case queue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Queue.
// This includes values selected through modifiers, order, etc.
func (_m *Queue) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStages queries the "stages" edge of the Queue entity.
func (_m *Queue) QueryStages() *StageQuery {
	return NewQueueClient(_m.config).QueryStages(_m)
}

// QueryEmployees queries the "employees" edge of the Queue entity.
func (_m *Queue) QueryEmployees() *EmployeeQuery {
	return NewQueueClient(_m.config).QueryEmployees(_m)
}

// QueryDepartment queries the "department" edge of the Queue entity.
func (_m *Queue) QueryDepartment() *DepartmentQuery {
	return NewQueueClient(_m.config).QueryDepartment(_m)
}

// QueryTenant queries the "tenant" edge of the Queue entity.
func (_m *Queue) QueryTenant() *CompanyQuery {
	return NewQueueClient(_m.config).QueryTenant(_m)
}

// Update returns a builder for updating this Queue.
// Note that you need to call Queue.Unwrap() before calling this method if this Queue
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Queue) Update() *QueueUpdateOne {
	return NewQueueClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Queue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Queue) Unwrap() *Queue {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Queue is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Queue) String() string {
	var builder strings.Builder
	builder.WriteString("Queue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantId))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedStages returns the Stages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Queue) NamedStages(name string) ([]*Stage, error) {
	if _m.Edges.namedStages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedStages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Queue) appendNamedStages(name string, edges ...*Stage) {
	if _m.Edges.namedStages == nil {
		_m.Edges.namedStages = make(map[string][]*Stage)
	}
	if len(edges) == 0 {
		_m.Edges.namedStages[name] = []*Stage{}
	} else {
		_m.Edges.namedStages[name] = append(_m.Edges.namedStages[name], edges...)
	}
}

// NamedEmployees returns the Employees named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Queue) NamedEmployees(name string) ([]*Employee, error) {
	if _m.Edges.namedEmployees == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEmployees[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Queue) appendNamedEmployees(name string, edges ...*Employee) {
	if _m.Edges.namedEmployees == nil {
		_m.Edges.namedEmployees = make(map[string][]*Employee)
	}
	if len(edges) == 0 {
		_m.Edges.namedEmployees[name] = []*Employee{}
	} else {
		_m.Edges.namedEmployees[name] = append(_m.Edges.namedEmployees[name], edges...)
	}
}

// NamedDepartment returns the Department named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Queue) NamedDepartment(name string) ([]*Department, error) {
	if _m.Edges.namedDepartment == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedDepartment[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Queue) appendNamedDepartment(name string, edges ...*Department) {
	if _m.Edges.namedDepartment == nil {
		_m.Edges.namedDepartment = make(map[string][]*Department)
	}
	if len(edges) == 0 {
		_m.Edges.namedDepartment[name] = []*Department{}
	} else {
		_m.Edges.namedDepartment[name] = append(_m.Edges.namedDepartment[name], edges...)
	}
}

// Queues is a parsable slice of Queue.
type Queues []*Queue
