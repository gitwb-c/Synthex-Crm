// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/department"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employee"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/employeeauth"
	"github.com/google/uuid"
)

// Employee is the model entity for the Employee schema.
type Employee struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeQuery when eager-loading is set.
	Edges                  EmployeeEdges `json:"edges"`
	employee_employee_auth *uuid.UUID
	employee_company       *uuid.UUID
	employee_department    *uuid.UUID
	selectValues           sql.SelectValues
}

// EmployeeEdges holds the relations/edges for other nodes in the graph.
type EmployeeEdges struct {
	// EmployeeAuth holds the value of the employeeAuth edge.
	EmployeeAuth *EmployeeAuth `json:"employeeAuth,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Chat holds the value of the chat edge.
	Chat []*Chat `json:"chat,omitempty"`
	// Queues holds the value of the queues edge.
	Queues []*Queue `json:"queues,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedChat     map[string][]*Chat
	namedQueues   map[string][]*Queue
	namedMessages map[string][]*Message
}

// EmployeeAuthOrErr returns the EmployeeAuth value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) EmployeeAuthOrErr() (*EmployeeAuth, error) {
	if e.EmployeeAuth != nil {
		return e.EmployeeAuth, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: employeeauth.Label}
	}
	return nil, &NotLoadedError{edge: "employeeAuth"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) DepartmentOrErr() (*Department, error) {
	if e.Department != nil {
		return e.Department, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: department.Label}
	}
	return nil, &NotLoadedError{edge: "department"}
}

// ChatOrErr returns the Chat value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) ChatOrErr() ([]*Chat, error) {
	if e.loadedTypes[3] {
		return e.Chat, nil
	}
	return nil, &NotLoadedError{edge: "chat"}
}

// QueuesOrErr returns the Queues value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) QueuesOrErr() ([]*Queue, error) {
	if e.loadedTypes[4] {
		return e.Queues, nil
	}
	return nil, &NotLoadedError{edge: "queues"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[5] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employee.FieldActive:
			values[i] = new(sql.NullBool)
		case employee.FieldName:
			values[i] = new(sql.NullString)
		case employee.FieldCreatedAt, employee.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case employee.FieldID:
			values[i] = new(uuid.UUID)
		case employee.ForeignKeys[0]: // employee_employee_auth
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case employee.ForeignKeys[1]: // employee_company
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case employee.ForeignKeys[2]: // employee_department
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employee fields.
func (_m *Employee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employee.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case employee.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case employee.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				_m.Active = value.Bool
			}
		case employee.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case employee.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case employee.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field employee_employee_auth", values[i])
			} else if value.Valid {
				_m.employee_employee_auth = new(uuid.UUID)
				*_m.employee_employee_auth = *value.S.(*uuid.UUID)
			}
		case employee.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field employee_company", values[i])
			} else if value.Valid {
				_m.employee_company = new(uuid.UUID)
				*_m.employee_company = *value.S.(*uuid.UUID)
			}
		case employee.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field employee_department", values[i])
			} else if value.Valid {
				_m.employee_department = new(uuid.UUID)
				*_m.employee_department = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Employee.
// This includes values selected through modifiers, order, etc.
func (_m *Employee) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEmployeeAuth queries the "employeeAuth" edge of the Employee entity.
func (_m *Employee) QueryEmployeeAuth() *EmployeeAuthQuery {
	return NewEmployeeClient(_m.config).QueryEmployeeAuth(_m)
}

// QueryCompany queries the "company" edge of the Employee entity.
func (_m *Employee) QueryCompany() *CompanyQuery {
	return NewEmployeeClient(_m.config).QueryCompany(_m)
}

// QueryDepartment queries the "department" edge of the Employee entity.
func (_m *Employee) QueryDepartment() *DepartmentQuery {
	return NewEmployeeClient(_m.config).QueryDepartment(_m)
}

// QueryChat queries the "chat" edge of the Employee entity.
func (_m *Employee) QueryChat() *ChatQuery {
	return NewEmployeeClient(_m.config).QueryChat(_m)
}

// QueryQueues queries the "queues" edge of the Employee entity.
func (_m *Employee) QueryQueues() *QueueQuery {
	return NewEmployeeClient(_m.config).QueryQueues(_m)
}

// QueryMessages queries the "messages" edge of the Employee entity.
func (_m *Employee) QueryMessages() *MessageQuery {
	return NewEmployeeClient(_m.config).QueryMessages(_m)
}

// Update returns a builder for updating this Employee.
// Note that you need to call Employee.Unwrap() before calling this method if this Employee
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Employee) Update() *EmployeeUpdateOne {
	return NewEmployeeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Employee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Employee) Unwrap() *Employee {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Employee is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Employee) String() string {
	var builder strings.Builder
	builder.WriteString("Employee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", _m.Active))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChat returns the Chat named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Employee) NamedChat(name string) ([]*Chat, error) {
	if _m.Edges.namedChat == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedChat[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Employee) appendNamedChat(name string, edges ...*Chat) {
	if _m.Edges.namedChat == nil {
		_m.Edges.namedChat = make(map[string][]*Chat)
	}
	if len(edges) == 0 {
		_m.Edges.namedChat[name] = []*Chat{}
	} else {
		_m.Edges.namedChat[name] = append(_m.Edges.namedChat[name], edges...)
	}
}

// NamedQueues returns the Queues named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Employee) NamedQueues(name string) ([]*Queue, error) {
	if _m.Edges.namedQueues == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedQueues[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Employee) appendNamedQueues(name string, edges ...*Queue) {
	if _m.Edges.namedQueues == nil {
		_m.Edges.namedQueues = make(map[string][]*Queue)
	}
	if len(edges) == 0 {
		_m.Edges.namedQueues[name] = []*Queue{}
	} else {
		_m.Edges.namedQueues[name] = append(_m.Edges.namedQueues[name], edges...)
	}
}

// NamedMessages returns the Messages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Employee) NamedMessages(name string) ([]*Message, error) {
	if _m.Edges.namedMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Employee) appendNamedMessages(name string, edges ...*Message) {
	if _m.Edges.namedMessages == nil {
		_m.Edges.namedMessages = make(map[string][]*Message)
	}
	if len(edges) == 0 {
		_m.Edges.namedMessages[name] = []*Message{}
	} else {
		_m.Edges.namedMessages[name] = append(_m.Edges.namedMessages[name], edges...)
	}
}

// Employees is a parsable slice of Employee.
type Employees []*Employee
