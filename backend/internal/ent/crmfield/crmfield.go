// Code generated by ent, DO NOT EDIT.

package crmfield

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the crmfield type in the database.
	Label = "crm_field"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSection holds the string denoting the section field in the database.
	FieldSection = "section"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDropdownList holds the string denoting the dropdownlist edge name in mutations.
	EdgeDropdownList = "dropdownList"
	// EdgeDealCrmField holds the string denoting the dealcrmfield edge name in mutations.
	EdgeDealCrmField = "dealCrmField"
	// Table holds the table name of the crmfield in the database.
	Table = "crm_fields"
	// DropdownListTable is the table that holds the dropdownList relation/edge. The primary key declared below.
	DropdownListTable = "dropdown_list_crmField"
	// DropdownListInverseTable is the table name for the DropdownList entity.
	// It exists in this package in order to avoid circular dependency with the "dropdownlist" package.
	DropdownListInverseTable = "dropdown_lists"
	// DealCrmFieldTable is the table that holds the dealCrmField relation/edge.
	DealCrmFieldTable = "deal_crm_fields"
	// DealCrmFieldInverseTable is the table name for the DealCrmField entity.
	// It exists in this package in order to avoid circular dependency with the "dealcrmfield" package.
	DealCrmFieldInverseTable = "deal_crm_fields"
	// DealCrmFieldColumn is the table column denoting the dealCrmField relation/edge.
	DealCrmFieldColumn = "deal_crm_field_crm_field"
)

// Columns holds all SQL columns for crmfield fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSection,
	FieldType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// DropdownListPrimaryKey and DropdownListColumn2 are the table columns denoting the
	// primary key for the dropdownList relation (M2M).
	DropdownListPrimaryKey = []string{"dropdown_list_id", "crm_field_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeTxt          Type = "txt"
	TypeDate         Type = "date"
	TypeCheckbox     Type = "checkbox"
	TypeDropdownList Type = "dropdownList"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeTxt, TypeDate, TypeCheckbox, TypeDropdownList:
		return nil
	default:
		return fmt.Errorf("crmfield: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the CrmField queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySection orders the results by the section field.
func BySection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSection, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDropdownListCount orders the results by dropdownList count.
func ByDropdownListCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDropdownListStep(), opts...)
	}
}

// ByDropdownList orders the results by dropdownList terms.
func ByDropdownList(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDropdownListStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDealCrmFieldCount orders the results by dealCrmField count.
func ByDealCrmFieldCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDealCrmFieldStep(), opts...)
	}
}

// ByDealCrmField orders the results by dealCrmField terms.
func ByDealCrmField(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDealCrmFieldStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDropdownListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DropdownListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DropdownListTable, DropdownListPrimaryKey...),
	)
}
func newDealCrmFieldStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DealCrmFieldInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DealCrmFieldTable, DealCrmFieldColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
