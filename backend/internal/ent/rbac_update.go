// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/department"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/rbac"
	"github.com/google/uuid"
)

// RbacUpdate is the builder for updating Rbac entities.
type RbacUpdate struct {
	config
	hooks    []Hook
	mutation *RbacMutation
}

// Where appends a list predicates to the RbacUpdate builder.
func (_u *RbacUpdate) Where(ps ...predicate.Rbac) *RbacUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAccess sets the "access" field.
func (_u *RbacUpdate) SetAccess(v rbac.Access) *RbacUpdate {
	_u.mutation.SetAccess(v)
	return _u
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (_u *RbacUpdate) SetNillableAccess(v *rbac.Access) *RbacUpdate {
	if v != nil {
		_u.SetAccess(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *RbacUpdate) SetUpdatedAt(v time.Time) *RbacUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (_u *RbacUpdate) SetDepartmentID(id uuid.UUID) *RbacUpdate {
	_u.mutation.SetDepartmentID(id)
	return _u
}

// SetDepartment sets the "department" edge to the Department entity.
func (_u *RbacUpdate) SetDepartment(v *Department) *RbacUpdate {
	return _u.SetDepartmentID(v.ID)
}

// Mutation returns the RbacMutation object of the builder.
func (_u *RbacUpdate) Mutation() *RbacMutation {
	return _u.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (_u *RbacUpdate) ClearDepartment() *RbacUpdate {
	_u.mutation.ClearDepartment()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RbacUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RbacUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RbacUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RbacUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RbacUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := rbac.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RbacUpdate) check() error {
	if v, ok := _u.mutation.Access(); ok {
		if err := rbac.AccessValidator(v); err != nil {
			return &ValidationError{Name: "access", err: fmt.Errorf(`ent: validator failed for field "Rbac.access": %w`, err)}
		}
	}
	if _u.mutation.DepartmentCleared() && len(_u.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rbac.department"`)
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rbac.tenant"`)
	}
	return nil
}

func (_u *RbacUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbac.Table, rbac.Columns, sqlgraph.NewFieldSpec(rbac.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Access(); ok {
		_spec.SetField(rbac.FieldAccess, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(rbac.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rbac.DepartmentTable,
			Columns: []string{rbac.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rbac.DepartmentTable,
			Columns: []string{rbac.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbac.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RbacUpdateOne is the builder for updating a single Rbac entity.
type RbacUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RbacMutation
}

// SetAccess sets the "access" field.
func (_u *RbacUpdateOne) SetAccess(v rbac.Access) *RbacUpdateOne {
	_u.mutation.SetAccess(v)
	return _u
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (_u *RbacUpdateOne) SetNillableAccess(v *rbac.Access) *RbacUpdateOne {
	if v != nil {
		_u.SetAccess(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *RbacUpdateOne) SetUpdatedAt(v time.Time) *RbacUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (_u *RbacUpdateOne) SetDepartmentID(id uuid.UUID) *RbacUpdateOne {
	_u.mutation.SetDepartmentID(id)
	return _u
}

// SetDepartment sets the "department" edge to the Department entity.
func (_u *RbacUpdateOne) SetDepartment(v *Department) *RbacUpdateOne {
	return _u.SetDepartmentID(v.ID)
}

// Mutation returns the RbacMutation object of the builder.
func (_u *RbacUpdateOne) Mutation() *RbacMutation {
	return _u.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (_u *RbacUpdateOne) ClearDepartment() *RbacUpdateOne {
	_u.mutation.ClearDepartment()
	return _u
}

// Where appends a list predicates to the RbacUpdate builder.
func (_u *RbacUpdateOne) Where(ps ...predicate.Rbac) *RbacUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RbacUpdateOne) Select(field string, fields ...string) *RbacUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Rbac entity.
func (_u *RbacUpdateOne) Save(ctx context.Context) (*Rbac, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RbacUpdateOne) SaveX(ctx context.Context) *Rbac {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RbacUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RbacUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RbacUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := rbac.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RbacUpdateOne) check() error {
	if v, ok := _u.mutation.Access(); ok {
		if err := rbac.AccessValidator(v); err != nil {
			return &ValidationError{Name: "access", err: fmt.Errorf(`ent: validator failed for field "Rbac.access": %w`, err)}
		}
	}
	if _u.mutation.DepartmentCleared() && len(_u.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rbac.department"`)
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rbac.tenant"`)
	}
	return nil
}

func (_u *RbacUpdateOne) sqlSave(ctx context.Context) (_node *Rbac, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbac.Table, rbac.Columns, sqlgraph.NewFieldSpec(rbac.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rbac.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rbac.FieldID)
		for _, f := range fields {
			if !rbac.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rbac.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Access(); ok {
		_spec.SetField(rbac.FieldAccess, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(rbac.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rbac.DepartmentTable,
			Columns: []string{rbac.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rbac.DepartmentTable,
			Columns: []string{rbac.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rbac{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbac.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
