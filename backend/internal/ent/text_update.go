// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/message"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/text"
	"github.com/google/uuid"
)

// TextUpdate is the builder for updating Text entities.
type TextUpdate struct {
	config
	hooks    []Hook
	mutation *TextMutation
}

// Where appends a list predicates to the TextUpdate builder.
func (_u *TextUpdate) Where(ps ...predicate.Text) *TextUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetText sets the "text" field.
func (_u *TextUpdate) SetText(v string) *TextUpdate {
	_u.mutation.SetText(v)
	return _u
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_u *TextUpdate) SetNillableText(v *string) *TextUpdate {
	if v != nil {
		_u.SetText(*v)
	}
	return _u
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (_u *TextUpdate) SetMessageID(id uuid.UUID) *TextUpdate {
	_u.mutation.SetMessageID(id)
	return _u
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (_u *TextUpdate) SetNillableMessageID(id *uuid.UUID) *TextUpdate {
	if id != nil {
		_u = _u.SetMessageID(*id)
	}
	return _u
}

// SetMessage sets the "message" edge to the Message entity.
func (_u *TextUpdate) SetMessage(v *Message) *TextUpdate {
	return _u.SetMessageID(v.ID)
}

// Mutation returns the TextMutation object of the builder.
func (_u *TextUpdate) Mutation() *TextMutation {
	return _u.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (_u *TextUpdate) ClearMessage() *TextUpdate {
	_u.mutation.ClearMessage()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TextUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TextUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TextUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TextUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TextUpdate) check() error {
	if v, ok := _u.mutation.Text(); ok {
		if err := text.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Text.text": %w`, err)}
		}
	}
	return nil
}

func (_u *TextUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(text.Table, text.Columns, sqlgraph.NewFieldSpec(text.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Text(); ok {
		_spec.SetField(text.FieldText, field.TypeString, value)
	}
	if _u.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   text.MessageTable,
			Columns: []string{text.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   text.MessageTable,
			Columns: []string{text.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{text.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TextUpdateOne is the builder for updating a single Text entity.
type TextUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TextMutation
}

// SetText sets the "text" field.
func (_u *TextUpdateOne) SetText(v string) *TextUpdateOne {
	_u.mutation.SetText(v)
	return _u
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_u *TextUpdateOne) SetNillableText(v *string) *TextUpdateOne {
	if v != nil {
		_u.SetText(*v)
	}
	return _u
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (_u *TextUpdateOne) SetMessageID(id uuid.UUID) *TextUpdateOne {
	_u.mutation.SetMessageID(id)
	return _u
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (_u *TextUpdateOne) SetNillableMessageID(id *uuid.UUID) *TextUpdateOne {
	if id != nil {
		_u = _u.SetMessageID(*id)
	}
	return _u
}

// SetMessage sets the "message" edge to the Message entity.
func (_u *TextUpdateOne) SetMessage(v *Message) *TextUpdateOne {
	return _u.SetMessageID(v.ID)
}

// Mutation returns the TextMutation object of the builder.
func (_u *TextUpdateOne) Mutation() *TextMutation {
	return _u.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (_u *TextUpdateOne) ClearMessage() *TextUpdateOne {
	_u.mutation.ClearMessage()
	return _u
}

// Where appends a list predicates to the TextUpdate builder.
func (_u *TextUpdateOne) Where(ps ...predicate.Text) *TextUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TextUpdateOne) Select(field string, fields ...string) *TextUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Text entity.
func (_u *TextUpdateOne) Save(ctx context.Context) (*Text, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TextUpdateOne) SaveX(ctx context.Context) *Text {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TextUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TextUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TextUpdateOne) check() error {
	if v, ok := _u.mutation.Text(); ok {
		if err := text.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Text.text": %w`, err)}
		}
	}
	return nil
}

func (_u *TextUpdateOne) sqlSave(ctx context.Context) (_node *Text, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(text.Table, text.Columns, sqlgraph.NewFieldSpec(text.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Text.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, text.FieldID)
		for _, f := range fields {
			if !text.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != text.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Text(); ok {
		_spec.SetField(text.FieldText, field.TypeString, value)
	}
	if _u.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   text.MessageTable,
			Columns: []string{text.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   text.MessageTable,
			Columns: []string{text.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Text{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{text.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
