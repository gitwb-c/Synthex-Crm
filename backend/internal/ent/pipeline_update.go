// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/pipeline"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/predicate"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/stage"
	"github.com/google/uuid"
)

// PipelineUpdate is the builder for updating Pipeline entities.
type PipelineUpdate struct {
	config
	hooks    []Hook
	mutation *PipelineMutation
}

// Where appends a list predicates to the PipelineUpdate builder.
func (_u *PipelineUpdate) Where(ps ...predicate.Pipeline) *PipelineUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *PipelineUpdate) SetName(v string) *PipelineUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PipelineUpdate) SetNillableName(v *string) *PipelineUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *PipelineUpdate) SetUpdatedAt(v time.Time) *PipelineUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddStageIDs adds the "stages" edge to the Stage entity by IDs.
func (_u *PipelineUpdate) AddStageIDs(ids ...uuid.UUID) *PipelineUpdate {
	_u.mutation.AddStageIDs(ids...)
	return _u
}

// AddStages adds the "stages" edges to the Stage entity.
func (_u *PipelineUpdate) AddStages(v ...*Stage) *PipelineUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStageIDs(ids...)
}

// Mutation returns the PipelineMutation object of the builder.
func (_u *PipelineUpdate) Mutation() *PipelineMutation {
	return _u.mutation
}

// ClearStages clears all "stages" edges to the Stage entity.
func (_u *PipelineUpdate) ClearStages() *PipelineUpdate {
	_u.mutation.ClearStages()
	return _u
}

// RemoveStageIDs removes the "stages" edge to Stage entities by IDs.
func (_u *PipelineUpdate) RemoveStageIDs(ids ...uuid.UUID) *PipelineUpdate {
	_u.mutation.RemoveStageIDs(ids...)
	return _u
}

// RemoveStages removes "stages" edges to Stage entities.
func (_u *PipelineUpdate) RemoveStages(v ...*Stage) *PipelineUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PipelineUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PipelineUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PipelineUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PipelineUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PipelineUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := pipeline.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PipelineUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := pipeline.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pipeline.name": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pipeline.tenant"`)
	}
	return nil
}

func (_u *PipelineUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pipeline.Table, pipeline.Columns, sqlgraph.NewFieldSpec(pipeline.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(pipeline.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(pipeline.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pipeline.StagesTable,
			Columns: []string{pipeline.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStagesIDs(); len(nodes) > 0 && !_u.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pipeline.StagesTable,
			Columns: []string{pipeline.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pipeline.StagesTable,
			Columns: []string{pipeline.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pipeline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PipelineUpdateOne is the builder for updating a single Pipeline entity.
type PipelineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PipelineMutation
}

// SetName sets the "name" field.
func (_u *PipelineUpdateOne) SetName(v string) *PipelineUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PipelineUpdateOne) SetNillableName(v *string) *PipelineUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updatedAt" field.
func (_u *PipelineUpdateOne) SetUpdatedAt(v time.Time) *PipelineUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddStageIDs adds the "stages" edge to the Stage entity by IDs.
func (_u *PipelineUpdateOne) AddStageIDs(ids ...uuid.UUID) *PipelineUpdateOne {
	_u.mutation.AddStageIDs(ids...)
	return _u
}

// AddStages adds the "stages" edges to the Stage entity.
func (_u *PipelineUpdateOne) AddStages(v ...*Stage) *PipelineUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStageIDs(ids...)
}

// Mutation returns the PipelineMutation object of the builder.
func (_u *PipelineUpdateOne) Mutation() *PipelineMutation {
	return _u.mutation
}

// ClearStages clears all "stages" edges to the Stage entity.
func (_u *PipelineUpdateOne) ClearStages() *PipelineUpdateOne {
	_u.mutation.ClearStages()
	return _u
}

// RemoveStageIDs removes the "stages" edge to Stage entities by IDs.
func (_u *PipelineUpdateOne) RemoveStageIDs(ids ...uuid.UUID) *PipelineUpdateOne {
	_u.mutation.RemoveStageIDs(ids...)
	return _u
}

// RemoveStages removes "stages" edges to Stage entities.
func (_u *PipelineUpdateOne) RemoveStages(v ...*Stage) *PipelineUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStageIDs(ids...)
}

// Where appends a list predicates to the PipelineUpdate builder.
func (_u *PipelineUpdateOne) Where(ps ...predicate.Pipeline) *PipelineUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PipelineUpdateOne) Select(field string, fields ...string) *PipelineUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Pipeline entity.
func (_u *PipelineUpdateOne) Save(ctx context.Context) (*Pipeline, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PipelineUpdateOne) SaveX(ctx context.Context) *Pipeline {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PipelineUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PipelineUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PipelineUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := pipeline.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PipelineUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := pipeline.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pipeline.name": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pipeline.tenant"`)
	}
	return nil
}

func (_u *PipelineUpdateOne) sqlSave(ctx context.Context) (_node *Pipeline, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pipeline.Table, pipeline.Columns, sqlgraph.NewFieldSpec(pipeline.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pipeline.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pipeline.FieldID)
		for _, f := range fields {
			if !pipeline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pipeline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(pipeline.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(pipeline.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pipeline.StagesTable,
			Columns: []string{pipeline.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStagesIDs(); len(nodes) > 0 && !_u.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pipeline.StagesTable,
			Columns: []string{pipeline.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pipeline.StagesTable,
			Columns: []string{pipeline.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pipeline{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pipeline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
