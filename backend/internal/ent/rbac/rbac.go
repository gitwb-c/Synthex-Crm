// Code generated by ent, DO NOT EDIT.

package rbac

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the rbac type in the database.
	Label = "rbac"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAccess holds the string denoting the access field in the database.
	FieldAccess = "access"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// Table holds the table name of the rbac in the database.
	Table = "rbacs"
	// DepartmentTable is the table that holds the department relation/edge.
	DepartmentTable = "rbacs"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "rbac_department"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "rbacs"
	// TenantInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	TenantInverseTable = "companies"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
)

// Columns holds all SQL columns for rbac fields.
var Columns = []string{
	FieldID,
	FieldAccess,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTenantId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rbacs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"rbac_department",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Access defines the type for the "access" enum field.
type Access string

// Access values.
const (
	AccessViewAllDeals                    Access = "view_all_deals"
	AccessViewResponsibleChatDeals        Access = "view_responsible_chat_deals"
	AccessViewDepartmentPhaseDeals        Access = "view_department_phase_deals"
	AccessDeleteDeals                     Access = "delete_deals"
	AccessChangeResponsibleChatOrBusiness Access = "change_responsible_chat_or_business"
	AccessViewAllCustomerData             Access = "view_all_customer_data"
	AccessViewDepartmentCustomerData      Access = "view_department_customer_data"
	AccessCreateDeal                      Access = "create_deal"
	AccessEditDeals                       Access = "edit_deals"
	AccessApproveOrDenyDeals              Access = "approve_or_deny_deals"
	AccessViewChatHistory                 Access = "view_chat_history"
	AccessViewAdvancedReports             Access = "view_advanced_reports"
	AccessManageUsers                     Access = "manage_users"
	AccessManageDepartments               Access = "manage_departments"
	AccessManageSystemSettings            Access = "manage_system_settings"
	AccessManageProductsOrServices        Access = "manage_products_or_services"
	AccessExportData                      Access = "export_data"
	AccessConfigureWorkflows              Access = "configure_workflows"
	AccessSendNotifications               Access = "send_notifications"
	AccessViewNotifications               Access = "view_notifications"
	AccessConfigureIntegrations           Access = "configure_integrations"
	AccessViewDashboardAnalyticsData      Access = "view_dashboard_analytics_data"
	AccessPostSaleActions                 Access = "post_sale_actions"
)

func (a Access) String() string {
	return string(a)
}

// AccessValidator is a validator for the "access" field enum values. It is called by the builders before save.
func AccessValidator(a Access) error {
	switch a {
	case AccessViewAllDeals, AccessViewResponsibleChatDeals, AccessViewDepartmentPhaseDeals, AccessDeleteDeals, AccessChangeResponsibleChatOrBusiness, AccessViewAllCustomerData, AccessViewDepartmentCustomerData, AccessCreateDeal, AccessEditDeals, AccessApproveOrDenyDeals, AccessViewChatHistory, AccessViewAdvancedReports, AccessManageUsers, AccessManageDepartments, AccessManageSystemSettings, AccessManageProductsOrServices, AccessExportData, AccessConfigureWorkflows, AccessSendNotifications, AccessViewNotifications, AccessConfigureIntegrations, AccessViewDashboardAnalyticsData, AccessPostSaleActions:
		return nil
	default:
		return fmt.Errorf("rbac: invalid enum value for access field: %q", a)
	}
}

// OrderOption defines the ordering options for the Rbac queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccess orders the results by the access field.
func ByAccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccess, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantId orders the results by the tenantId field.
func ByTenantId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantId, opts...).ToFunc()
}

// ByDepartmentField orders the results by department field.
func ByDepartmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}
func newDepartmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DepartmentTable, DepartmentColumn),
	)
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Access) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Access) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Access(str)
	if err := AccessValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Access", str)
	}
	return nil
}
