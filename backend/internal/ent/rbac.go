// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/company"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/department"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/rbac"
	"github.com/google/uuid"
)

// Rbac is the model entity for the Rbac schema.
type Rbac struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId uuid.UUID `json:"-" sql:"not null"`
	// Access holds the value of the "access" field.
	Access rbac.Access `json:"access,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RbacQuery when eager-loading is set.
	Edges           RbacEdges `json:"edges"`
	rbac_department *uuid.UUID
	selectValues    sql.SelectValues
}

// RbacEdges holds the relations/edges for other nodes in the graph.
type RbacEdges struct {
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Company `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RbacEdges) DepartmentOrErr() (*Department, error) {
	if e.Department != nil {
		return e.Department, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: department.Label}
	}
	return nil, &NotLoadedError{edge: "department"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RbacEdges) TenantOrErr() (*Company, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rbac) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rbac.FieldAccess:
			values[i] = new(sql.NullString)
		case rbac.FieldCreatedAt, rbac.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case rbac.FieldID, rbac.FieldTenantId:
			values[i] = new(uuid.UUID)
		case rbac.ForeignKeys[0]: // rbac_department
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rbac fields.
func (_m *Rbac) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rbac.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case rbac.FieldTenantId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value != nil {
				_m.TenantId = *value
			}
		case rbac.FieldAccess:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access", values[i])
			} else if value.Valid {
				_m.Access = rbac.Access(value.String)
			}
		case rbac.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case rbac.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case rbac.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field rbac_department", values[i])
			} else if value.Valid {
				_m.rbac_department = new(uuid.UUID)
				*_m.rbac_department = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rbac.
// This includes values selected through modifiers, order, etc.
func (_m *Rbac) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDepartment queries the "department" edge of the Rbac entity.
func (_m *Rbac) QueryDepartment() *DepartmentQuery {
	return NewRbacClient(_m.config).QueryDepartment(_m)
}

// QueryTenant queries the "tenant" edge of the Rbac entity.
func (_m *Rbac) QueryTenant() *CompanyQuery {
	return NewRbacClient(_m.config).QueryTenant(_m)
}

// Update returns a builder for updating this Rbac.
// Note that you need to call Rbac.Unwrap() before calling this method if this Rbac
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Rbac) Update() *RbacUpdateOne {
	return NewRbacClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Rbac entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Rbac) Unwrap() *Rbac {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rbac is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Rbac) String() string {
	var builder strings.Builder
	builder.WriteString("Rbac(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantId))
	builder.WriteString(", ")
	builder.WriteString("access=")
	builder.WriteString(fmt.Sprintf("%v", _m.Access))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rbacs is a parsable slice of Rbac.
type Rbacs []*Rbac
