// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gitwb-c/crm.saas/backend/internal/ent/dropdownlist"
	"github.com/google/uuid"
)

// DropdownList is the model entity for the DropdownList schema.
type DropdownList struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DropdownListQuery when eager-loading is set.
	Edges        DropdownListEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DropdownListEdges holds the relations/edges for other nodes in the graph.
type DropdownListEdges struct {
	// CrmField holds the value of the crmField edge.
	CrmField []*CrmField `json:"crmField,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCrmField map[string][]*CrmField
}

// CrmFieldOrErr returns the CrmField value or an error if the edge
// was not loaded in eager-loading.
func (e DropdownListEdges) CrmFieldOrErr() ([]*CrmField, error) {
	if e.loadedTypes[0] {
		return e.CrmField, nil
	}
	return nil, &NotLoadedError{edge: "crmField"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DropdownList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dropdownlist.FieldValue:
			values[i] = new(sql.NullString)
		case dropdownlist.FieldCreatedAt, dropdownlist.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case dropdownlist.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DropdownList fields.
func (_m *DropdownList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dropdownlist.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case dropdownlist.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.String
			}
		case dropdownlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case dropdownlist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the DropdownList.
// This includes values selected through modifiers, order, etc.
func (_m *DropdownList) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCrmField queries the "crmField" edge of the DropdownList entity.
func (_m *DropdownList) QueryCrmField() *CrmFieldQuery {
	return NewDropdownListClient(_m.config).QueryCrmField(_m)
}

// Update returns a builder for updating this DropdownList.
// Note that you need to call DropdownList.Unwrap() before calling this method if this DropdownList
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DropdownList) Update() *DropdownListUpdateOne {
	return NewDropdownListClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DropdownList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DropdownList) Unwrap() *DropdownList {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: DropdownList is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DropdownList) String() string {
	var builder strings.Builder
	builder.WriteString("DropdownList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("value=")
	builder.WriteString(_m.Value)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCrmField returns the CrmField named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *DropdownList) NamedCrmField(name string) ([]*CrmField, error) {
	if _m.Edges.namedCrmField == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedCrmField[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *DropdownList) appendNamedCrmField(name string, edges ...*CrmField) {
	if _m.Edges.namedCrmField == nil {
		_m.Edges.namedCrmField = make(map[string][]*CrmField)
	}
	if len(edges) == 0 {
		_m.Edges.namedCrmField[name] = []*CrmField{}
	} else {
		_m.Edges.namedCrmField[name] = append(_m.Edges.namedCrmField[name], edges...)
	}
}

// DropdownLists is a parsable slice of DropdownList.
type DropdownLists []*DropdownList
