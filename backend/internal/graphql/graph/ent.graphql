directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Chat implements Node {
  id: ID!
  title: String!
  accepted: Boolean!
  locked: Boolean!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deal: Deal
  employees: [Employee!]
  messages: [Message!]
}
"""
Ordering options for Chat connections
"""
input ChatOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Chats.
  """
  field: ChatOrderField!
}
"""
Properties by which Chat connections can be ordered.
"""
enum ChatOrderField {
  TITLE
  ACCEPTED
  LOCKED
  CREATED_AT
  UPDATED_AT
}
"""
ChatWhereInput is used for filtering Chat objects.
Input was generated by ent.
"""
input ChatWhereInput {
  not: ChatWhereInput
  and: [ChatWhereInput!]
  or: [ChatWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  accepted field predicates
  """
  accepted: Boolean
  acceptedNEQ: Boolean
  """
  locked field predicates
  """
  locked: Boolean
  lockedNEQ: Boolean
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deal edge predicates
  """
  hasDeal: Boolean
  hasDealWith: [DealWhereInput!]
  """
  employees edge predicates
  """
  hasEmployees: Boolean
  hasEmployeesWith: [EmployeeWhereInput!]
  """
  messages edge predicates
  """
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
}
type Company implements Node {
  id: ID!
  name: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  employee: [Employee!]
}
"""
Ordering options for Company connections
"""
input CompanyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Companies.
  """
  field: CompanyOrderField!
}
"""
Properties by which Company connections can be ordered.
"""
enum CompanyOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}
"""
CompanyWhereInput is used for filtering Company objects.
Input was generated by ent.
"""
input CompanyWhereInput {
  not: CompanyWhereInput
  and: [CompanyWhereInput!]
  or: [CompanyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  employee edge predicates
  """
  hasEmployee: Boolean
  hasEmployeeWith: [EmployeeWhereInput!]
}
type Costumer implements Node {
  id: ID!
  name: String!
  phone: String!
  email: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deals: [Deal!]
}
"""
Ordering options for Costumer connections
"""
input CostumerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Costumers.
  """
  field: CostumerOrderField!
}
"""
Properties by which Costumer connections can be ordered.
"""
enum CostumerOrderField {
  NAME
  PHONE
  EMAIL
  CREATED_AT
  UPDATED_AT
}
"""
CostumerWhereInput is used for filtering Costumer objects.
Input was generated by ent.
"""
input CostumerWhereInput {
  not: CostumerWhereInput
  and: [CostumerWhereInput!]
  or: [CostumerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deals edge predicates
  """
  hasDeals: Boolean
  hasDealsWith: [DealWhereInput!]
}
"""
CreateChatInput is used for create Chat object.
Input was generated by ent.
"""
input CreateChatInput {
  title: String!
  accepted: Boolean!
  locked: Boolean!
  createdat: Time
  updatedat: Time
  dealID: ID
  employeeIDs: [ID!]
  messageIDs: [ID!]
}
"""
CreateCompanyInput is used for create Company object.
Input was generated by ent.
"""
input CreateCompanyInput {
  name: String!
  createdat: Time
  updatedat: Time
  employeeIDs: [ID!]
}
"""
CreateCostumerInput is used for create Costumer object.
Input was generated by ent.
"""
input CreateCostumerInput {
  name: String!
  phone: String!
  email: String!
  createdat: Time
  updatedat: Time
  dealIDs: [ID!]
}
"""
CreateCrmFieldInput is used for create CrmField object.
Input was generated by ent.
"""
input CreateCrmFieldInput {
  name: String!
  section: String!
  type: CrmFieldType!
  createdat: Time
  updatedat: Time
  dropdownlistIDs: [ID!]
  dealcrmfieldIDs: [ID!]
}
"""
CreateDealCrmFieldInput is used for create DealCrmField object.
Input was generated by ent.
"""
input CreateDealCrmFieldInput {
  value: String!
  createdat: Time
  updatedat: Time
  dealID: ID!
  crmfieldID: ID!
}
"""
CreateDealInput is used for create Deal object.
Input was generated by ent.
"""
input CreateDealInput {
  title: String!
  source: String!
  createdat: Time
  updatedat: Time
  costumerID: ID
  chatID: ID
  stageID: ID!
  dealcrmfieldIDs: [ID!]
}
"""
CreateDepartmentInput is used for create Department object.
Input was generated by ent.
"""
input CreateDepartmentInput {
  name: String!
  createdat: Time
  updatedat: Time
  employeeIDs: [ID!]
  queueIDs: [ID!]
}
"""
CreateDropdownListInput is used for create DropdownList object.
Input was generated by ent.
"""
input CreateDropdownListInput {
  value: String!
  createdat: Time
  updatedat: Time
  crmfieldIDs: [ID!]!
}
"""
CreateEmployeeAuthInput is used for create EmployeeAuth object.
Input was generated by ent.
"""
input CreateEmployeeAuthInput {
  name: String!
  email: String!
  password: String!
  createdat: Time
  updatedat: Time
  employeeID: ID
}
"""
CreateEmployeeInput is used for create Employee object.
Input was generated by ent.
"""
input CreateEmployeeInput {
  name: String!
  active: Boolean
  createdat: Time
  updatedat: Time
  employeeauthID: ID!
  companyID: ID!
  departmentID: ID!
  chatIDs: [ID!]
  queueIDs: [ID!]
  messageIDs: [ID!]
}
"""
CreateFileInput is used for create File object.
Input was generated by ent.
"""
input CreateFileInput {
  url: String!
  caption: String
  mimetype: String!
  filename: String!
  messageID: ID!
}
"""
CreateMessageInput is used for create Message object.
Input was generated by ent.
"""
input CreateMessageInput {
  sentby: MessageSentBy!
  private: Boolean!
  type: MessageType!
  createdat: Time
  updatedat: Time
  chatID: ID
  employeeIDs: [ID!]
  textID: ID
  fileID: ID
}
"""
CreatePipelineInput is used for create Pipeline object.
Input was generated by ent.
"""
input CreatePipelineInput {
  name: String!
  createdat: Time
  updatedat: Time
  stageIDs: [ID!]
}
"""
CreateQueueInput is used for create Queue object.
Input was generated by ent.
"""
input CreateQueueInput {
  name: String!
  type: QueueType
  createdat: Time
  updatedat: Time
  stageIDs: [ID!]
  employeeIDs: [ID!]
  departmentIDs: [ID!]!
}
"""
CreateStageInput is used for create Stage object.
Input was generated by ent.
"""
input CreateStageInput {
  name: String!
  color: String
  lossorgain: Boolean!
  createdat: Time
  updatedat: Time
  pipelineID: ID!
  dealIDs: [ID!]
  queueID: ID
}
"""
CreateTextInput is used for create Text object.
Input was generated by ent.
"""
input CreateTextInput {
  text: String!
  messageID: ID!
}
type CrmField implements Node {
  id: ID!
  name: String!
  section: String!
  type: CrmFieldType!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  dropdownlist: [DropdownList!] @goField(name: "DropdownList", forceResolver: false)
  dealcrmfield: [DealCrmField!] @goField(name: "DealCrmField", forceResolver: false)
}
"""
Ordering options for CrmField connections
"""
input CrmFieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order CrmFields.
  """
  field: CrmFieldOrderField!
}
"""
Properties by which CrmField connections can be ordered.
"""
enum CrmFieldOrderField {
  NAME
  SECTION
  TYPE
  CREATED_AT
  UPDATED_AT
}
"""
CrmFieldType is enum for the field type
"""
enum CrmFieldType @goModel(model: "github.com/gitwb-c/crm.saas/backend/internal/ent/crmfield.Type") {
  txt
  date
  checkbox
  dropdownList
}
"""
CrmFieldWhereInput is used for filtering CrmField objects.
Input was generated by ent.
"""
input CrmFieldWhereInput {
  not: CrmFieldWhereInput
  and: [CrmFieldWhereInput!]
  or: [CrmFieldWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  section field predicates
  """
  section: String
  sectionNEQ: String
  sectionIn: [String!]
  sectionNotIn: [String!]
  sectionGT: String
  sectionGTE: String
  sectionLT: String
  sectionLTE: String
  sectionContains: String
  sectionHasPrefix: String
  sectionHasSuffix: String
  sectionEqualFold: String
  sectionContainsFold: String
  """
  type field predicates
  """
  type: CrmFieldType
  typeNEQ: CrmFieldType
  typeIn: [CrmFieldType!]
  typeNotIn: [CrmFieldType!]
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  dropdownList edge predicates
  """
  hasDropdownList: Boolean
  hasDropdownListWith: [DropdownListWhereInput!]
  """
  dealCrmField edge predicates
  """
  hasDealCrmField: Boolean
  hasDealCrmFieldWith: [DealCrmFieldWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Deal implements Node {
  id: ID!
  title: String!
  source: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  costumer: Costumer
  chat: Chat
  stage: Stage!
  dealcrmfields: [DealCrmField!] @goField(name: "DealCrmFields", forceResolver: false)
}
type DealCrmField implements Node {
  id: ID!
  value: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  deal: Deal!
  crmfield: CrmField! @goField(name: "CrmField", forceResolver: false)
}
"""
Ordering options for DealCrmField connections
"""
input DealCrmFieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order DealCrmFields.
  """
  field: DealCrmFieldOrderField!
}
"""
Properties by which DealCrmField connections can be ordered.
"""
enum DealCrmFieldOrderField {
  VALUE
  CREATED_AT
  UPDATED_AT
}
"""
DealCrmFieldWhereInput is used for filtering DealCrmField objects.
Input was generated by ent.
"""
input DealCrmFieldWhereInput {
  not: DealCrmFieldWhereInput
  and: [DealCrmFieldWhereInput!]
  or: [DealCrmFieldWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  value field predicates
  """
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  deal edge predicates
  """
  hasDeal: Boolean
  hasDealWith: [DealWhereInput!]
  """
  crmField edge predicates
  """
  hasCrmField: Boolean
  hasCrmFieldWith: [CrmFieldWhereInput!]
}
"""
Ordering options for Deal connections
"""
input DealOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Deals.
  """
  field: DealOrderField!
}
"""
Properties by which Deal connections can be ordered.
"""
enum DealOrderField {
  TITLE
  SOURCE
  CREATED_AT
  UPDATED_AT
}
"""
DealWhereInput is used for filtering Deal objects.
Input was generated by ent.
"""
input DealWhereInput {
  not: DealWhereInput
  and: [DealWhereInput!]
  or: [DealWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceEqualFold: String
  sourceContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  costumer edge predicates
  """
  hasCostumer: Boolean
  hasCostumerWith: [CostumerWhereInput!]
  """
  chat edge predicates
  """
  hasChat: Boolean
  hasChatWith: [ChatWhereInput!]
  """
  stage edge predicates
  """
  hasStage: Boolean
  hasStageWith: [StageWhereInput!]
  """
  dealCrmFields edge predicates
  """
  hasDealCrmFields: Boolean
  hasDealCrmFieldsWith: [DealCrmFieldWhereInput!]
}
type Department implements Node {
  id: ID!
  name: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  employee: [Employee!]
  queues: [Queue!]
}
"""
Ordering options for Department connections
"""
input DepartmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Departments.
  """
  field: DepartmentOrderField!
}
"""
Properties by which Department connections can be ordered.
"""
enum DepartmentOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}
"""
DepartmentWhereInput is used for filtering Department objects.
Input was generated by ent.
"""
input DepartmentWhereInput {
  not: DepartmentWhereInput
  and: [DepartmentWhereInput!]
  or: [DepartmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  employee edge predicates
  """
  hasEmployee: Boolean
  hasEmployeeWith: [EmployeeWhereInput!]
  """
  queues edge predicates
  """
  hasQueues: Boolean
  hasQueuesWith: [QueueWhereInput!]
}
type DropdownList implements Node {
  id: ID!
  value: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  crmfield: [CrmField!]! @goField(name: "CrmField", forceResolver: false)
}
"""
Ordering options for DropdownList connections
"""
input DropdownListOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order DropdownLists.
  """
  field: DropdownListOrderField!
}
"""
Properties by which DropdownList connections can be ordered.
"""
enum DropdownListOrderField {
  VALUE
  CREATED_AT
  UPDATED_AT
}
"""
DropdownListWhereInput is used for filtering DropdownList objects.
Input was generated by ent.
"""
input DropdownListWhereInput {
  not: DropdownListWhereInput
  and: [DropdownListWhereInput!]
  or: [DropdownListWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  value field predicates
  """
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  crmField edge predicates
  """
  hasCrmField: Boolean
  hasCrmFieldWith: [CrmFieldWhereInput!]
}
type Employee implements Node {
  id: ID!
  name: String!
  active: Boolean!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  employeeauth: EmployeeAuth! @goField(name: "EmployeeAuth", forceResolver: false)
  company: Company!
  department: Department!
  chat: [Chat!]
  queues: [Queue!]
  messages: [Message!]
}
type EmployeeAuth implements Node {
  id: ID!
  name: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  employee: Employee
}
"""
Ordering options for EmployeeAuth connections
"""
input EmployeeAuthOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EmployeeAuths.
  """
  field: EmployeeAuthOrderField!
}
"""
Properties by which EmployeeAuth connections can be ordered.
"""
enum EmployeeAuthOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
EmployeeAuthWhereInput is used for filtering EmployeeAuth objects.
Input was generated by ent.
"""
input EmployeeAuthWhereInput {
  not: EmployeeAuthWhereInput
  and: [EmployeeAuthWhereInput!]
  or: [EmployeeAuthWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  employee edge predicates
  """
  hasEmployee: Boolean
  hasEmployeeWith: [EmployeeWhereInput!]
}
"""
Ordering options for Employee connections
"""
input EmployeeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Employees.
  """
  field: EmployeeOrderField!
}
"""
Properties by which Employee connections can be ordered.
"""
enum EmployeeOrderField {
  NAME
  ACTIVE
  CREATED_AT
  UPDATED_AT
}
"""
EmployeeWhereInput is used for filtering Employee objects.
Input was generated by ent.
"""
input EmployeeWhereInput {
  not: EmployeeWhereInput
  and: [EmployeeWhereInput!]
  or: [EmployeeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  employeeAuth edge predicates
  """
  hasEmployeeAuth: Boolean
  hasEmployeeAuthWith: [EmployeeAuthWhereInput!]
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  department edge predicates
  """
  hasDepartment: Boolean
  hasDepartmentWith: [DepartmentWhereInput!]
  """
  chat edge predicates
  """
  hasChat: Boolean
  hasChatWith: [ChatWhereInput!]
  """
  queues edge predicates
  """
  hasQueues: Boolean
  hasQueuesWith: [QueueWhereInput!]
  """
  messages edge predicates
  """
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
}
type File implements Node {
  id: ID!
  url: String!
  caption: String
  mimetype: String! @goField(name: "MimeType", forceResolver: false)
  filename: String! @goField(name: "FileName", forceResolver: false)
  message: Message!
}
"""
Ordering options for File connections
"""
input FileOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Files.
  """
  field: FileOrderField!
}
"""
Properties by which File connections can be ordered.
"""
enum FileOrderField {
  URL
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """
  caption field predicates
  """
  caption: String
  captionNEQ: String
  captionIn: [String!]
  captionNotIn: [String!]
  captionGT: String
  captionGTE: String
  captionLT: String
  captionLTE: String
  captionContains: String
  captionHasPrefix: String
  captionHasSuffix: String
  captionIsNil: Boolean
  captionNotNil: Boolean
  captionEqualFold: String
  captionContainsFold: String
  """
  mimeType field predicates
  """
  mimetype: String
  mimetypeNEQ: String
  mimetypeIn: [String!]
  mimetypeNotIn: [String!]
  mimetypeGT: String
  mimetypeGTE: String
  mimetypeLT: String
  mimetypeLTE: String
  mimetypeContains: String
  mimetypeHasPrefix: String
  mimetypeHasSuffix: String
  mimetypeEqualFold: String
  mimetypeContainsFold: String
  """
  fileName field predicates
  """
  filename: String
  filenameNEQ: String
  filenameIn: [String!]
  filenameNotIn: [String!]
  filenameGT: String
  filenameGTE: String
  filenameLT: String
  filenameLTE: String
  filenameContains: String
  filenameHasPrefix: String
  filenameHasSuffix: String
  filenameEqualFold: String
  filenameContainsFold: String
  """
  message edge predicates
  """
  hasMessage: Boolean
  hasMessageWith: [MessageWhereInput!]
}
type Message implements Node {
  id: ID!
  sentby: MessageSentBy! @goField(name: "SentBy", forceResolver: false)
  private: Boolean!
  type: MessageType!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  chat: Chat
  employee: [Employee!]
  text: Text
  file: File
}
"""
Ordering options for Message connections
"""
input MessageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Messages.
  """
  field: MessageOrderField!
}
"""
Properties by which Message connections can be ordered.
"""
enum MessageOrderField {
  SENT_BY
  PRIVATE
  TYPE
  CREATED_AT
  UPDATED_AT
}
"""
MessageSentBy is enum for the field sentBy
"""
enum MessageSentBy @goModel(model: "github.com/gitwb-c/crm.saas/backend/internal/ent/message.SentBy") {
  employee
  costumer
}
"""
MessageType is enum for the field type
"""
enum MessageType @goModel(model: "github.com/gitwb-c/crm.saas/backend/internal/ent/message.Type") {
  text
  audio
  image
  file
}
"""
MessageWhereInput is used for filtering Message objects.
Input was generated by ent.
"""
input MessageWhereInput {
  not: MessageWhereInput
  and: [MessageWhereInput!]
  or: [MessageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  sentBy field predicates
  """
  sentby: MessageSentBy
  sentbyNEQ: MessageSentBy
  sentbyIn: [MessageSentBy!]
  sentbyNotIn: [MessageSentBy!]
  """
  private field predicates
  """
  private: Boolean
  privateNEQ: Boolean
  """
  type field predicates
  """
  type: MessageType
  typeNEQ: MessageType
  typeIn: [MessageType!]
  typeNotIn: [MessageType!]
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  chat edge predicates
  """
  hasChat: Boolean
  hasChatWith: [ChatWhereInput!]
  """
  employee edge predicates
  """
  hasEmployee: Boolean
  hasEmployeeWith: [EmployeeWhereInput!]
  """
  text edge predicates
  """
  hasText: Boolean
  hasTextWith: [TextWhereInput!]
  """
  file edge predicates
  """
  hasFile: Boolean
  hasFileWith: [FileWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/gitwb-c/crm.saas/backend/internal/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Pipeline implements Node {
  id: ID!
  name: String!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  stages: [Stage!]
}
"""
Ordering options for Pipeline connections
"""
input PipelineOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Pipelines.
  """
  field: PipelineOrderField!
}
"""
Properties by which Pipeline connections can be ordered.
"""
enum PipelineOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}
"""
PipelineWhereInput is used for filtering Pipeline objects.
Input was generated by ent.
"""
input PipelineWhereInput {
  not: PipelineWhereInput
  and: [PipelineWhereInput!]
  or: [PipelineWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  stages edge predicates
  """
  hasStages: Boolean
  hasStagesWith: [StageWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  chats: [Chat!]!
  companies: [Company!]!
  costumers: [Costumer!]!
  crmFields: [CrmField!]!
  deals: [Deal!]!
  dealCrmFields: [DealCrmField!]!
  departments: [Department!]!
  dropdownLists: [DropdownList!]!
  employees: [Employee!]!
  employeeAuths: [EmployeeAuth!]!
  files: [File!]!
  messages: [Message!]!
  pipelines: [Pipeline!]!
  queues: [Queue!]!
  stages: [Stage!]!
  texts: [Text!]!
}
type Queue implements Node {
  id: ID!
  name: String!
  type: QueueType!
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  stages: [Stage!]
  employees: [Employee!]
  department: [Department!]!
}
"""
Ordering options for Queue connections
"""
input QueueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Queues.
  """
  field: QueueOrderField!
}
"""
Properties by which Queue connections can be ordered.
"""
enum QueueOrderField {
  NAME
  TYPE
  CREATED_AT
  UPDATED_AT
}
"""
QueueType is enum for the field type
"""
enum QueueType @goModel(model: "github.com/gitwb-c/crm.saas/backend/internal/ent/queue.Type") {
  ring
}
"""
QueueWhereInput is used for filtering Queue objects.
Input was generated by ent.
"""
input QueueWhereInput {
  not: QueueWhereInput
  and: [QueueWhereInput!]
  or: [QueueWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  type field predicates
  """
  type: QueueType
  typeNEQ: QueueType
  typeIn: [QueueType!]
  typeNotIn: [QueueType!]
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  stages edge predicates
  """
  hasStages: Boolean
  hasStagesWith: [StageWhereInput!]
  """
  employees edge predicates
  """
  hasEmployees: Boolean
  hasEmployeesWith: [EmployeeWhereInput!]
  """
  department edge predicates
  """
  hasDepartment: Boolean
  hasDepartmentWith: [DepartmentWhereInput!]
}
type Stage implements Node {
  id: ID!
  name: String!
  color: String!
  lossorgain: Boolean! @goField(name: "LossOrGain", forceResolver: false)
  createdat: Time! @goField(name: "CreatedAt", forceResolver: false)
  updatedat: Time! @goField(name: "UpdatedAt", forceResolver: false)
  pipeline: Pipeline!
  deals: [Deal!]
  queue: Queue
}
"""
Ordering options for Stage connections
"""
input StageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Stages.
  """
  field: StageOrderField!
}
"""
Properties by which Stage connections can be ordered.
"""
enum StageOrderField {
  NAME
  LOSS_OR_GAIN
  CREATED_AT
  UPDATED_AT
}
"""
StageWhereInput is used for filtering Stage objects.
Input was generated by ent.
"""
input StageWhereInput {
  not: StageWhereInput
  and: [StageWhereInput!]
  or: [StageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  color field predicates
  """
  color: String
  colorNEQ: String
  colorIn: [String!]
  colorNotIn: [String!]
  colorGT: String
  colorGTE: String
  colorLT: String
  colorLTE: String
  colorContains: String
  colorHasPrefix: String
  colorHasSuffix: String
  colorEqualFold: String
  colorContainsFold: String
  """
  lossOrGain field predicates
  """
  lossorgain: Boolean
  lossorgainNEQ: Boolean
  """
  createdAt field predicates
  """
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  """
  updatedAt field predicates
  """
  updatedat: Time
  updatedatNEQ: Time
  updatedatIn: [Time!]
  updatedatNotIn: [Time!]
  updatedatGT: Time
  updatedatGTE: Time
  updatedatLT: Time
  updatedatLTE: Time
  """
  pipeline edge predicates
  """
  hasPipeline: Boolean
  hasPipelineWith: [PipelineWhereInput!]
  """
  deals edge predicates
  """
  hasDeals: Boolean
  hasDealsWith: [DealWhereInput!]
  """
  queue edge predicates
  """
  hasQueue: Boolean
  hasQueueWith: [QueueWhereInput!]
}
type Text implements Node {
  id: ID!
  text: String!
  message: Message!
}
"""
Ordering options for Text connections
"""
input TextOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Texts.
  """
  field: TextOrderField!
}
"""
Properties by which Text connections can be ordered.
"""
enum TextOrderField {
  TEXT
}
"""
TextWhereInput is used for filtering Text objects.
Input was generated by ent.
"""
input TextWhereInput {
  not: TextWhereInput
  and: [TextWhereInput!]
  or: [TextWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  message edge predicates
  """
  hasMessage: Boolean
  hasMessageWith: [MessageWhereInput!]
}
"""
UpdateChatInput is used for update Chat object.
Input was generated by ent.
"""
input UpdateChatInput {
  title: String
  accepted: Boolean
  locked: Boolean
  updatedat: Time
  dealID: ID
  clearDeal: Boolean
  addEmployeeIDs: [ID!]
  removeEmployeeIDs: [ID!]
  clearEmployees: Boolean
  addMessageIDs: [ID!]
  removeMessageIDs: [ID!]
  clearMessages: Boolean
}
"""
UpdateCompanyInput is used for update Company object.
Input was generated by ent.
"""
input UpdateCompanyInput {
  name: String
  updatedat: Time
  addEmployeeIDs: [ID!]
  removeEmployeeIDs: [ID!]
  clearEmployee: Boolean
}
"""
UpdateCostumerInput is used for update Costumer object.
Input was generated by ent.
"""
input UpdateCostumerInput {
  name: String
  phone: String
  email: String
  updatedat: Time
  addDealIDs: [ID!]
  removeDealIDs: [ID!]
  clearDeals: Boolean
}
"""
UpdateCrmFieldInput is used for update CrmField object.
Input was generated by ent.
"""
input UpdateCrmFieldInput {
  name: String
  section: String
  updatedat: Time
  addDropdownListIDs: [ID!]
  removeDropdownListIDs: [ID!]
  clearDropdownList: Boolean
  addDealCrmFieldIDs: [ID!]
  removeDealCrmFieldIDs: [ID!]
  clearDealCrmField: Boolean
}
"""
UpdateDealCrmFieldInput is used for update DealCrmField object.
Input was generated by ent.
"""
input UpdateDealCrmFieldInput {
  value: String
  updatedat: Time
  dealID: ID
  crmfieldID: ID
}
"""
UpdateDealInput is used for update Deal object.
Input was generated by ent.
"""
input UpdateDealInput {
  title: String
  source: String
  updatedat: Time
  costumerID: ID
  clearCostumer: Boolean
  chatID: ID
  clearChat: Boolean
  stageID: ID
  addDealCrmFieldIDs: [ID!]
  removeDealCrmFieldIDs: [ID!]
  clearDealCrmFields: Boolean
}
"""
UpdateDepartmentInput is used for update Department object.
Input was generated by ent.
"""
input UpdateDepartmentInput {
  name: String
  updatedat: Time
  addEmployeeIDs: [ID!]
  removeEmployeeIDs: [ID!]
  clearEmployee: Boolean
  addQueueIDs: [ID!]
  removeQueueIDs: [ID!]
  clearQueues: Boolean
}
"""
UpdateDropdownListInput is used for update DropdownList object.
Input was generated by ent.
"""
input UpdateDropdownListInput {
  value: String
  updatedat: Time
  addCrmFieldIDs: [ID!]
  removeCrmFieldIDs: [ID!]
}
"""
UpdateEmployeeAuthInput is used for update EmployeeAuth object.
Input was generated by ent.
"""
input UpdateEmployeeAuthInput {
  name: String
  email: String
  password: String
  updatedat: Time
  employeeID: ID
  clearEmployee: Boolean
}
"""
UpdateEmployeeInput is used for update Employee object.
Input was generated by ent.
"""
input UpdateEmployeeInput {
  name: String
  active: Boolean
  updatedat: Time
  employeeauthID: ID
  companyID: ID
  departmentID: ID
  addChatIDs: [ID!]
  removeChatIDs: [ID!]
  clearChat: Boolean
  addQueueIDs: [ID!]
  removeQueueIDs: [ID!]
  clearQueues: Boolean
  addMessageIDs: [ID!]
  removeMessageIDs: [ID!]
  clearMessages: Boolean
}
"""
UpdateFileInput is used for update File object.
Input was generated by ent.
"""
input UpdateFileInput {
  url: String
  caption: String
  clearCaption: Boolean
  mimetype: String
  filename: String
  messageID: ID
}
"""
UpdateMessageInput is used for update Message object.
Input was generated by ent.
"""
input UpdateMessageInput {
  sentby: MessageSentBy
  private: Boolean
  type: MessageType
  updatedat: Time
  chatID: ID
  clearChat: Boolean
  addEmployeeIDs: [ID!]
  removeEmployeeIDs: [ID!]
  clearEmployee: Boolean
  textID: ID
  clearText: Boolean
  fileID: ID
  clearFile: Boolean
}
"""
UpdatePipelineInput is used for update Pipeline object.
Input was generated by ent.
"""
input UpdatePipelineInput {
  name: String
  updatedat: Time
  addStageIDs: [ID!]
  removeStageIDs: [ID!]
  clearStages: Boolean
}
"""
UpdateQueueInput is used for update Queue object.
Input was generated by ent.
"""
input UpdateQueueInput {
  name: String
  type: QueueType
  updatedat: Time
  addStageIDs: [ID!]
  removeStageIDs: [ID!]
  clearStages: Boolean
  addEmployeeIDs: [ID!]
  removeEmployeeIDs: [ID!]
  clearEmployees: Boolean
  addDepartmentIDs: [ID!]
  removeDepartmentIDs: [ID!]
}
"""
UpdateStageInput is used for update Stage object.
Input was generated by ent.
"""
input UpdateStageInput {
  name: String
  color: String
  lossorgain: Boolean
  updatedat: Time
  pipelineID: ID
  addDealIDs: [ID!]
  removeDealIDs: [ID!]
  clearDeals: Boolean
  queueID: ID
  clearQueue: Boolean
}
"""
UpdateTextInput is used for update Text object.
Input was generated by ent.
"""
input UpdateTextInput {
  text: String
  messageID: ID
}
