package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"

	"github.com/gitwb-c/crm.saas/backend/internal/ent"
	"github.com/gitwb-c/crm.saas/backend/internal/graphql/graph/graph_helpers"
	"github.com/gitwb-c/crm.saas/backend/internal/wire"
)

// CreateDeal is the resolver for the createDeal field.
func (r *mutationResolver) CreateDeal(ctx context.Context, input ent.CreateDealInput) (*ent.Deal, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeDealService(r.Client)
	deal, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return deal, nil
}

// DeleteDeal is the resolver for the deleteDeal field.
func (r *mutationResolver) DeleteDeal(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeDealService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateDeal is the resolver for the updateDeal field.
func (r *mutationResolver) UpdateDeal(ctx context.Context, ids []string, input ent.UpdateDealInput) (*int, error) {
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeDealService(r.Client)
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreatePipeline is the resolver for the createPipeline field.
func (r *mutationResolver) CreatePipeline(ctx context.Context, input ent.CreatePipelineInput) (*ent.Pipeline, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializePipelineService(r.Client)
	pipeline, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return pipeline, nil
}

// DeletePipeline is the resolver for the deletePipeline field.
func (r *mutationResolver) DeletePipeline(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializePipelineService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdatePipeline is the resolver for the updatePipeline field.
func (r *mutationResolver) UpdatePipeline(ctx context.Context, ids []string, input ent.UpdatePipelineInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializePipelineService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateCostumer is the resolver for the createCostumer field.
func (r *mutationResolver) CreateCostumer(ctx context.Context, input ent.CreateCostumerInput) (*ent.Costumer, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeCostumerService(r.Client)
	costumer, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return costumer, nil
}

// DeleteCostumer is the resolver for the deleteCostumer field.
func (r *mutationResolver) DeleteCostumer(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeCostumerService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateCostumer is the resolver for the updateCostumer field.
func (r *mutationResolver) UpdateCostumer(ctx context.Context, ids []string, input ent.UpdateCostumerInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeCostumerService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateStage is the resolver for the createStage field.
func (r *mutationResolver) CreateStage(ctx context.Context, input ent.CreateStageInput) (*ent.Stage, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeStageService(r.Client)
	stage, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return stage, nil
}

// DeleteStage is the resolver for the deleteStage field.
func (r *mutationResolver) DeleteStage(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeStageService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateStage is the resolver for the updateStage field.
func (r *mutationResolver) UpdateStage(ctx context.Context, ids []string, input ent.UpdateStageInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeStageService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, input ent.CreateChatInput) (*ent.Chat, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeChatService(r.Client)
	chat, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return chat, nil
}

// DeleteChat is the resolver for the deleteChat field.
func (r *mutationResolver) DeleteChat(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeChatService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateChat is the resolver for the updateChat field.
func (r *mutationResolver) UpdateChat(ctx context.Context, ids []string, input ent.UpdateChatInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeChatService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input ent.CreateEmployeeInput) (*ent.Employee, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeEmployeeService(r.Client)
	employee, err := service.Create(queryCtx, input, nil)
	if err != nil {
		return nil, err
	}
	return employee, nil
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeEmployeeService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, ids []string, input ent.UpdateEmployeeInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeEmployeeService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateEmployeeAuth is the resolver for the createEmployeeAuth field.
func (r *mutationResolver) CreateEmployeeAuth(ctx context.Context, input ent.CreateEmployeeAuthInput) (*ent.EmployeeAuth, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeEmployeeAuthService(r.Client)
	employeeAuth, err := service.Create(queryCtx, input, nil)
	if err != nil {
		return nil, err
	}
	return employeeAuth, nil
}

// DeleteEmployeeAuth is the resolver for the deleteEmployeeAuth field.
func (r *mutationResolver) DeleteEmployeeAuth(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeEmployeeAuthService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateEmployeeAuth is the resolver for the updateEmployeeAuth field.
func (r *mutationResolver) UpdateEmployeeAuth(ctx context.Context, ids []string, input ent.UpdateEmployeeAuthInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeEmployeeAuthService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateDepartment is the resolver for the createDepartment field.
func (r *mutationResolver) CreateDepartment(ctx context.Context, input ent.CreateDepartmentInput) (*ent.Department, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeDepartmentService(r.Client)
	department, err := service.Create(queryCtx, input, nil)
	if err != nil {
		return nil, err
	}
	return department, nil
}

// DeleteDepartment is the resolver for the deleteDepartment field.
func (r *mutationResolver) DeleteDepartment(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeDepartmentService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateDepartment is the resolver for the updateDepartment field.
func (r *mutationResolver) UpdateDepartment(ctx context.Context, ids []string, input ent.UpdateDepartmentInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeDepartmentService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input ent.CreateMessageInput) (*ent.Message, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeMessageService(r.Client)
	message, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return message, nil
}

// DeleteMessage is the resolver for the deleteMessage field.
func (r *mutationResolver) DeleteMessage(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeMessageService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateMessage is the resolver for the updateMessage field.
func (r *mutationResolver) UpdateMessage(ctx context.Context, ids []string, input ent.UpdateMessageInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeMessageService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateQueue is the resolver for the createQueue field.
func (r *mutationResolver) CreateQueue(ctx context.Context, input ent.CreateQueueInput) (*ent.Queue, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeQueueService(r.Client)
	queue, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return queue, nil
}

// DeleteQueue is the resolver for the deleteQueue field.
func (r *mutationResolver) DeleteQueue(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeQueueService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateQueue is the resolver for the updateQueue field.
func (r *mutationResolver) UpdateQueue(ctx context.Context, ids []string, input ent.UpdateQueueInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeQueueService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateCrmField is the resolver for the createCrmField field.
func (r *mutationResolver) CreateCrmField(ctx context.Context, input ent.CreateCrmFieldInput) (*ent.CrmField, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeCrmFieldService(r.Client)
	crmField, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return crmField, nil
}

// DeleteCrmField is the resolver for the deleteCrmField field.
func (r *mutationResolver) DeleteCrmField(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeCrmFieldService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateCrmField is the resolver for the updateCrmField field.
func (r *mutationResolver) UpdateCrmField(ctx context.Context, ids []string, input ent.UpdateCrmFieldInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeCrmFieldService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateDealCrmField is the resolver for the createDealCrmField field.
func (r *mutationResolver) CreateDealCrmField(ctx context.Context, input ent.CreateDealCrmFieldInput) (*ent.DealCrmField, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeDealCrmFieldService(r.Client)
	dealCrmField, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return dealCrmField, nil
}

// DeleteDealCrmField is the resolver for the deleteDealCrmField field.
func (r *mutationResolver) DeleteDealCrmField(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeCrmFieldService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateDealCrmField is the resolver for the updateDealCrmField field.
func (r *mutationResolver) UpdateDealCrmField(ctx context.Context, ids []string, input ent.UpdateDealCrmFieldInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeDealCrmFieldService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input ent.CreateCompanyInput) (*ent.Company, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeCompanyService(r.Client)
	company, err := service.Create(queryCtx, input, nil)
	if err != nil {
		return nil, err
	}
	return company, nil
}

// DeleteCompany is the resolver for the deleteCompany field.
func (r *mutationResolver) DeleteCompany(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}
	service := wire.InitializeCompanyService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, ids []string, input ent.UpdateCompanyInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeCompanyService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// CreateRbac is the resolver for the createRbac field.
func (r *mutationResolver) CreateRbac(ctx context.Context, input ent.CreateRbacInput) (*ent.Rbac, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Create")
	service := wire.InitializeRbacService(r.Client)
	rbac, err := service.Create(queryCtx, input)
	if err != nil {
		return nil, err
	}
	return rbac, nil
}

// DeleteRbac is the resolver for the deleteRbac field.
func (r *mutationResolver) DeleteRbac(ctx context.Context, ids []string) (bool, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Delete")
	uuids, er := graph_helpers.UuidParser(ids)
	if er != nil {
		return false, er
	}

	service := wire.InitializeRbacService(r.Client)
	err := service.Delete(queryCtx, uuids)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateRbac is the resolver for the updateRbac field.
func (r *mutationResolver) UpdateRbac(ctx context.Context, ids []string, input ent.UpdateRbacInput) (*int, error) {
	queryCtx := graph_helpers.AddQuery(ctx, "Update")
	service := wire.InitializeRbacService(r.Client)
	uuids, err := graph_helpers.UuidParser(ids)
	if err != nil {
		return nil, err
	}
	n, err := service.Update(queryCtx, uuids, input)
	if err != nil {
		return nil, err
	}
	return &n, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
