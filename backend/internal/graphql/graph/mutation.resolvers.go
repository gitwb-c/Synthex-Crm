package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/gitwb-c/crm.saas/backend/internal/ent"
	"github.com/gitwb-c/crm.saas/backend/internal/wire"
)

// CreateDeal is the resolver for the createDeal field.
func (r *mutationResolver) CreateDeal(ctx context.Context, input ent.CreateDealInput) (*ent.Deal, error) {
	service := wire.InitializeDealService(r.Client)
	deal, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return deal, nil
}

// DeleteDealID is the resolver for the deleteDealID field.
func (r *mutationResolver) DeleteDealID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeDealService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateDealWhere is the resolver for the updateDealWhere field.
func (r *mutationResolver) UpdateDealWhere(ctx context.Context, where ent.DealWhereInput, input ent.UpdateDealInput) ([]*ent.Deal, error) {
	panic(fmt.Errorf("not implemented: UpdateDealWhere - updateDealWhere"))
}

// CreatePipeline is the resolver for the createPipeline field.
func (r *mutationResolver) CreatePipeline(ctx context.Context, input ent.CreatePipelineInput) (*ent.Pipeline, error) {
	service := wire.InitializePipelineService(r.Client)
	pipeline, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return pipeline, nil
}

// DeletePipelinelID is the resolver for the deletePipelinelID field.
func (r *mutationResolver) DeletePipelinelID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializePipelineService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdatePipelineWhere is the resolver for the updatePipelineWhere field.
func (r *mutationResolver) UpdatePipelineWhere(ctx context.Context, where ent.PipelineWhereInput, input ent.UpdatePipelineInput) ([]*ent.Pipeline, error) {
	panic(fmt.Errorf("not implemented: UpdatePipelineWhere - updatePipelineWhere"))
}

// CreateCostumer is the resolver for the createCostumer field.
func (r *mutationResolver) CreateCostumer(ctx context.Context, input ent.CreateCostumerInput) (*ent.Costumer, error) {
	service := wire.InitializeCostumerService(r.Client)
	costumer, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return costumer, nil
}

// DeleteCostumerID is the resolver for the deleteCostumerID field.
func (r *mutationResolver) DeleteCostumerID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeCostumerService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateCostumerWhere is the resolver for the updateCostumerWhere field.
func (r *mutationResolver) UpdateCostumerWhere(ctx context.Context, where ent.CostumerWhereInput, input ent.UpdateCostumerInput) ([]*ent.Costumer, error) {
	panic(fmt.Errorf("not implemented: UpdateCostumerWhere - updateCostumerWhere"))
}

// CreateStage is the resolver for the createStage field.
func (r *mutationResolver) CreateStage(ctx context.Context, input ent.CreateStageInput) (*ent.Stage, error) {
	service := wire.InitializeStageService(r.Client)
	stage, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return stage, nil
}

// DeleteStageID is the resolver for the deleteStageID field.
func (r *mutationResolver) DeleteStageID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeStageService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateStageWhere is the resolver for the updateStageWhere field.
func (r *mutationResolver) UpdateStageWhere(ctx context.Context, where ent.StageWhereInput, input ent.UpdateStageInput) ([]*ent.Stage, error) {
	panic(fmt.Errorf("not implemented: UpdateStageWhere - updateStageWhere"))
}

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, input ent.CreateChatInput) (*ent.Chat, error) {
	service := wire.InitializeChatService(r.Client)
	chat, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return chat, nil
}

// DeleteChatID is the resolver for the deleteChatID field.
func (r *mutationResolver) DeleteChatID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeChatService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateChatWhere is the resolver for the updateChatWhere field.
func (r *mutationResolver) UpdateChatWhere(ctx context.Context, where ent.ChatWhereInput, input ent.UpdateChatInput) ([]*ent.Chat, error) {
	panic(fmt.Errorf("not implemented: UpdateChatWhere - updateChatWhere"))
}

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input ent.CreateEmployeeInput) (*ent.Employee, error) {
	service := wire.InitializeEmployeeService(r.Client)
	employee, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return employee, nil
}

// DeleteEmployeeID is the resolver for the deleteEmployeeID field.
func (r *mutationResolver) DeleteEmployeeID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeEmployeeService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateEmployeeWhere is the resolver for the updateEmployeeWhere field.
func (r *mutationResolver) UpdateEmployeeWhere(ctx context.Context, where ent.EmployeeWhereInput, input ent.UpdateEmployeeInput) ([]*ent.Employee, error) {
	panic(fmt.Errorf("not implemented: UpdateEmployeeWhere - updateEmployeeWhere"))
}

// CreateEmployeeAuth is the resolver for the createEmployeeAuth field.
func (r *mutationResolver) CreateEmployeeAuth(ctx context.Context, input ent.CreateEmployeeAuthInput) (*ent.EmployeeAuth, error) {
	service := wire.InitializeEmployeeAuthService(r.Client)
	employeeAuth, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return employeeAuth, nil
}

// DeleteEmployeeAuthID is the resolver for the deleteEmployeeAuthID field.
func (r *mutationResolver) DeleteEmployeeAuthID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeEmployeeAuthService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateEmployeeAuthWhere is the resolver for the updateEmployeeAuthWhere field.
func (r *mutationResolver) UpdateEmployeeAuthWhere(ctx context.Context, where ent.EmployeeAuthWhereInput, input ent.UpdateEmployeeAuthInput) ([]*ent.EmployeeAuth, error) {
	panic(fmt.Errorf("not implemented: UpdateEmployeeAuthWhere - updateEmployeeAuthWhere"))
}

// CreateDepartment is the resolver for the createDepartment field.
func (r *mutationResolver) CreateDepartment(ctx context.Context, input ent.CreateDepartmentInput) (*ent.Department, error) {
	service := wire.InitializeDepartmentService(r.Client)
	department, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return department, nil
}

// DeleteDepartmentID is the resolver for the deleteDepartmentID field.
func (r *mutationResolver) DeleteDepartmentID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeDepartmentService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateDepartmentWhere is the resolver for the updateDepartmentWhere field.
func (r *mutationResolver) UpdateDepartmentWhere(ctx context.Context, where ent.DepartmentWhereInput, input ent.UpdateDepartmentInput) ([]*ent.Department, error) {
	panic(fmt.Errorf("not implemented: UpdateDepartmentWhere - updateDepartmentWhere"))
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input ent.CreateMessageInput) (*ent.Message, error) {
	service := wire.InitializeMessageService(r.Client)
	message, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return message, nil
}

// DeleteMessageID is the resolver for the deleteMessageID field.
func (r *mutationResolver) DeleteMessageID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeMessageService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateMessageWhere is the resolver for the updateMessageWhere field.
func (r *mutationResolver) UpdateMessageWhere(ctx context.Context, where ent.MessageWhereInput, input ent.UpdateMessageInput) ([]*ent.Message, error) {
	panic(fmt.Errorf("not implemented: UpdateMessageWhere - updateMessageWhere"))
}

// CreateQueue is the resolver for the createQueue field.
func (r *mutationResolver) CreateQueue(ctx context.Context, input ent.CreateQueueInput) (*ent.Queue, error) {
	service := wire.InitializeQueueService(r.Client)
	queue, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return queue, nil
}

// DeleteQueueID is the resolver for the deleteQueueID field.
func (r *mutationResolver) DeleteQueueID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeQueueService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateQueueWhere is the resolver for the updateQueueWhere field.
func (r *mutationResolver) UpdateQueueWhere(ctx context.Context, where ent.QueueWhereInput, input ent.UpdateQueueInput) ([]*ent.Queue, error) {
	panic(fmt.Errorf("not implemented: UpdateQueueWhere - updateQueueWhere"))
}

// CreateCrmField is the resolver for the createCrmField field.
func (r *mutationResolver) CreateCrmField(ctx context.Context, input ent.CreateCrmFieldInput) (*ent.CrmField, error) {
	service := wire.InitializeCrmFieldService(r.Client)
	crmField, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return crmField, nil
}

// DeleteCrmFieldID is the resolver for the deleteCrmFieldID field.
func (r *mutationResolver) DeleteCrmFieldID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeCrmFieldService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateCrmFieldWhere is the resolver for the updateCrmFieldWhere field.
func (r *mutationResolver) UpdateCrmFieldWhere(ctx context.Context, where ent.CrmFieldWhereInput, input ent.UpdateCrmFieldInput) ([]*ent.CrmField, error) {
	panic(fmt.Errorf("not implemented: UpdateCrmFieldWhere - updateCrmFieldWhere"))
}

// CreateDealCrmField is the resolver for the createDealCrmField field.
func (r *mutationResolver) CreateDealCrmField(ctx context.Context, input ent.CreateDealCrmFieldInput) (*ent.DealCrmField, error) {
	service := wire.InitializeDealCrmFieldService(r.Client)
	dealCrmField, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return dealCrmField, nil
}

// DeleteDealCrmFieldID is the resolver for the deleteDealCrmFieldID field.
func (r *mutationResolver) DeleteDealCrmFieldID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeDealCrmFieldService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateDealCrmFieldWhere is the resolver for the updateDealCrmFieldWhere field.
func (r *mutationResolver) UpdateDealCrmFieldWhere(ctx context.Context, where ent.DealCrmFieldWhereInput, input ent.UpdateDealCrmFieldInput) ([]*ent.DealCrmField, error) {
	panic(fmt.Errorf("not implemented: UpdateDealCrmFieldWhere - updateDealCrmFieldWhere"))
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input ent.CreateCompanyInput) (*ent.Company, error) {
	service := wire.InitializeCompanyService(r.Client)
	company, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return company, nil
}

// DeleteCompanyID is the resolver for the deleteCompanyID field.
func (r *mutationResolver) DeleteCompanyID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeCompanyService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateCompanyWhere is the resolver for the updateCompanyWhere field.
func (r *mutationResolver) UpdateCompanyWhere(ctx context.Context, where ent.CompanyWhereInput, input ent.UpdateCompanyInput) ([]*ent.Company, error) {
	panic(fmt.Errorf("not implemented: UpdateCompanyWhere - updateCompanyWhere"))
}

// CreateRbac is the resolver for the createRbac field.
func (r *mutationResolver) CreateRbac(ctx context.Context, input ent.CreateRbacInput) (*ent.Rbac, error) {
	service := wire.InitializeRbacService(r.Client)
	rbac, err := service.Create(ctx, input)
	if err != nil {
		return nil, err
	}
	return rbac, nil
}

// DeleteRbacID is the resolver for the deleteRbacID field.
func (r *mutationResolver) DeleteRbacID(ctx context.Context, id string) (bool, error) {
	service := wire.InitializeRbacService(r.Client)
	err := service.DeleteID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateRbacWhere is the resolver for the updateRbacWhere field.
func (r *mutationResolver) UpdateRbacWhere(ctx context.Context, where ent.RbacWhereInput, input ent.UpdateRbacInput) ([]*ent.Rbac, error) {
	panic(fmt.Errorf("not implemented: UpdateRbacWhere - updateRbacWhere"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
