package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/gitwb-c/crm.saas/backend/internal/ent"
	"github.com/gitwb-c/crm.saas/backend/internal/wire"
)

// CreateDeal is the resolver for the createDeal field.
func (r *mutationResolver) CreateDeal(ctx context.Context, input ent.CreateDealInput) (*ent.Deal, error) {
	service := wire.InitializeDealService(r.Client)
	deal, err := service.Create(ctx, &input)
	if err != nil {
		return nil, err
	}
	return deal, nil

}

// UpdateDeal is the resolver for the updateDeal field.
func (r *mutationResolver) UpdateDeal(ctx context.Context, id string, input ent.UpdateDealInput) (*ent.Deal, error) {
	panic(fmt.Errorf("not implemented: UpdateDeal - updateDeal"))
}

// CreatePipeline is the resolver for the createPipeline field.
func (r *mutationResolver) CreatePipeline(ctx context.Context, input ent.CreatePipelineInput) (*ent.Pipeline, error) {
	panic(fmt.Errorf("not implemented: CreatePipeline - createPipeline"))
}

// UpdatePipeline is the resolver for the updatePipeline field.
func (r *mutationResolver) UpdatePipeline(ctx context.Context, id string, input ent.UpdatePipelineInput) (*ent.Pipeline, error) {
	panic(fmt.Errorf("not implemented: UpdatePipeline - updatePipeline"))
}

// CreateCostumer is the resolver for the createCostumer field.
func (r *mutationResolver) CreateCostumer(ctx context.Context, input ent.CreateCostumerInput) (*ent.Costumer, error) {
	panic(fmt.Errorf("not implemented: CreateCostumer - createCostumer"))
}

// UpdateCostumer is the resolver for the updateCostumer field.
func (r *mutationResolver) UpdateCostumer(ctx context.Context, id string, input ent.UpdateCostumerInput) (*ent.Costumer, error) {
	panic(fmt.Errorf("not implemented: UpdateCostumer - updateCostumer"))
}

// CreateStage is the resolver for the createStage field.
func (r *mutationResolver) CreateStage(ctx context.Context, input ent.CreateStageInput) (*ent.Stage, error) {
	panic(fmt.Errorf("not implemented: CreateStage - createStage"))
}

// UpdateStage is the resolver for the updateStage field.
func (r *mutationResolver) UpdateStage(ctx context.Context, id string, input ent.UpdateStageInput) (*ent.Stage, error) {
	panic(fmt.Errorf("not implemented: UpdateStage - updateStage"))
}

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, input ent.CreateChatInput) (*ent.Chat, error) {
	panic(fmt.Errorf("not implemented: CreateChat - createChat"))
}

// UpdateChat is the resolver for the updateChat field.
func (r *mutationResolver) UpdateChat(ctx context.Context, id string, input ent.UpdateChatInput) (*ent.Chat, error) {
	panic(fmt.Errorf("not implemented: UpdateChat - updateChat"))
}

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input ent.CreateEmployeeInput) (*ent.Employee, error) {
	panic(fmt.Errorf("not implemented: CreateEmployee - createEmployee"))
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, id string, input ent.UpdateEmployeeInput) (*ent.Employee, error) {
	panic(fmt.Errorf("not implemented: UpdateEmployee - updateEmployee"))
}

// CreateEmployeeAuth is the resolver for the createEmployeeAuth field.
func (r *mutationResolver) CreateEmployeeAuth(ctx context.Context, input ent.CreateEmployeeAuthInput) (*ent.EmployeeAuth, error) {
	panic(fmt.Errorf("not implemented: CreateEmployeeAuth - createEmployeeAuth"))
}

// UpdateEmployeeAuth is the resolver for the updateEmployeeAuth field.
func (r *mutationResolver) UpdateEmployeeAuth(ctx context.Context, id string, input ent.UpdateEmployeeAuthInput) (*ent.EmployeeAuth, error) {
	panic(fmt.Errorf("not implemented: UpdateEmployeeAuth - updateEmployeeAuth"))
}

// CreateDepartment is the resolver for the createDepartment field.
func (r *mutationResolver) CreateDepartment(ctx context.Context, input ent.CreateDepartmentInput) (*ent.Department, error) {
	panic(fmt.Errorf("not implemented: CreateDepartment - createDepartment"))
}

// UpdateDepartment is the resolver for the updateDepartment field.
func (r *mutationResolver) UpdateDepartment(ctx context.Context, id string, input ent.UpdateDepartmentInput) (*ent.Department, error) {
	panic(fmt.Errorf("not implemented: UpdateDepartment - updateDepartment"))
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input ent.CreateMessageInput) (*ent.Message, error) {
	panic(fmt.Errorf("not implemented: CreateMessage - createMessage"))
}

// UpdateMessage is the resolver for the updateMessage field.
func (r *mutationResolver) UpdateMessage(ctx context.Context, id string, input ent.UpdateMessageInput) (*ent.Message, error) {
	panic(fmt.Errorf("not implemented: UpdateMessage - updateMessage"))
}

// CreateQueue is the resolver for the createQueue field.
func (r *mutationResolver) CreateQueue(ctx context.Context, input ent.CreateQueueInput) (*ent.Queue, error) {
	panic(fmt.Errorf("not implemented: CreateQueue - createQueue"))
}

// UpdateQueue is the resolver for the updateQueue field.
func (r *mutationResolver) UpdateQueue(ctx context.Context, id string, input ent.UpdateQueueInput) (*ent.Queue, error) {
	panic(fmt.Errorf("not implemented: UpdateQueue - updateQueue"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
