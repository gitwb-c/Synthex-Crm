package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/gitwb-c/crm.saas/backend/internal/ent"
	"github.com/gitwb-c/crm.saas/backend/internal/wire"
	"github.com/google/uuid"
)

// ID is the resolver for the id field.
func (r *chatResolver) ID(ctx context.Context, obj *ent.Chat) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *companyResolver) ID(ctx context.Context, obj *ent.Company) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *costumerResolver) ID(ctx context.Context, obj *ent.Costumer) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *crmFieldResolver) ID(ctx context.Context, obj *ent.CrmField) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *dealResolver) ID(ctx context.Context, obj *ent.Deal) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *dealCrmFieldResolver) ID(ctx context.Context, obj *ent.DealCrmField) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *departmentResolver) ID(ctx context.Context, obj *ent.Department) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *dropdownListResolver) ID(ctx context.Context, obj *ent.DropdownList) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *employeeResolver) ID(ctx context.Context, obj *ent.Employee) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *employeeAuthResolver) ID(ctx context.Context, obj *ent.EmployeeAuth) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *fileResolver) ID(ctx context.Context, obj *ent.File) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *messageResolver) ID(ctx context.Context, obj *ent.Message) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *pipelineResolver) ID(ctx context.Context, obj *ent.Pipeline) (string, error) {
	return obj.ID.String(), nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	uid, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Noder(ctx, uid)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	var uuids []uuid.UUID
	for _, id := range ids {
		uid, err := uuid.Parse(id)
		if err != nil {
			return nil, err
		}
		uuids = append(uuids, uid)
	}
	return r.Client.Noders(ctx, uuids)
}

// Chats is the resolver for the chats field.
func (r *queryResolver) Chats(ctx context.Context) ([]*ent.Chat, error) {
	service := wire.InitializeChatService(r.Client)
	chats, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return chats, nil
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context) ([]*ent.Company, error) {
	panic(fmt.Errorf("not implemented: Companies - companies"))
}

// Costumers is the resolver for the costumers field.
func (r *queryResolver) Costumers(ctx context.Context) ([]*ent.Costumer, error) {
	service := wire.InitializeCostumerService(r.Client)
	costumers, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return costumers, nil
}

// CrmFields is the resolver for the crmFields field.
func (r *queryResolver) CrmFields(ctx context.Context) ([]*ent.CrmField, error) {
	service := wire.InitializeCrmFieldService(r.Client)
	crmFields, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return crmFields, nil
}

// Deals is the resolver for the deals field.
func (r *queryResolver) Deals(ctx context.Context) ([]*ent.Deal, error) {
	service := wire.InitializeDealService(r.Client)
	deals, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return deals, nil
}

// DealCrmFields is the resolver for the dealCrmFields field.
func (r *queryResolver) DealCrmFields(ctx context.Context) ([]*ent.DealCrmField, error) {
	service := wire.InitializeDealCrmFieldService(r.Client)
	dealCrmFields, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return dealCrmFields, nil
}

// Departments is the resolver for the departments field.
func (r *queryResolver) Departments(ctx context.Context) ([]*ent.Department, error) {
	service := wire.InitializeDepartmentService(r.Client)
	departments, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return departments, nil
}

// DropdownLists is the resolver for the dropdownLists field.
func (r *queryResolver) DropdownLists(ctx context.Context) ([]*ent.DropdownList, error) {
	panic(fmt.Errorf("not implemented: DropdownLists - dropdownLists"))
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context) ([]*ent.Employee, error) {
	service := wire.InitializeEmployeeService(r.Client)
	employees, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return employees, nil
}

// EmployeeAuths is the resolver for the employeeAuths field.
func (r *queryResolver) EmployeeAuths(ctx context.Context) ([]*ent.EmployeeAuth, error) {
	service := wire.InitializeEmployeeAuthService(r.Client)
	employeeAuths, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return employeeAuths, nil
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context) ([]*ent.File, error) {
	panic(fmt.Errorf("not implemented: Files - files"))
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context) ([]*ent.Message, error) {
	service := wire.InitializeMessageService(r.Client)
	messages, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return messages, nil
}

// Pipelines is the resolver for the pipelines field.
func (r *queryResolver) Pipelines(ctx context.Context) ([]*ent.Pipeline, error) {
	service := wire.InitializePipelineService(r.Client)
	pipelines, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return pipelines, nil
}

// Queues is the resolver for the queues field.
func (r *queryResolver) Queues(ctx context.Context) ([]*ent.Queue, error) {
	service := wire.InitializeQueueService(r.Client)
	queues, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return queues, nil
}

// Stages is the resolver for the stages field.
func (r *queryResolver) Stages(ctx context.Context) ([]*ent.Stage, error) {
	service := wire.InitializeStageService(r.Client)
	stages, err := service.Read(ctx)
	if err != nil {
		return nil, err
	}
	return stages, nil
}

// Texts is the resolver for the texts field.
func (r *queryResolver) Texts(ctx context.Context) ([]*ent.Text, error) {
	panic(fmt.Errorf("not implemented: Texts - texts"))
}

// ID is the resolver for the id field.
func (r *queueResolver) ID(ctx context.Context, obj *ent.Queue) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *stageResolver) ID(ctx context.Context, obj *ent.Stage) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *textResolver) ID(ctx context.Context, obj *ent.Text) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *chatWhereInputResolver) ID(ctx context.Context, obj *ent.ChatWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *chatWhereInputResolver) IDNeq(ctx context.Context, obj *ent.ChatWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *chatWhereInputResolver) IDIn(ctx context.Context, obj *ent.ChatWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *chatWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.ChatWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *chatWhereInputResolver) IDGt(ctx context.Context, obj *ent.ChatWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *chatWhereInputResolver) IDGte(ctx context.Context, obj *ent.ChatWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *chatWhereInputResolver) IDLt(ctx context.Context, obj *ent.ChatWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *chatWhereInputResolver) IDLte(ctx context.Context, obj *ent.ChatWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *companyWhereInputResolver) ID(ctx context.Context, obj *ent.CompanyWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *companyWhereInputResolver) IDNeq(ctx context.Context, obj *ent.CompanyWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *companyWhereInputResolver) IDIn(ctx context.Context, obj *ent.CompanyWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *companyWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.CompanyWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *companyWhereInputResolver) IDGt(ctx context.Context, obj *ent.CompanyWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *companyWhereInputResolver) IDGte(ctx context.Context, obj *ent.CompanyWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *companyWhereInputResolver) IDLt(ctx context.Context, obj *ent.CompanyWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *companyWhereInputResolver) IDLte(ctx context.Context, obj *ent.CompanyWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *costumerWhereInputResolver) ID(ctx context.Context, obj *ent.CostumerWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *costumerWhereInputResolver) IDNeq(ctx context.Context, obj *ent.CostumerWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *costumerWhereInputResolver) IDIn(ctx context.Context, obj *ent.CostumerWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *costumerWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.CostumerWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *costumerWhereInputResolver) IDGt(ctx context.Context, obj *ent.CostumerWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *costumerWhereInputResolver) IDGte(ctx context.Context, obj *ent.CostumerWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *costumerWhereInputResolver) IDLt(ctx context.Context, obj *ent.CostumerWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *costumerWhereInputResolver) IDLte(ctx context.Context, obj *ent.CostumerWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// DealID is the resolver for the dealID field.
func (r *createChatInputResolver) DealID(ctx context.Context, obj *ent.CreateChatInput, data *string) error {
	if data != nil {
		id, err := uuid.Parse(*data)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		obj.DealID = &id
	}
	return nil
}

// EmployeeIDs is the resolver for the employeeIDs field.
func (r *createChatInputResolver) EmployeeIDs(ctx context.Context, obj *ent.CreateChatInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.EmployeeIDs = uuids

	return nil
}

// MessageIDs is the resolver for the messageIDs field.
func (r *createChatInputResolver) MessageIDs(ctx context.Context, obj *ent.CreateChatInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.MessageIDs = uuids

	return nil
}

// EmployeeIDs is the resolver for the employeeIDs field.
func (r *createCompanyInputResolver) EmployeeIDs(ctx context.Context, obj *ent.CreateCompanyInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.EmployeeIDs = uuids

	return nil
}

// DealIDs is the resolver for the dealIDs field.
func (r *createCostumerInputResolver) DealIDs(ctx context.Context, obj *ent.CreateCostumerInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.DealIDs = uuids

	return nil
}

// DropdownlistIDs is the resolver for the dropdownlistIDs field.
func (r *createCrmFieldInputResolver) DropdownlistIDs(ctx context.Context, obj *ent.CreateCrmFieldInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.DropdownListIDs = uuids

	return nil
}

// DealcrmfieldIDs is the resolver for the dealcrmfieldIDs field.
func (r *createCrmFieldInputResolver) DealcrmfieldIDs(ctx context.Context, obj *ent.CreateCrmFieldInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.DealCrmFieldIDs = uuids

	return nil
}

// DealID is the resolver for the dealID field.
func (r *createDealCrmFieldInputResolver) DealID(ctx context.Context, obj *ent.CreateDealCrmFieldInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.DealID = id

	return nil
}

// CrmfieldID is the resolver for the crmfieldID field.
func (r *createDealCrmFieldInputResolver) CrmfieldID(ctx context.Context, obj *ent.CreateDealCrmFieldInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.CrmFieldID = id

	return nil
}

// CostumerID is the resolver for the costumerID field.
func (r *createDealInputResolver) CostumerID(ctx context.Context, obj *ent.CreateDealInput, data *string) error {
	if data != nil {
		id, err := uuid.Parse(*data)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		obj.CostumerID = &id
	}
	return nil
}

// ChatID is the resolver for the chatID field.
func (r *createDealInputResolver) ChatID(ctx context.Context, obj *ent.CreateDealInput, data *string) error {
	if data != nil {
		id, err := uuid.Parse(*data)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		obj.ChatID = &id
	}
	return nil
}

// StageID is the resolver for the stageID field.
func (r *createDealInputResolver) StageID(ctx context.Context, obj *ent.CreateDealInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.StageID = id

	return nil
}

// DealcrmfieldIDs is the resolver for the dealcrmfieldIDs field.
func (r *createDealInputResolver) DealcrmfieldIDs(ctx context.Context, obj *ent.CreateDealInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.DealCrmFieldIDs = uuids

	return nil
}

// EmployeeIDs is the resolver for the employeeIDs field.
func (r *createDepartmentInputResolver) EmployeeIDs(ctx context.Context, obj *ent.CreateDepartmentInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.EmployeeIDs = uuids

	return nil
}

// QueueIDs is the resolver for the queueIDs field.
func (r *createDepartmentInputResolver) QueueIDs(ctx context.Context, obj *ent.CreateDepartmentInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.QueueIDs = uuids

	return nil
}

// CrmfieldIDs is the resolver for the crmfieldIDs field.
func (r *createDropdownListInputResolver) CrmfieldIDs(ctx context.Context, obj *ent.CreateDropdownListInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}

	obj.CrmFieldIDs = uuids

	return nil
}

// EmployeeauthID is the resolver for the employeeauthID field.
func (r *createEmployeeInputResolver) EmployeeauthID(ctx context.Context, obj *ent.CreateEmployeeInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.EmployeeAuthID = id

	return nil
}

// CompanyID is the resolver for the companyID field.
func (r *createEmployeeInputResolver) CompanyID(ctx context.Context, obj *ent.CreateEmployeeInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.CompanyID = id

	return nil
}

// DepartmentID is the resolver for the departmentID field.
func (r *createEmployeeInputResolver) DepartmentID(ctx context.Context, obj *ent.CreateEmployeeInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.DepartmentID = id

	return nil
}

// ChatIDs is the resolver for the chatIDs field.
func (r *createEmployeeInputResolver) ChatIDs(ctx context.Context, obj *ent.CreateEmployeeInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.ChatIDs = uuids

	return nil
}

// QueueIDs is the resolver for the queueIDs field.
func (r *createEmployeeInputResolver) QueueIDs(ctx context.Context, obj *ent.CreateEmployeeInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.QueueIDs = uuids

	return nil
}

// MessageIDs is the resolver for the messageIDs field.
func (r *createEmployeeInputResolver) MessageIDs(ctx context.Context, obj *ent.CreateEmployeeInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.MessageIDs = uuids

	return nil
}

// MessageID is the resolver for the messageID field.
func (r *createFileInputResolver) MessageID(ctx context.Context, obj *ent.CreateFileInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.MessageID = id

	return nil
}

// ChatID is the resolver for the chatID field.
func (r *createMessageInputResolver) ChatID(ctx context.Context, obj *ent.CreateMessageInput, data *string) error {
	if data != nil {
		id, err := uuid.Parse(*data)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		obj.ChatID = &id
	}
	return nil
}

// EmployeeIDs is the resolver for the employeeIDs field.
func (r *createMessageInputResolver) EmployeeIDs(ctx context.Context, obj *ent.CreateMessageInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.EmployeeIDs = uuids

	return nil
}

// TextID is the resolver for the textID field.
func (r *createMessageInputResolver) TextID(ctx context.Context, obj *ent.CreateMessageInput, data *string) error {
	if data != nil {
		id, err := uuid.Parse(*data)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		obj.TextID = &id
	}
	return nil
}

// FileID is the resolver for the fileID field.
func (r *createMessageInputResolver) FileID(ctx context.Context, obj *ent.CreateMessageInput, data *string) error {
	if data != nil {
		id, err := uuid.Parse(*data)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		obj.FileID = &id
	}
	return nil
}

// StageIDs is the resolver for the stageIDs field.
func (r *createPipelineInputResolver) StageIDs(ctx context.Context, obj *ent.CreatePipelineInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.StageIDs = uuids

	return nil
}

// StageIDs is the resolver for the stageIDs field.
func (r *createQueueInputResolver) StageIDs(ctx context.Context, obj *ent.CreateQueueInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.StageIDs = uuids

	return nil
}

// EmployeeIDs is the resolver for the employeeIDs field.
func (r *createQueueInputResolver) EmployeeIDs(ctx context.Context, obj *ent.CreateQueueInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.EmployeeIDs = uuids

	return nil
}

// DepartmentIDs is the resolver for the departmentIDs field.
func (r *createQueueInputResolver) DepartmentIDs(ctx context.Context, obj *ent.CreateQueueInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.DepartmentIDs = uuids

	return nil
}

// PipelineID is the resolver for the pipelineID field.
func (r *createStageInputResolver) PipelineID(ctx context.Context, obj *ent.CreateStageInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.PipelineID = id

	return nil
}

// DealIDs is the resolver for the dealIDs field.
func (r *createStageInputResolver) DealIDs(ctx context.Context, obj *ent.CreateStageInput, data []string) error {
	var uuids []uuid.UUID

	for _, id := range data {
		uid, err := uuid.Parse(id)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		uuids = append(uuids, uid)
	}
	obj.DealIDs = uuids

	return nil
}

// QueueID is the resolver for the queueID field.
func (r *createStageInputResolver) QueueID(ctx context.Context, obj *ent.CreateStageInput, data *string) error {
	if data != nil {
		id, err := uuid.Parse(*data)
		if err != nil {
			return fmt.Errorf("error: %v", err)
		}

		obj.QueueID = &id
	}
	return nil
}

// MessageID is the resolver for the messageID field.
func (r *createTextInputResolver) MessageID(ctx context.Context, obj *ent.CreateTextInput, data string) error {
	id, err := uuid.Parse(data)
	if err != nil {
		return fmt.Errorf("error: %v", err)
	}

	obj.MessageID = id

	return nil
}

// ID is the resolver for the id field.
func (r *crmFieldWhereInputResolver) ID(ctx context.Context, obj *ent.CrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *crmFieldWhereInputResolver) IDNeq(ctx context.Context, obj *ent.CrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *crmFieldWhereInputResolver) IDIn(ctx context.Context, obj *ent.CrmFieldWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *crmFieldWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.CrmFieldWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *crmFieldWhereInputResolver) IDGt(ctx context.Context, obj *ent.CrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *crmFieldWhereInputResolver) IDGte(ctx context.Context, obj *ent.CrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *crmFieldWhereInputResolver) IDLt(ctx context.Context, obj *ent.CrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *crmFieldWhereInputResolver) IDLte(ctx context.Context, obj *ent.CrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *dealCrmFieldWhereInputResolver) ID(ctx context.Context, obj *ent.DealCrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *dealCrmFieldWhereInputResolver) IDNeq(ctx context.Context, obj *ent.DealCrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *dealCrmFieldWhereInputResolver) IDIn(ctx context.Context, obj *ent.DealCrmFieldWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *dealCrmFieldWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.DealCrmFieldWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *dealCrmFieldWhereInputResolver) IDGt(ctx context.Context, obj *ent.DealCrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *dealCrmFieldWhereInputResolver) IDGte(ctx context.Context, obj *ent.DealCrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *dealCrmFieldWhereInputResolver) IDLt(ctx context.Context, obj *ent.DealCrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *dealCrmFieldWhereInputResolver) IDLte(ctx context.Context, obj *ent.DealCrmFieldWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *dealWhereInputResolver) ID(ctx context.Context, obj *ent.DealWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *dealWhereInputResolver) IDNeq(ctx context.Context, obj *ent.DealWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *dealWhereInputResolver) IDIn(ctx context.Context, obj *ent.DealWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *dealWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.DealWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *dealWhereInputResolver) IDGt(ctx context.Context, obj *ent.DealWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *dealWhereInputResolver) IDGte(ctx context.Context, obj *ent.DealWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *dealWhereInputResolver) IDLt(ctx context.Context, obj *ent.DealWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *dealWhereInputResolver) IDLte(ctx context.Context, obj *ent.DealWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *departmentWhereInputResolver) ID(ctx context.Context, obj *ent.DepartmentWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *departmentWhereInputResolver) IDNeq(ctx context.Context, obj *ent.DepartmentWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *departmentWhereInputResolver) IDIn(ctx context.Context, obj *ent.DepartmentWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *departmentWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.DepartmentWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *departmentWhereInputResolver) IDGt(ctx context.Context, obj *ent.DepartmentWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *departmentWhereInputResolver) IDGte(ctx context.Context, obj *ent.DepartmentWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *departmentWhereInputResolver) IDLt(ctx context.Context, obj *ent.DepartmentWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *departmentWhereInputResolver) IDLte(ctx context.Context, obj *ent.DepartmentWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *dropdownListWhereInputResolver) ID(ctx context.Context, obj *ent.DropdownListWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *dropdownListWhereInputResolver) IDNeq(ctx context.Context, obj *ent.DropdownListWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *dropdownListWhereInputResolver) IDIn(ctx context.Context, obj *ent.DropdownListWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *dropdownListWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.DropdownListWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *dropdownListWhereInputResolver) IDGt(ctx context.Context, obj *ent.DropdownListWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *dropdownListWhereInputResolver) IDGte(ctx context.Context, obj *ent.DropdownListWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *dropdownListWhereInputResolver) IDLt(ctx context.Context, obj *ent.DropdownListWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *dropdownListWhereInputResolver) IDLte(ctx context.Context, obj *ent.DropdownListWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *employeeAuthWhereInputResolver) ID(ctx context.Context, obj *ent.EmployeeAuthWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *employeeAuthWhereInputResolver) IDNeq(ctx context.Context, obj *ent.EmployeeAuthWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *employeeAuthWhereInputResolver) IDIn(ctx context.Context, obj *ent.EmployeeAuthWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *employeeAuthWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.EmployeeAuthWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *employeeAuthWhereInputResolver) IDGt(ctx context.Context, obj *ent.EmployeeAuthWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *employeeAuthWhereInputResolver) IDGte(ctx context.Context, obj *ent.EmployeeAuthWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *employeeAuthWhereInputResolver) IDLt(ctx context.Context, obj *ent.EmployeeAuthWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *employeeAuthWhereInputResolver) IDLte(ctx context.Context, obj *ent.EmployeeAuthWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *employeeWhereInputResolver) ID(ctx context.Context, obj *ent.EmployeeWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *employeeWhereInputResolver) IDNeq(ctx context.Context, obj *ent.EmployeeWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *employeeWhereInputResolver) IDIn(ctx context.Context, obj *ent.EmployeeWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *employeeWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.EmployeeWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *employeeWhereInputResolver) IDGt(ctx context.Context, obj *ent.EmployeeWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *employeeWhereInputResolver) IDGte(ctx context.Context, obj *ent.EmployeeWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *employeeWhereInputResolver) IDLt(ctx context.Context, obj *ent.EmployeeWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *employeeWhereInputResolver) IDLte(ctx context.Context, obj *ent.EmployeeWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *fileWhereInputResolver) ID(ctx context.Context, obj *ent.FileWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *fileWhereInputResolver) IDNeq(ctx context.Context, obj *ent.FileWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *fileWhereInputResolver) IDIn(ctx context.Context, obj *ent.FileWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *fileWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.FileWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *fileWhereInputResolver) IDGt(ctx context.Context, obj *ent.FileWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *fileWhereInputResolver) IDGte(ctx context.Context, obj *ent.FileWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *fileWhereInputResolver) IDLt(ctx context.Context, obj *ent.FileWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *fileWhereInputResolver) IDLte(ctx context.Context, obj *ent.FileWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *messageWhereInputResolver) ID(ctx context.Context, obj *ent.MessageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *messageWhereInputResolver) IDNeq(ctx context.Context, obj *ent.MessageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *messageWhereInputResolver) IDIn(ctx context.Context, obj *ent.MessageWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *messageWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.MessageWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *messageWhereInputResolver) IDGt(ctx context.Context, obj *ent.MessageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *messageWhereInputResolver) IDGte(ctx context.Context, obj *ent.MessageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *messageWhereInputResolver) IDLt(ctx context.Context, obj *ent.MessageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *messageWhereInputResolver) IDLte(ctx context.Context, obj *ent.MessageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *pipelineWhereInputResolver) ID(ctx context.Context, obj *ent.PipelineWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *pipelineWhereInputResolver) IDNeq(ctx context.Context, obj *ent.PipelineWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *pipelineWhereInputResolver) IDIn(ctx context.Context, obj *ent.PipelineWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *pipelineWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.PipelineWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *pipelineWhereInputResolver) IDGt(ctx context.Context, obj *ent.PipelineWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *pipelineWhereInputResolver) IDGte(ctx context.Context, obj *ent.PipelineWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *pipelineWhereInputResolver) IDLt(ctx context.Context, obj *ent.PipelineWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *pipelineWhereInputResolver) IDLte(ctx context.Context, obj *ent.PipelineWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *queueWhereInputResolver) ID(ctx context.Context, obj *ent.QueueWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *queueWhereInputResolver) IDNeq(ctx context.Context, obj *ent.QueueWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *queueWhereInputResolver) IDIn(ctx context.Context, obj *ent.QueueWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *queueWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.QueueWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *queueWhereInputResolver) IDGt(ctx context.Context, obj *ent.QueueWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *queueWhereInputResolver) IDGte(ctx context.Context, obj *ent.QueueWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *queueWhereInputResolver) IDLt(ctx context.Context, obj *ent.QueueWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *queueWhereInputResolver) IDLte(ctx context.Context, obj *ent.QueueWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *stageWhereInputResolver) ID(ctx context.Context, obj *ent.StageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *stageWhereInputResolver) IDNeq(ctx context.Context, obj *ent.StageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *stageWhereInputResolver) IDIn(ctx context.Context, obj *ent.StageWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *stageWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.StageWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *stageWhereInputResolver) IDGt(ctx context.Context, obj *ent.StageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *stageWhereInputResolver) IDGte(ctx context.Context, obj *ent.StageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *stageWhereInputResolver) IDLt(ctx context.Context, obj *ent.StageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *stageWhereInputResolver) IDLte(ctx context.Context, obj *ent.StageWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *textWhereInputResolver) ID(ctx context.Context, obj *ent.TextWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *textWhereInputResolver) IDNeq(ctx context.Context, obj *ent.TextWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *textWhereInputResolver) IDIn(ctx context.Context, obj *ent.TextWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *textWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.TextWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *textWhereInputResolver) IDGt(ctx context.Context, obj *ent.TextWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *textWhereInputResolver) IDGte(ctx context.Context, obj *ent.TextWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *textWhereInputResolver) IDLt(ctx context.Context, obj *ent.TextWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *textWhereInputResolver) IDLte(ctx context.Context, obj *ent.TextWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// DealID is the resolver for the dealID field.
func (r *updateChatInputResolver) DealID(ctx context.Context, obj *ent.UpdateChatInput, data *string) error {
	panic(fmt.Errorf("not implemented: DealID - dealID"))
}

// AddEmployeeIDs is the resolver for the addEmployeeIDs field.
func (r *updateChatInputResolver) AddEmployeeIDs(ctx context.Context, obj *ent.UpdateChatInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddEmployeeIDs - addEmployeeIDs"))
}

// RemoveEmployeeIDs is the resolver for the removeEmployeeIDs field.
func (r *updateChatInputResolver) RemoveEmployeeIDs(ctx context.Context, obj *ent.UpdateChatInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveEmployeeIDs - removeEmployeeIDs"))
}

// AddMessageIDs is the resolver for the addMessageIDs field.
func (r *updateChatInputResolver) AddMessageIDs(ctx context.Context, obj *ent.UpdateChatInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddMessageIDs - addMessageIDs"))
}

// RemoveMessageIDs is the resolver for the removeMessageIDs field.
func (r *updateChatInputResolver) RemoveMessageIDs(ctx context.Context, obj *ent.UpdateChatInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveMessageIDs - removeMessageIDs"))
}

// AddEmployeeIDs is the resolver for the addEmployeeIDs field.
func (r *updateCompanyInputResolver) AddEmployeeIDs(ctx context.Context, obj *ent.UpdateCompanyInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddEmployeeIDs - addEmployeeIDs"))
}

// RemoveEmployeeIDs is the resolver for the removeEmployeeIDs field.
func (r *updateCompanyInputResolver) RemoveEmployeeIDs(ctx context.Context, obj *ent.UpdateCompanyInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveEmployeeIDs - removeEmployeeIDs"))
}

// AddDealIDs is the resolver for the addDealIDs field.
func (r *updateCostumerInputResolver) AddDealIDs(ctx context.Context, obj *ent.UpdateCostumerInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddDealIDs - addDealIDs"))
}

// RemoveDealIDs is the resolver for the removeDealIDs field.
func (r *updateCostumerInputResolver) RemoveDealIDs(ctx context.Context, obj *ent.UpdateCostumerInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveDealIDs - removeDealIDs"))
}

// AddDropdownListIDs is the resolver for the addDropdownListIDs field.
func (r *updateCrmFieldInputResolver) AddDropdownListIDs(ctx context.Context, obj *ent.UpdateCrmFieldInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddDropdownListIDs - addDropdownListIDs"))
}

// RemoveDropdownListIDs is the resolver for the removeDropdownListIDs field.
func (r *updateCrmFieldInputResolver) RemoveDropdownListIDs(ctx context.Context, obj *ent.UpdateCrmFieldInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveDropdownListIDs - removeDropdownListIDs"))
}

// AddDealCrmFieldIDs is the resolver for the addDealCrmFieldIDs field.
func (r *updateCrmFieldInputResolver) AddDealCrmFieldIDs(ctx context.Context, obj *ent.UpdateCrmFieldInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddDealCrmFieldIDs - addDealCrmFieldIDs"))
}

// RemoveDealCrmFieldIDs is the resolver for the removeDealCrmFieldIDs field.
func (r *updateCrmFieldInputResolver) RemoveDealCrmFieldIDs(ctx context.Context, obj *ent.UpdateCrmFieldInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveDealCrmFieldIDs - removeDealCrmFieldIDs"))
}

// DealID is the resolver for the dealID field.
func (r *updateDealCrmFieldInputResolver) DealID(ctx context.Context, obj *ent.UpdateDealCrmFieldInput, data *string) error {
	panic(fmt.Errorf("not implemented: DealID - dealID"))
}

// CrmfieldID is the resolver for the crmfieldID field.
func (r *updateDealCrmFieldInputResolver) CrmfieldID(ctx context.Context, obj *ent.UpdateDealCrmFieldInput, data *string) error {
	panic(fmt.Errorf("not implemented: CrmfieldID - crmfieldID"))
}

// CostumerID is the resolver for the costumerID field.
func (r *updateDealInputResolver) CostumerID(ctx context.Context, obj *ent.UpdateDealInput, data *string) error {
	panic(fmt.Errorf("not implemented: CostumerID - costumerID"))
}

// ChatID is the resolver for the chatID field.
func (r *updateDealInputResolver) ChatID(ctx context.Context, obj *ent.UpdateDealInput, data *string) error {
	panic(fmt.Errorf("not implemented: ChatID - chatID"))
}

// StageID is the resolver for the stageID field.
func (r *updateDealInputResolver) StageID(ctx context.Context, obj *ent.UpdateDealInput, data *string) error {
	panic(fmt.Errorf("not implemented: StageID - stageID"))
}

// AddDealCrmFieldIDs is the resolver for the addDealCrmFieldIDs field.
func (r *updateDealInputResolver) AddDealCrmFieldIDs(ctx context.Context, obj *ent.UpdateDealInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddDealCrmFieldIDs - addDealCrmFieldIDs"))
}

// RemoveDealCrmFieldIDs is the resolver for the removeDealCrmFieldIDs field.
func (r *updateDealInputResolver) RemoveDealCrmFieldIDs(ctx context.Context, obj *ent.UpdateDealInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveDealCrmFieldIDs - removeDealCrmFieldIDs"))
}

// AddEmployeeIDs is the resolver for the addEmployeeIDs field.
func (r *updateDepartmentInputResolver) AddEmployeeIDs(ctx context.Context, obj *ent.UpdateDepartmentInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddEmployeeIDs - addEmployeeIDs"))
}

// RemoveEmployeeIDs is the resolver for the removeEmployeeIDs field.
func (r *updateDepartmentInputResolver) RemoveEmployeeIDs(ctx context.Context, obj *ent.UpdateDepartmentInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveEmployeeIDs - removeEmployeeIDs"))
}

// AddQueueIDs is the resolver for the addQueueIDs field.
func (r *updateDepartmentInputResolver) AddQueueIDs(ctx context.Context, obj *ent.UpdateDepartmentInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddQueueIDs - addQueueIDs"))
}

// RemoveQueueIDs is the resolver for the removeQueueIDs field.
func (r *updateDepartmentInputResolver) RemoveQueueIDs(ctx context.Context, obj *ent.UpdateDepartmentInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveQueueIDs - removeQueueIDs"))
}

// AddCrmFieldIDs is the resolver for the addCrmFieldIDs field.
func (r *updateDropdownListInputResolver) AddCrmFieldIDs(ctx context.Context, obj *ent.UpdateDropdownListInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddCrmFieldIDs - addCrmFieldIDs"))
}

// RemoveCrmFieldIDs is the resolver for the removeCrmFieldIDs field.
func (r *updateDropdownListInputResolver) RemoveCrmFieldIDs(ctx context.Context, obj *ent.UpdateDropdownListInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveCrmFieldIDs - removeCrmFieldIDs"))
}

// EmployeeauthID is the resolver for the employeeauthID field.
func (r *updateEmployeeInputResolver) EmployeeauthID(ctx context.Context, obj *ent.UpdateEmployeeInput, data *string) error {
	panic(fmt.Errorf("not implemented: EmployeeauthID - employeeauthID"))
}

// CompanyID is the resolver for the companyID field.
func (r *updateEmployeeInputResolver) CompanyID(ctx context.Context, obj *ent.UpdateEmployeeInput, data *string) error {
	panic(fmt.Errorf("not implemented: CompanyID - companyID"))
}

// DepartmentID is the resolver for the departmentID field.
func (r *updateEmployeeInputResolver) DepartmentID(ctx context.Context, obj *ent.UpdateEmployeeInput, data *string) error {
	panic(fmt.Errorf("not implemented: DepartmentID - departmentID"))
}

// AddChatIDs is the resolver for the addChatIDs field.
func (r *updateEmployeeInputResolver) AddChatIDs(ctx context.Context, obj *ent.UpdateEmployeeInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddChatIDs - addChatIDs"))
}

// RemoveChatIDs is the resolver for the removeChatIDs field.
func (r *updateEmployeeInputResolver) RemoveChatIDs(ctx context.Context, obj *ent.UpdateEmployeeInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveChatIDs - removeChatIDs"))
}

// AddQueueIDs is the resolver for the addQueueIDs field.
func (r *updateEmployeeInputResolver) AddQueueIDs(ctx context.Context, obj *ent.UpdateEmployeeInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddQueueIDs - addQueueIDs"))
}

// RemoveQueueIDs is the resolver for the removeQueueIDs field.
func (r *updateEmployeeInputResolver) RemoveQueueIDs(ctx context.Context, obj *ent.UpdateEmployeeInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveQueueIDs - removeQueueIDs"))
}

// AddMessageIDs is the resolver for the addMessageIDs field.
func (r *updateEmployeeInputResolver) AddMessageIDs(ctx context.Context, obj *ent.UpdateEmployeeInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddMessageIDs - addMessageIDs"))
}

// RemoveMessageIDs is the resolver for the removeMessageIDs field.
func (r *updateEmployeeInputResolver) RemoveMessageIDs(ctx context.Context, obj *ent.UpdateEmployeeInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveMessageIDs - removeMessageIDs"))
}

// MessageID is the resolver for the messageID field.
func (r *updateFileInputResolver) MessageID(ctx context.Context, obj *ent.UpdateFileInput, data *string) error {
	panic(fmt.Errorf("not implemented: MessageID - messageID"))
}

// ChatID is the resolver for the chatID field.
func (r *updateMessageInputResolver) ChatID(ctx context.Context, obj *ent.UpdateMessageInput, data *string) error {
	panic(fmt.Errorf("not implemented: ChatID - chatID"))
}

// AddEmployeeIDs is the resolver for the addEmployeeIDs field.
func (r *updateMessageInputResolver) AddEmployeeIDs(ctx context.Context, obj *ent.UpdateMessageInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddEmployeeIDs - addEmployeeIDs"))
}

// RemoveEmployeeIDs is the resolver for the removeEmployeeIDs field.
func (r *updateMessageInputResolver) RemoveEmployeeIDs(ctx context.Context, obj *ent.UpdateMessageInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveEmployeeIDs - removeEmployeeIDs"))
}

// TextID is the resolver for the textID field.
func (r *updateMessageInputResolver) TextID(ctx context.Context, obj *ent.UpdateMessageInput, data *string) error {
	panic(fmt.Errorf("not implemented: TextID - textID"))
}

// FileID is the resolver for the fileID field.
func (r *updateMessageInputResolver) FileID(ctx context.Context, obj *ent.UpdateMessageInput, data *string) error {
	panic(fmt.Errorf("not implemented: FileID - fileID"))
}

// AddStageIDs is the resolver for the addStageIDs field.
func (r *updatePipelineInputResolver) AddStageIDs(ctx context.Context, obj *ent.UpdatePipelineInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddStageIDs - addStageIDs"))
}

// RemoveStageIDs is the resolver for the removeStageIDs field.
func (r *updatePipelineInputResolver) RemoveStageIDs(ctx context.Context, obj *ent.UpdatePipelineInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveStageIDs - removeStageIDs"))
}

// AddStageIDs is the resolver for the addStageIDs field.
func (r *updateQueueInputResolver) AddStageIDs(ctx context.Context, obj *ent.UpdateQueueInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddStageIDs - addStageIDs"))
}

// RemoveStageIDs is the resolver for the removeStageIDs field.
func (r *updateQueueInputResolver) RemoveStageIDs(ctx context.Context, obj *ent.UpdateQueueInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveStageIDs - removeStageIDs"))
}

// AddEmployeeIDs is the resolver for the addEmployeeIDs field.
func (r *updateQueueInputResolver) AddEmployeeIDs(ctx context.Context, obj *ent.UpdateQueueInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddEmployeeIDs - addEmployeeIDs"))
}

// RemoveEmployeeIDs is the resolver for the removeEmployeeIDs field.
func (r *updateQueueInputResolver) RemoveEmployeeIDs(ctx context.Context, obj *ent.UpdateQueueInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveEmployeeIDs - removeEmployeeIDs"))
}

// AddDepartmentIDs is the resolver for the addDepartmentIDs field.
func (r *updateQueueInputResolver) AddDepartmentIDs(ctx context.Context, obj *ent.UpdateQueueInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddDepartmentIDs - addDepartmentIDs"))
}

// RemoveDepartmentIDs is the resolver for the removeDepartmentIDs field.
func (r *updateQueueInputResolver) RemoveDepartmentIDs(ctx context.Context, obj *ent.UpdateQueueInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveDepartmentIDs - removeDepartmentIDs"))
}

// PipelineID is the resolver for the pipelineID field.
func (r *updateStageInputResolver) PipelineID(ctx context.Context, obj *ent.UpdateStageInput, data *string) error {
	panic(fmt.Errorf("not implemented: PipelineID - pipelineID"))
}

// AddDealIDs is the resolver for the addDealIDs field.
func (r *updateStageInputResolver) AddDealIDs(ctx context.Context, obj *ent.UpdateStageInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddDealIDs - addDealIDs"))
}

// RemoveDealIDs is the resolver for the removeDealIDs field.
func (r *updateStageInputResolver) RemoveDealIDs(ctx context.Context, obj *ent.UpdateStageInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveDealIDs - removeDealIDs"))
}

// QueueID is the resolver for the queueID field.
func (r *updateStageInputResolver) QueueID(ctx context.Context, obj *ent.UpdateStageInput, data *string) error {
	panic(fmt.Errorf("not implemented: QueueID - queueID"))
}

// MessageID is the resolver for the messageID field.
func (r *updateTextInputResolver) MessageID(ctx context.Context, obj *ent.UpdateTextInput, data *string) error {
	panic(fmt.Errorf("not implemented: MessageID - messageID"))
}

// Chat returns ChatResolver implementation.
func (r *Resolver) Chat() ChatResolver { return &chatResolver{r} }

// Company returns CompanyResolver implementation.
func (r *Resolver) Company() CompanyResolver { return &companyResolver{r} }

// Costumer returns CostumerResolver implementation.
func (r *Resolver) Costumer() CostumerResolver { return &costumerResolver{r} }

// CrmField returns CrmFieldResolver implementation.
func (r *Resolver) CrmField() CrmFieldResolver { return &crmFieldResolver{r} }

// Deal returns DealResolver implementation.
func (r *Resolver) Deal() DealResolver { return &dealResolver{r} }

// DealCrmField returns DealCrmFieldResolver implementation.
func (r *Resolver) DealCrmField() DealCrmFieldResolver { return &dealCrmFieldResolver{r} }

// Department returns DepartmentResolver implementation.
func (r *Resolver) Department() DepartmentResolver { return &departmentResolver{r} }

// DropdownList returns DropdownListResolver implementation.
func (r *Resolver) DropdownList() DropdownListResolver { return &dropdownListResolver{r} }

// Employee returns EmployeeResolver implementation.
func (r *Resolver) Employee() EmployeeResolver { return &employeeResolver{r} }

// EmployeeAuth returns EmployeeAuthResolver implementation.
func (r *Resolver) EmployeeAuth() EmployeeAuthResolver { return &employeeAuthResolver{r} }

// File returns FileResolver implementation.
func (r *Resolver) File() FileResolver { return &fileResolver{r} }

// Message returns MessageResolver implementation.
func (r *Resolver) Message() MessageResolver { return &messageResolver{r} }

// Pipeline returns PipelineResolver implementation.
func (r *Resolver) Pipeline() PipelineResolver { return &pipelineResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Queue returns QueueResolver implementation.
func (r *Resolver) Queue() QueueResolver { return &queueResolver{r} }

// Stage returns StageResolver implementation.
func (r *Resolver) Stage() StageResolver { return &stageResolver{r} }

// Text returns TextResolver implementation.
func (r *Resolver) Text() TextResolver { return &textResolver{r} }

// ChatWhereInput returns ChatWhereInputResolver implementation.
func (r *Resolver) ChatWhereInput() ChatWhereInputResolver { return &chatWhereInputResolver{r} }

// CompanyWhereInput returns CompanyWhereInputResolver implementation.
func (r *Resolver) CompanyWhereInput() CompanyWhereInputResolver {
	return &companyWhereInputResolver{r}
}

// CostumerWhereInput returns CostumerWhereInputResolver implementation.
func (r *Resolver) CostumerWhereInput() CostumerWhereInputResolver {
	return &costumerWhereInputResolver{r}
}

// CreateChatInput returns CreateChatInputResolver implementation.
func (r *Resolver) CreateChatInput() CreateChatInputResolver { return &createChatInputResolver{r} }

// CreateCompanyInput returns CreateCompanyInputResolver implementation.
func (r *Resolver) CreateCompanyInput() CreateCompanyInputResolver {
	return &createCompanyInputResolver{r}
}

// CreateCostumerInput returns CreateCostumerInputResolver implementation.
func (r *Resolver) CreateCostumerInput() CreateCostumerInputResolver {
	return &createCostumerInputResolver{r}
}

// CreateCrmFieldInput returns CreateCrmFieldInputResolver implementation.
func (r *Resolver) CreateCrmFieldInput() CreateCrmFieldInputResolver {
	return &createCrmFieldInputResolver{r}
}

// CreateDealCrmFieldInput returns CreateDealCrmFieldInputResolver implementation.
func (r *Resolver) CreateDealCrmFieldInput() CreateDealCrmFieldInputResolver {
	return &createDealCrmFieldInputResolver{r}
}

// CreateDealInput returns CreateDealInputResolver implementation.
func (r *Resolver) CreateDealInput() CreateDealInputResolver { return &createDealInputResolver{r} }

// CreateDepartmentInput returns CreateDepartmentInputResolver implementation.
func (r *Resolver) CreateDepartmentInput() CreateDepartmentInputResolver {
	return &createDepartmentInputResolver{r}
}

// CreateDropdownListInput returns CreateDropdownListInputResolver implementation.
func (r *Resolver) CreateDropdownListInput() CreateDropdownListInputResolver {
	return &createDropdownListInputResolver{r}
}

// CreateEmployeeInput returns CreateEmployeeInputResolver implementation.
func (r *Resolver) CreateEmployeeInput() CreateEmployeeInputResolver {
	return &createEmployeeInputResolver{r}
}

// CreateFileInput returns CreateFileInputResolver implementation.
func (r *Resolver) CreateFileInput() CreateFileInputResolver { return &createFileInputResolver{r} }

// CreateMessageInput returns CreateMessageInputResolver implementation.
func (r *Resolver) CreateMessageInput() CreateMessageInputResolver {
	return &createMessageInputResolver{r}
}

// CreatePipelineInput returns CreatePipelineInputResolver implementation.
func (r *Resolver) CreatePipelineInput() CreatePipelineInputResolver {
	return &createPipelineInputResolver{r}
}

// CreateQueueInput returns CreateQueueInputResolver implementation.
func (r *Resolver) CreateQueueInput() CreateQueueInputResolver { return &createQueueInputResolver{r} }

// CreateStageInput returns CreateStageInputResolver implementation.
func (r *Resolver) CreateStageInput() CreateStageInputResolver { return &createStageInputResolver{r} }

// CreateTextInput returns CreateTextInputResolver implementation.
func (r *Resolver) CreateTextInput() CreateTextInputResolver { return &createTextInputResolver{r} }

// CrmFieldWhereInput returns CrmFieldWhereInputResolver implementation.
func (r *Resolver) CrmFieldWhereInput() CrmFieldWhereInputResolver {
	return &crmFieldWhereInputResolver{r}
}

// DealCrmFieldWhereInput returns DealCrmFieldWhereInputResolver implementation.
func (r *Resolver) DealCrmFieldWhereInput() DealCrmFieldWhereInputResolver {
	return &dealCrmFieldWhereInputResolver{r}
}

// DealWhereInput returns DealWhereInputResolver implementation.
func (r *Resolver) DealWhereInput() DealWhereInputResolver { return &dealWhereInputResolver{r} }

// DepartmentWhereInput returns DepartmentWhereInputResolver implementation.
func (r *Resolver) DepartmentWhereInput() DepartmentWhereInputResolver {
	return &departmentWhereInputResolver{r}
}

// DropdownListWhereInput returns DropdownListWhereInputResolver implementation.
func (r *Resolver) DropdownListWhereInput() DropdownListWhereInputResolver {
	return &dropdownListWhereInputResolver{r}
}

// EmployeeAuthWhereInput returns EmployeeAuthWhereInputResolver implementation.
func (r *Resolver) EmployeeAuthWhereInput() EmployeeAuthWhereInputResolver {
	return &employeeAuthWhereInputResolver{r}
}

// EmployeeWhereInput returns EmployeeWhereInputResolver implementation.
func (r *Resolver) EmployeeWhereInput() EmployeeWhereInputResolver {
	return &employeeWhereInputResolver{r}
}

// FileWhereInput returns FileWhereInputResolver implementation.
func (r *Resolver) FileWhereInput() FileWhereInputResolver { return &fileWhereInputResolver{r} }

// MessageWhereInput returns MessageWhereInputResolver implementation.
func (r *Resolver) MessageWhereInput() MessageWhereInputResolver {
	return &messageWhereInputResolver{r}
}

// PipelineWhereInput returns PipelineWhereInputResolver implementation.
func (r *Resolver) PipelineWhereInput() PipelineWhereInputResolver {
	return &pipelineWhereInputResolver{r}
}

// QueueWhereInput returns QueueWhereInputResolver implementation.
func (r *Resolver) QueueWhereInput() QueueWhereInputResolver { return &queueWhereInputResolver{r} }

// StageWhereInput returns StageWhereInputResolver implementation.
func (r *Resolver) StageWhereInput() StageWhereInputResolver { return &stageWhereInputResolver{r} }

// TextWhereInput returns TextWhereInputResolver implementation.
func (r *Resolver) TextWhereInput() TextWhereInputResolver { return &textWhereInputResolver{r} }

// UpdateChatInput returns UpdateChatInputResolver implementation.
func (r *Resolver) UpdateChatInput() UpdateChatInputResolver { return &updateChatInputResolver{r} }

// UpdateCompanyInput returns UpdateCompanyInputResolver implementation.
func (r *Resolver) UpdateCompanyInput() UpdateCompanyInputResolver {
	return &updateCompanyInputResolver{r}
}

// UpdateCostumerInput returns UpdateCostumerInputResolver implementation.
func (r *Resolver) UpdateCostumerInput() UpdateCostumerInputResolver {
	return &updateCostumerInputResolver{r}
}

// UpdateCrmFieldInput returns UpdateCrmFieldInputResolver implementation.
func (r *Resolver) UpdateCrmFieldInput() UpdateCrmFieldInputResolver {
	return &updateCrmFieldInputResolver{r}
}

// UpdateDealCrmFieldInput returns UpdateDealCrmFieldInputResolver implementation.
func (r *Resolver) UpdateDealCrmFieldInput() UpdateDealCrmFieldInputResolver {
	return &updateDealCrmFieldInputResolver{r}
}

// UpdateDealInput returns UpdateDealInputResolver implementation.
func (r *Resolver) UpdateDealInput() UpdateDealInputResolver { return &updateDealInputResolver{r} }

// UpdateDepartmentInput returns UpdateDepartmentInputResolver implementation.
func (r *Resolver) UpdateDepartmentInput() UpdateDepartmentInputResolver {
	return &updateDepartmentInputResolver{r}
}

// UpdateDropdownListInput returns UpdateDropdownListInputResolver implementation.
func (r *Resolver) UpdateDropdownListInput() UpdateDropdownListInputResolver {
	return &updateDropdownListInputResolver{r}
}

// UpdateEmployeeInput returns UpdateEmployeeInputResolver implementation.
func (r *Resolver) UpdateEmployeeInput() UpdateEmployeeInputResolver {
	return &updateEmployeeInputResolver{r}
}

// UpdateFileInput returns UpdateFileInputResolver implementation.
func (r *Resolver) UpdateFileInput() UpdateFileInputResolver { return &updateFileInputResolver{r} }

// UpdateMessageInput returns UpdateMessageInputResolver implementation.
func (r *Resolver) UpdateMessageInput() UpdateMessageInputResolver {
	return &updateMessageInputResolver{r}
}

// UpdatePipelineInput returns UpdatePipelineInputResolver implementation.
func (r *Resolver) UpdatePipelineInput() UpdatePipelineInputResolver {
	return &updatePipelineInputResolver{r}
}

// UpdateQueueInput returns UpdateQueueInputResolver implementation.
func (r *Resolver) UpdateQueueInput() UpdateQueueInputResolver { return &updateQueueInputResolver{r} }

// UpdateStageInput returns UpdateStageInputResolver implementation.
func (r *Resolver) UpdateStageInput() UpdateStageInputResolver { return &updateStageInputResolver{r} }

// UpdateTextInput returns UpdateTextInputResolver implementation.
func (r *Resolver) UpdateTextInput() UpdateTextInputResolver { return &updateTextInputResolver{r} }

type chatResolver struct{ *Resolver }
type companyResolver struct{ *Resolver }
type costumerResolver struct{ *Resolver }
type crmFieldResolver struct{ *Resolver }
type dealResolver struct{ *Resolver }
type dealCrmFieldResolver struct{ *Resolver }
type departmentResolver struct{ *Resolver }
type dropdownListResolver struct{ *Resolver }
type employeeResolver struct{ *Resolver }
type employeeAuthResolver struct{ *Resolver }
type fileResolver struct{ *Resolver }
type messageResolver struct{ *Resolver }
type pipelineResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type queueResolver struct{ *Resolver }
type stageResolver struct{ *Resolver }
type textResolver struct{ *Resolver }
type chatWhereInputResolver struct{ *Resolver }
type companyWhereInputResolver struct{ *Resolver }
type costumerWhereInputResolver struct{ *Resolver }
type createChatInputResolver struct{ *Resolver }
type createCompanyInputResolver struct{ *Resolver }
type createCostumerInputResolver struct{ *Resolver }
type createCrmFieldInputResolver struct{ *Resolver }
type createDealCrmFieldInputResolver struct{ *Resolver }
type createDealInputResolver struct{ *Resolver }
type createDepartmentInputResolver struct{ *Resolver }
type createDropdownListInputResolver struct{ *Resolver }
type createEmployeeInputResolver struct{ *Resolver }
type createFileInputResolver struct{ *Resolver }
type createMessageInputResolver struct{ *Resolver }
type createPipelineInputResolver struct{ *Resolver }
type createQueueInputResolver struct{ *Resolver }
type createStageInputResolver struct{ *Resolver }
type createTextInputResolver struct{ *Resolver }
type crmFieldWhereInputResolver struct{ *Resolver }
type dealCrmFieldWhereInputResolver struct{ *Resolver }
type dealWhereInputResolver struct{ *Resolver }
type departmentWhereInputResolver struct{ *Resolver }
type dropdownListWhereInputResolver struct{ *Resolver }
type employeeAuthWhereInputResolver struct{ *Resolver }
type employeeWhereInputResolver struct{ *Resolver }
type fileWhereInputResolver struct{ *Resolver }
type messageWhereInputResolver struct{ *Resolver }
type pipelineWhereInputResolver struct{ *Resolver }
type queueWhereInputResolver struct{ *Resolver }
type stageWhereInputResolver struct{ *Resolver }
type textWhereInputResolver struct{ *Resolver }
type updateChatInputResolver struct{ *Resolver }
type updateCompanyInputResolver struct{ *Resolver }
type updateCostumerInputResolver struct{ *Resolver }
type updateCrmFieldInputResolver struct{ *Resolver }
type updateDealCrmFieldInputResolver struct{ *Resolver }
type updateDealInputResolver struct{ *Resolver }
type updateDepartmentInputResolver struct{ *Resolver }
type updateDropdownListInputResolver struct{ *Resolver }
type updateEmployeeInputResolver struct{ *Resolver }
type updateFileInputResolver struct{ *Resolver }
type updateMessageInputResolver struct{ *Resolver }
type updatePipelineInputResolver struct{ *Resolver }
type updateQueueInputResolver struct{ *Resolver }
type updateStageInputResolver struct{ *Resolver }
type updateTextInputResolver struct{ *Resolver }
