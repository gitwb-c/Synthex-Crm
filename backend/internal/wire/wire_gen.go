// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"crm.saas/backend/internal/repositories"
	"crm.saas/backend/internal/services"
)

// Injectors from wire.go:

func InitializeChatHandler() *services.ChatService {
	chatRepository := repositories.NewChatRepository()
	chatService := services.NewChatService(chatRepository)
	return chatService
}

func InitializeCostumerHandler() *services.CostumerService {
	costumerRepository := repositories.NewCostumerRepository()
	costumerService := services.NewCostumerService(costumerRepository)
	return costumerService
}

func InitializeDealHandler() *services.DealService {
	dealRepository := repositories.NewDealRepository()
	dealService := services.NewDealService(dealRepository)
	return dealService
}

func InitializeDepartmentHandler() *services.DepartmentService {
	departmentRepository := repositories.NewDepartmentRepository()
	departmentService := services.NewDepartmentService(departmentRepository)
	return departmentService
}

func InitializeEmployeeHandler() *services.EmployeeService {
	employeeRepository := repositories.NewEmployeeRepository()
	employeeService := services.NewEmployeeService(employeeRepository)
	return employeeService
}

func InitializeEmployeeAuthHandler() *services.EmployeeAuthService {
	employeeAuthRepository := repositories.NewEmployeeAuthRepository()
	employeeAuthService := services.NewEmployeeAuthService(employeeAuthRepository)
	return employeeAuthService
}

func InitializeFieldHandler() *services.FieldService {
	fieldRepository := repositories.NewFieldRepository()
	fieldService := services.NewFieldService(fieldRepository)
	return fieldService
}

func InitializeFormHandler() *services.FormService {
	formRepository := repositories.NewFormRepository()
	formService := services.NewFormService(formRepository)
	return formService
}

func InitializeMessageHandler() *services.MessageService {
	messageRepository := repositories.NewMessageRepository()
	messageService := services.NewMessageService(messageRepository)
	return messageService
}

func InitializePipelineHandler() *services.PipelineService {
	pipelineRepository := repositories.NewPipelineRepository()
	pipelineService := services.NewPipelineService(pipelineRepository)
	return pipelineService
}

func InitializeQueueHandler() *services.QueueService {
	queueRepository := repositories.NewQueueRepository()
	queueService := services.NewQueueService(queueRepository)
	return queueService
}

func InitializeStageHandler() *services.StageService {
	stageRepository := repositories.NewStageRepository()
	stageService := services.NewStageService(stageRepository)
	return stageService
}
